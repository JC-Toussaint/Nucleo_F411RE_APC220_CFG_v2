
Nucleo_F411RE_APC220_CFG_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ca4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000029d8  08005e44  08005e44  00015e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800881c  0800881c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800881c  0800881c  0001881c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008824  08008824  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008824  08008824  00018824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008828  08008828  00018828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800882c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  20000088  080088b4  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  080088b4  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef72  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002742  00000000  00000000  0002f02a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  00031770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  000325d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199e5  00000000  00000000  00033340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011451  00000000  00000000  0004cd25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009584a  00000000  00000000  0005e176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f39c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004568  00000000  00000000  000f3a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005e2c 	.word	0x08005e2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08005e2c 	.word	0x08005e2c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000588:	4b04      	ldr	r3, [pc, #16]	; (800059c <__NVIC_GetPriorityGrouping+0x18>)
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	0a1b      	lsrs	r3, r3, #8
 800058e:	f003 0307 	and.w	r3, r3, #7
}
 8000592:	4618      	mov	r0, r3
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	e000ed00 	.word	0xe000ed00

080005a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	db0b      	blt.n	80005ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	f003 021f 	and.w	r2, r3, #31
 80005b8:	4907      	ldr	r1, [pc, #28]	; (80005d8 <__NVIC_EnableIRQ+0x38>)
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005be:	095b      	lsrs	r3, r3, #5
 80005c0:	2001      	movs	r0, #1
 80005c2:	fa00 f202 	lsl.w	r2, r0, r2
 80005c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	e000e100 	.word	0xe000e100

080005dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	db0a      	blt.n	8000606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	490c      	ldr	r1, [pc, #48]	; (8000628 <__NVIC_SetPriority+0x4c>)
 80005f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fa:	0112      	lsls	r2, r2, #4
 80005fc:	b2d2      	uxtb	r2, r2
 80005fe:	440b      	add	r3, r1
 8000600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000604:	e00a      	b.n	800061c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4908      	ldr	r1, [pc, #32]	; (800062c <__NVIC_SetPriority+0x50>)
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	f003 030f 	and.w	r3, r3, #15
 8000612:	3b04      	subs	r3, #4
 8000614:	0112      	lsls	r2, r2, #4
 8000616:	b2d2      	uxtb	r2, r2
 8000618:	440b      	add	r3, r1
 800061a:	761a      	strb	r2, [r3, #24]
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	e000e100 	.word	0xe000e100
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000630:	b480      	push	{r7}
 8000632:	b089      	sub	sp, #36	; 0x24
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	f003 0307 	and.w	r3, r3, #7
 8000642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000644:	69fb      	ldr	r3, [r7, #28]
 8000646:	f1c3 0307 	rsb	r3, r3, #7
 800064a:	2b04      	cmp	r3, #4
 800064c:	bf28      	it	cs
 800064e:	2304      	movcs	r3, #4
 8000650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000652:	69fb      	ldr	r3, [r7, #28]
 8000654:	3304      	adds	r3, #4
 8000656:	2b06      	cmp	r3, #6
 8000658:	d902      	bls.n	8000660 <NVIC_EncodePriority+0x30>
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	3b03      	subs	r3, #3
 800065e:	e000      	b.n	8000662 <NVIC_EncodePriority+0x32>
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000664:	f04f 32ff 	mov.w	r2, #4294967295
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	43da      	mvns	r2, r3
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	401a      	ands	r2, r3
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000678:	f04f 31ff 	mov.w	r1, #4294967295
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	fa01 f303 	lsl.w	r3, r1, r3
 8000682:	43d9      	mvns	r1, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000688:	4313      	orrs	r3, r2
         );
}
 800068a:	4618      	mov	r0, r3
 800068c:	3724      	adds	r7, #36	; 0x24
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr

08000696 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000696:	b480      	push	{r7}
 8000698:	b083      	sub	sp, #12
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	68db      	ldr	r3, [r3, #12]
 80006a2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	60da      	str	r2, [r3, #12]
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <LL_USART_Disable>:
  * @rmtoll CR1          UE            LL_USART_Disable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
 80006b6:	b480      	push	{r7}
 80006b8:	b083      	sub	sp, #12
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	60da      	str	r2, [r3, #12]
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80006d6:	b480      	push	{r7}
 80006d8:	b083      	sub	sp, #12
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	691b      	ldr	r3, [r3, #16]
 80006e2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	615a      	str	r2, [r3, #20]
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8000702:	b480      	push	{r7}
 8000704:	b085      	sub	sp, #20
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000710:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000718:	68fb      	ldr	r3, [r7, #12]
}
 800071a:	bf00      	nop
 800071c:	3714      	adds	r7, #20
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr

08000726 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000726:	b480      	push	{r7}
 8000728:	b089      	sub	sp, #36	; 0x24
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	330c      	adds	r3, #12
 8000732:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	e853 3f00 	ldrex	r3, [r3]
 800073a:	60bb      	str	r3, [r7, #8]
   return(result);
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	f043 0320 	orr.w	r3, r3, #32
 8000742:	61fb      	str	r3, [r7, #28]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	330c      	adds	r3, #12
 8000748:	69fa      	ldr	r2, [r7, #28]
 800074a:	61ba      	str	r2, [r7, #24]
 800074c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800074e:	6979      	ldr	r1, [r7, #20]
 8000750:	69ba      	ldr	r2, [r7, #24]
 8000752:	e841 2300 	strex	r3, r2, [r1]
 8000756:	613b      	str	r3, [r7, #16]
   return(result);
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d1e7      	bne.n	800072e <LL_USART_EnableIT_RXNE+0x8>
}
 800075e:	bf00      	nop
 8000760:	bf00      	nop
 8000762:	3724      	adds	r7, #36	; 0x24
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 800076c:	b480      	push	{r7}
 800076e:	b089      	sub	sp, #36	; 0x24
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3314      	adds	r3, #20
 8000778:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	e853 3f00 	ldrex	r3, [r3]
 8000780:	60bb      	str	r3, [r7, #8]
   return(result);
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	61fb      	str	r3, [r7, #28]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	3314      	adds	r3, #20
 800078e:	69fa      	ldr	r2, [r7, #28]
 8000790:	61ba      	str	r2, [r7, #24]
 8000792:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000794:	6979      	ldr	r1, [r7, #20]
 8000796:	69ba      	ldr	r2, [r7, #24]
 8000798:	e841 2300 	strex	r3, r2, [r1]
 800079c:	613b      	str	r3, [r7, #16]
   return(result);
 800079e:	693b      	ldr	r3, [r7, #16]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d1e7      	bne.n	8000774 <LL_USART_EnableIT_ERROR+0x8>
}
 80007a4:	bf00      	nop
 80007a6:	bf00      	nop
 80007a8:	3724      	adds	r7, #36	; 0x24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
	...

080007b4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007c0:	4907      	ldr	r1, [pc, #28]	; (80007e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4013      	ands	r3, r2
 80007d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007d2:	68fb      	ldr	r3, [r7, #12]
}
 80007d4:	bf00      	nop
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	40023800 	.word	0x40023800

080007e4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007f0:	4907      	ldr	r1, [pc, #28]	; (8000810 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4013      	ands	r3, r2
 8000800:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000802:	68fb      	ldr	r3, [r7, #12]
}
 8000804:	bf00      	nop
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	40023800 	.word	0x40023800

08000814 <_write>:
// Properties -> Settings -> MCU_Settings -> select use float with printf
/*
 * USART2, BaudRate = 115200, WordLength = UART_WORDLENGTH_8B, StopBits = UART_STOPBITS_1;
 * */
int _write(int file, char *ptr, int len)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t *)ptr, len, 10);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	b29a      	uxth	r2, r3
 8000824:	230a      	movs	r3, #10
 8000826:	68b9      	ldr	r1, [r7, #8]
 8000828:	4803      	ldr	r0, [pc, #12]	; (8000838 <_write+0x24>)
 800082a:	f002 ff8a 	bl	8003742 <HAL_UART_Transmit>
	return len;
 800082e:	687b      	ldr	r3, [r7, #4]
}
 8000830:	4618      	mov	r0, r3
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200000f8 	.word	0x200000f8

0800083c <UART_Transmit>:
	return len;
}
 */

void UART_Transmit(uint8_t *data, uint16_t length)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	460b      	mov	r3, r1
 8000846:	807b      	strh	r3, [r7, #2]
	// Wait for TXE (transmit data register empty) flag to be set
	while((USART1->SR & USART_SR_TXE) == 0);
 8000848:	bf00      	nop
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <UART_Transmit+0x58>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0f9      	beq.n	800084a <UART_Transmit+0xe>

	// Write data to the data register
	for(uint16_t i = 0; i < length; i++)
 8000856:	2300      	movs	r3, #0
 8000858:	81fb      	strh	r3, [r7, #14]
 800085a:	e00f      	b.n	800087c <UART_Transmit+0x40>
	{
		USART1->DR = data[i];
 800085c:	89fb      	ldrh	r3, [r7, #14]
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	4413      	add	r3, r2
 8000862:	781a      	ldrb	r2, [r3, #0]
 8000864:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <UART_Transmit+0x58>)
 8000866:	605a      	str	r2, [r3, #4]

		// Wait for TC (transmission complete) flag to be set
		while((USART1->SR & USART_SR_TC) == 0);
 8000868:	bf00      	nop
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <UART_Transmit+0x58>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000872:	2b00      	cmp	r3, #0
 8000874:	d0f9      	beq.n	800086a <UART_Transmit+0x2e>
	for(uint16_t i = 0; i < length; i++)
 8000876:	89fb      	ldrh	r3, [r7, #14]
 8000878:	3301      	adds	r3, #1
 800087a:	81fb      	strh	r3, [r7, #14]
 800087c:	89fa      	ldrh	r2, [r7, #14]
 800087e:	887b      	ldrh	r3, [r7, #2]
 8000880:	429a      	cmp	r2, r3
 8000882:	d3eb      	bcc.n	800085c <UART_Transmit+0x20>
	}
}
 8000884:	bf00      	nop
 8000886:	bf00      	nop
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40011000 	.word	0x40011000

08000898 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b0b0      	sub	sp, #192	; 0xc0
 800089c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800089e:	f001 f9d7 	bl	8001c50 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008a2:	f000 f971 	bl	8000b88 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008a6:	f000 fa91 	bl	8000dcc <MX_GPIO_Init>
	MX_I2C1_Init();
 80008aa:	f000 f9d7 	bl	8000c5c <MX_I2C1_Init>
	MX_USART1_UART_Init();
 80008ae:	f000 fa03 	bl	8000cb8 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80008b2:	f000 fa61 	bl	8000d78 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

#define SSD1306
#ifdef SSD1306
	LCD_Init();
 80008b6:	f000 fe64 	bl	8001582 <LCD_Init>
	LCD_PrintTest(0, 0, "test", SSD1306_COLOR_WHITE, LCD_CHAR_SMALL);
 80008ba:	2300      	movs	r3, #0
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	2301      	movs	r3, #1
 80008c0:	4a9f      	ldr	r2, [pc, #636]	; (8000b40 <main+0x2a8>)
 80008c2:	2100      	movs	r1, #0
 80008c4:	2000      	movs	r0, #0
 80008c6:	f000 fe63 	bl	8001590 <LCD_PrintTest>

	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80008ca:	2000      	movs	r0, #0
 80008cc:	f000 ffe2 	bl	8001894 <SSD1306_Fill>

	FontDef_t Font = Font_11x18;
 80008d0:	4a9c      	ldr	r2, [pc, #624]	; (8000b44 <main+0x2ac>)
 80008d2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80008d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008da:	e883 0003 	stmia.w	r3, {r0, r1}
	SSD1306_GotoXY(0, 0);
 80008de:	2100      	movs	r1, #0
 80008e0:	2000      	movs	r0, #0
 80008e2:	f001 f84f 	bl	8001984 <SSD1306_GotoXY>
	SSD1306_Puts("12345678901", &Font, SSD1306_COLOR_WHITE);
 80008e6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80008ea:	2201      	movs	r2, #1
 80008ec:	4619      	mov	r1, r3
 80008ee:	4896      	ldr	r0, [pc, #600]	; (8000b48 <main+0x2b0>)
 80008f0:	f001 f8de 	bl	8001ab0 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80008f4:	f000 ffa0 	bl	8001838 <SSD1306_UpdateScreen>

	SSD1306_GotoXY(0, 14);
 80008f8:	210e      	movs	r1, #14
 80008fa:	2000      	movs	r0, #0
 80008fc:	f001 f842 	bl	8001984 <SSD1306_GotoXY>
	SSD1306_Puts("ABCDEFGHIJK", &Font, SSD1306_COLOR_WHITE);
 8000900:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000904:	2201      	movs	r2, #1
 8000906:	4619      	mov	r1, r3
 8000908:	4890      	ldr	r0, [pc, #576]	; (8000b4c <main+0x2b4>)
 800090a:	f001 f8d1 	bl	8001ab0 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800090e:	f000 ff93 	bl	8001838 <SSD1306_UpdateScreen>

	HAL_Delay(2000);
 8000912:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000916:	f001 fa0d 	bl	8001d34 <HAL_Delay>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800091a:	2000      	movs	r0, #0
 800091c:	f000 ffba 	bl	8001894 <SSD1306_Fill>
#endif

	printf("Start ...\n");
 8000920:	488b      	ldr	r0, [pc, #556]	; (8000b50 <main+0x2b8>)
 8000922:	f004 f8cd 	bl	8004ac0 <puts>
	StartUartReception();
 8000926:	f000 fad3 	bl	8000ed0 <StartUartReception>

	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);
 800092a:	2201      	movs	r2, #1
 800092c:	2110      	movs	r1, #16
 800092e:	4889      	ldr	r0, [pc, #548]	; (8000b54 <main+0x2bc>)
 8000930:	f001 fc8e 	bl	8002250 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SET_GPIO_Port, SET_Pin, GPIO_PIN_SET);
 8000934:	2201      	movs	r2, #1
 8000936:	2140      	movs	r1, #64	; 0x40
 8000938:	4887      	ldr	r0, [pc, #540]	; (8000b58 <main+0x2c0>)
 800093a:	f001 fc89 	bl	8002250 <HAL_GPIO_WritePin>
	HAL_Delay(50); // 50ms at least
 800093e:	2032      	movs	r0, #50	; 0x32
 8000940:	f001 f9f8 	bl	8001d34 <HAL_Delay>

	HAL_GPIO_WritePin(SET_GPIO_Port, SET_Pin, GPIO_PIN_RESET); // pulling SET to low will put apc220 in config mode
 8000944:	2200      	movs	r2, #0
 8000946:	2140      	movs	r1, #64	; 0x40
 8000948:	4883      	ldr	r0, [pc, #524]	; (8000b58 <main+0x2c0>)
 800094a:	f001 fc81 	bl	8002250 <HAL_GPIO_WritePin>
	HAL_Delay(50); // stabilize please
 800094e:	2032      	movs	r0, #50	; 0x32
 8000950:	f001 f9f0 	bl	8001d34 <HAL_Delay>
  Series checkout 1     Series checkout：0 means no check,1 means even parity,2 means odd parity.
	 */

#define BaudRate57600
#ifdef BaudRate57600
	len = snprintf ( buffer, 128, "WR 433900 4 9 6 0\r\n"); // ask for data
 8000954:	4a81      	ldr	r2, [pc, #516]	; (8000b5c <main+0x2c4>)
 8000956:	2180      	movs	r1, #128	; 0x80
 8000958:	4881      	ldr	r0, [pc, #516]	; (8000b60 <main+0x2c8>)
 800095a:	f004 f8b9 	bl	8004ad0 <sniprintf>
 800095e:	4603      	mov	r3, r0
 8000960:	4a80      	ldr	r2, [pc, #512]	; (8000b64 <main+0x2cc>)
 8000962:	6013      	str	r3, [r2, #0]
#else
	len = snprintf ( buffer, 128, "WR 433900 4 9 3 0\r\n"); // ask for data
#endif

	printf("RX Flush\n");
 8000964:	4880      	ldr	r0, [pc, #512]	; (8000b68 <main+0x2d0>)
 8000966:	f004 f8ab 	bl	8004ac0 <puts>
	do {
		uartGetChar();
 800096a:	f000 fdb3 	bl	80014d4 <uartGetChar>
	}
	while (isUartRxNotEmpty());
 800096e:	f000 fda1 	bl	80014b4 <isUartRxNotEmpty>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d1f8      	bne.n	800096a <main+0xd2>

	UART_Transmit((uint8_t *)buffer, len);
 8000978:	4b7a      	ldr	r3, [pc, #488]	; (8000b64 <main+0x2cc>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	b29b      	uxth	r3, r3
 800097e:	4619      	mov	r1, r3
 8000980:	4877      	ldr	r0, [pc, #476]	; (8000b60 <main+0x2c8>)
 8000982:	f7ff ff5b 	bl	800083c <UART_Transmit>
	HAL_Delay(50);
 8000986:	2032      	movs	r0, #50	; 0x32
 8000988:	f001 f9d4 	bl	8001d34 <HAL_Delay>

	printf("Write and Read\n");
 800098c:	4877      	ldr	r0, [pc, #476]	; (8000b6c <main+0x2d4>)
 800098e:	f004 f897 	bl	8004ac0 <puts>
	do {
		printf("%c", uartGetChar());
 8000992:	f000 fd9f 	bl	80014d4 <uartGetChar>
 8000996:	4603      	mov	r3, r0
 8000998:	4618      	mov	r0, r3
 800099a:	f004 f80d 	bl	80049b8 <putchar>
	}
	while (isUartRxNotEmpty());
 800099e:	f000 fd89 	bl	80014b4 <isUartRxNotEmpty>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d1f4      	bne.n	8000992 <main+0xfa>
	printf("\n");
 80009a8:	200a      	movs	r0, #10
 80009aa:	f004 f805 	bl	80049b8 <putchar>

	/* ------------------------*/

#ifdef BaudRate57600
	LL_USART_Disable(USART1);
 80009ae:	4870      	ldr	r0, [pc, #448]	; (8000b70 <main+0x2d8>)
 80009b0:	f7ff fe81 	bl	80006b6 <LL_USART_Disable>
	LL_USART_InitTypeDef USART_InitStruct = {0};
 80009b4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
 80009c4:	615a      	str	r2, [r3, #20]
 80009c6:	619a      	str	r2, [r3, #24]
	USART_InitStruct.BaudRate = 57600;
 80009c8:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80009cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80009d0:	2300      	movs	r3, #0
 80009d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80009dc:	2300      	movs	r3, #0
 80009de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80009e2:	230c      	movs	r3, #12
 80009e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80009ee:	2300      	movs	r3, #0
 80009f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	LL_USART_Init(USART1, &USART_InitStruct);
 80009f4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80009f8:	4619      	mov	r1, r3
 80009fa:	485d      	ldr	r0, [pc, #372]	; (8000b70 <main+0x2d8>)
 80009fc:	f003 ff2e 	bl	800485c <LL_USART_Init>
	LL_USART_ConfigAsyncMode(USART1);
 8000a00:	485b      	ldr	r0, [pc, #364]	; (8000b70 <main+0x2d8>)
 8000a02:	f7ff fe68 	bl	80006d6 <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART1);
 8000a06:	485a      	ldr	r0, [pc, #360]	; (8000b70 <main+0x2d8>)
 8000a08:	f7ff fe45 	bl	8000696 <LL_USART_Enable>
#endif
	/* ------------------------*/

	HAL_GPIO_WritePin(SET_GPIO_Port, SET_Pin, GPIO_PIN_SET); // put apc220 back in operation
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2140      	movs	r1, #64	; 0x40
 8000a10:	4851      	ldr	r0, [pc, #324]	; (8000b58 <main+0x2c0>)
 8000a12:	f001 fc1d 	bl	8002250 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000a16:	20c8      	movs	r0, #200	; 0xc8
 8000a18:	f001 f98c 	bl	8001d34 <HAL_Delay>

	HAL_GPIO_WritePin(SET_GPIO_Port, SET_Pin, GPIO_PIN_RESET); // pulling SET to low will put apc220 in config mode
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2140      	movs	r1, #64	; 0x40
 8000a20:	484d      	ldr	r0, [pc, #308]	; (8000b58 <main+0x2c0>)
 8000a22:	f001 fc15 	bl	8002250 <HAL_GPIO_WritePin>
	HAL_Delay(50); // stabilize please
 8000a26:	2032      	movs	r0, #50	; 0x32
 8000a28:	f001 f984 	bl	8001d34 <HAL_Delay>

	len = snprintf ( buffer, 128, "RD\r\n"); // ask for data
 8000a2c:	4a51      	ldr	r2, [pc, #324]	; (8000b74 <main+0x2dc>)
 8000a2e:	2180      	movs	r1, #128	; 0x80
 8000a30:	484b      	ldr	r0, [pc, #300]	; (8000b60 <main+0x2c8>)
 8000a32:	f004 f84d 	bl	8004ad0 <sniprintf>
 8000a36:	4603      	mov	r3, r0
 8000a38:	4a4a      	ldr	r2, [pc, #296]	; (8000b64 <main+0x2cc>)
 8000a3a:	6013      	str	r3, [r2, #0]
	UART_Transmit((uint8_t *)buffer, len);
 8000a3c:	4b49      	ldr	r3, [pc, #292]	; (8000b64 <main+0x2cc>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	4619      	mov	r1, r3
 8000a44:	4846      	ldr	r0, [pc, #280]	; (8000b60 <main+0x2c8>)
 8000a46:	f7ff fef9 	bl	800083c <UART_Transmit>
	HAL_Delay(50);
 8000a4a:	2032      	movs	r0, #50	; 0x32
 8000a4c:	f001 f972 	bl	8001d34 <HAL_Delay>

	printf("Read\n");
 8000a50:	4849      	ldr	r0, [pc, #292]	; (8000b78 <main+0x2e0>)
 8000a52:	f004 f835 	bl	8004ac0 <puts>
	do {
		printf("%c", uartGetChar());
 8000a56:	f000 fd3d 	bl	80014d4 <uartGetChar>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f003 ffab 	bl	80049b8 <putchar>
	}
	while (isUartRxNotEmpty());
 8000a62:	f000 fd27 	bl	80014b4 <isUartRxNotEmpty>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1f4      	bne.n	8000a56 <main+0x1be>
	printf("\n");
 8000a6c:	200a      	movs	r0, #10
 8000a6e:	f003 ffa3 	bl	80049b8 <putchar>

	HAL_GPIO_WritePin(SET_GPIO_Port, SET_Pin, GPIO_PIN_SET); // put apc220 back in operation
 8000a72:	2201      	movs	r2, #1
 8000a74:	2140      	movs	r1, #64	; 0x40
 8000a76:	4838      	ldr	r0, [pc, #224]	; (8000b58 <main+0x2c0>)
 8000a78:	f001 fbea 	bl	8002250 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000a7c:	20c8      	movs	r0, #200	; 0xc8
 8000a7e:	f001 f959 	bl	8001d34 <HAL_Delay>
		//		}
		//		printf("%s\n", buffer);
		//		if (len) printf("len %d\n");
#define SZ (128)
		char str[SZ];
		int sz=0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		if (!isCaptured){
 8000a88:	4b3c      	ldr	r3, [pc, #240]	; (8000b7c <main+0x2e4>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d135      	bne.n	8000afc <main+0x264>
			while (isUartRxNotEmpty()) {
 8000a90:	e02c      	b.n	8000aec <main+0x254>
				char c = uartGetChar();
 8000a92:	f000 fd1f 	bl	80014d4 <uartGetChar>
 8000a96:	4603      	mov	r3, r0
 8000a98:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
				printf("%c", c);
 8000a9c:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f003 ff89 	bl	80049b8 <putchar>
#ifdef SSD1306
				if (c=='\r') {
 8000aa6:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8000aaa:	2b0d      	cmp	r3, #13
 8000aac:	d108      	bne.n	8000ac0 <main+0x228>
					uartGetChar(); // remove '\n'
 8000aae:	f000 fd11 	bl	80014d4 <uartGetChar>
					str[sz]=0;
 8000ab2:	1d3a      	adds	r2, r7, #4
 8000ab4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000ab8:	4413      	add	r3, r2
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
					break;
 8000abe:	e01a      	b.n	8000af6 <main+0x25e>
				}
				str[sz++] = c;
 8000ac0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000ac4:	1c5a      	adds	r2, r3, #1
 8000ac6:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8000aca:	33b8      	adds	r3, #184	; 0xb8
 8000acc:	443b      	add	r3, r7
 8000ace:	f897 20b3 	ldrb.w	r2, [r7, #179]	; 0xb3
 8000ad2:	f803 2cb4 	strb.w	r2, [r3, #-180]
				if (sz>=SZ-1){
 8000ad6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000ada:	2b7e      	cmp	r3, #126	; 0x7e
 8000adc:	dd06      	ble.n	8000aec <main+0x254>
					str[sz]=0;
 8000ade:	1d3a      	adds	r2, r7, #4
 8000ae0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000ae4:	4413      	add	r3, r2
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
					break;
 8000aea:	e004      	b.n	8000af6 <main+0x25e>
			while (isUartRxNotEmpty()) {
 8000aec:	f000 fce2 	bl	80014b4 <isUartRxNotEmpty>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d1cd      	bne.n	8000a92 <main+0x1fa>
				}
#else
				printf("%c", uartGetChar());
#endif
			}
			isCaptured=1;
 8000af6:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <main+0x2e4>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
		}

#ifdef SSD1306
		if (isCaptured){
 8000afc:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <main+0x2e4>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d0be      	beq.n	8000a82 <main+0x1ea>
			printf("*%s*\n", str);
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	4619      	mov	r1, r3
 8000b08:	481d      	ldr	r0, [pc, #116]	; (8000b80 <main+0x2e8>)
 8000b0a:	f003 ff3d 	bl	8004988 <iprintf>
			//FontDef_t Font = Font_11x18;
			FontDef_t Font = Font_7x10;
 8000b0e:	4a1d      	ldr	r2, [pc, #116]	; (8000b84 <main+0x2ec>)
 8000b10:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000b14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b18:	e883 0003 	stmia.w	r3, {r0, r1}
			//SSD1306_Fill(SSD1306_COLOR_BLACK);
			SSD1306_GotoXY(0, 0);
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f000 ff30 	bl	8001984 <SSD1306_GotoXY>
			SSD1306_Puts(str, &Font, SSD1306_COLOR_WHITE);
 8000b24:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 ffbf 	bl	8001ab0 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8000b32:	f000 fe81 	bl	8001838 <SSD1306_UpdateScreen>
			isCaptured=0;
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <main+0x2e4>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
	{
 8000b3c:	e7a1      	b.n	8000a82 <main+0x1ea>
 8000b3e:	bf00      	nop
 8000b40:	08005e44 	.word	0x08005e44
 8000b44:	2000000c 	.word	0x2000000c
 8000b48:	08005e4c 	.word	0x08005e4c
 8000b4c:	08005e58 	.word	0x08005e58
 8000b50:	08005e64 	.word	0x08005e64
 8000b54:	40020800 	.word	0x40020800
 8000b58:	40020000 	.word	0x40020000
 8000b5c:	08005e70 	.word	0x08005e70
 8000b60:	2000013c 	.word	0x2000013c
 8000b64:	200001bc 	.word	0x200001bc
 8000b68:	08005e84 	.word	0x08005e84
 8000b6c:	08005e90 	.word	0x08005e90
 8000b70:	40011000 	.word	0x40011000
 8000b74:	08005ea0 	.word	0x08005ea0
 8000b78:	08005ea8 	.word	0x08005ea8
 8000b7c:	200001c0 	.word	0x200001c0
 8000b80:	08005eb0 	.word	0x08005eb0
 8000b84:	20000004 	.word	0x20000004

08000b88 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b094      	sub	sp, #80	; 0x50
 8000b8c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8e:	f107 0320 	add.w	r3, r7, #32
 8000b92:	2230      	movs	r2, #48	; 0x30
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f003 feee 	bl	8004978 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9c:	f107 030c 	add.w	r3, r7, #12
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	4b28      	ldr	r3, [pc, #160]	; (8000c54 <SystemClock_Config+0xcc>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	4a27      	ldr	r2, [pc, #156]	; (8000c54 <SystemClock_Config+0xcc>)
 8000bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bba:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbc:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <SystemClock_Config+0xcc>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc8:	2300      	movs	r3, #0
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <SystemClock_Config+0xd0>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a21      	ldr	r2, [pc, #132]	; (8000c58 <SystemClock_Config+0xd0>)
 8000bd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bd6:	6013      	str	r3, [r2, #0]
 8000bd8:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <SystemClock_Config+0xd0>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000be4:	2302      	movs	r3, #2
 8000be6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be8:	2301      	movs	r3, #1
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bec:	2310      	movs	r3, #16
 8000bee:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000bf8:	2310      	movs	r3, #16
 8000bfa:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000bfc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c00:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c02:	2304      	movs	r3, #4
 8000c04:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c06:	2304      	movs	r3, #4
 8000c08:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0a:	f107 0320 	add.w	r3, r7, #32
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f002 f8b2 	bl	8002d78 <HAL_RCC_OscConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <SystemClock_Config+0x96>
	{
		Error_Handler();
 8000c1a:	f000 f96b 	bl	8000ef4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1e:	230f      	movs	r3, #15
 8000c20:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c22:	2302      	movs	r3, #2
 8000c24:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	2102      	movs	r1, #2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f002 fb14 	bl	8003268 <HAL_RCC_ClockConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8000c46:	f000 f955 	bl	8000ef4 <Error_Handler>
	}
}
 8000c4a:	bf00      	nop
 8000c4c:	3750      	adds	r7, #80	; 0x50
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40007000 	.word	0x40007000

08000c5c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c62:	4a13      	ldr	r2, [pc, #76]	; (8000cb0 <MX_I2C1_Init+0x54>)
 8000c64:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c68:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <MX_I2C1_Init+0x58>)
 8000c6a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c7e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c8c:	4b07      	ldr	r3, [pc, #28]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c9a:	f001 faf3 	bl	8002284 <HAL_I2C_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8000ca4:	f000 f926 	bl	8000ef4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	200000a4 	.word	0x200000a4
 8000cb0:	40005400 	.word	0x40005400
 8000cb4:	000186a0 	.word	0x000186a0

08000cb8 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08e      	sub	sp, #56	; 0x38
 8000cbc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART1_Init 0 */

	/* USER CODE END USART1_Init 0 */

	LL_USART_InitTypeDef USART_InitStruct = {0};
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]
 8000cce:	615a      	str	r2, [r3, #20]
 8000cd0:	619a      	str	r2, [r3, #24]

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
 8000ce0:	615a      	str	r2, [r3, #20]

	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000ce2:	2010      	movs	r0, #16
 8000ce4:	f7ff fd7e 	bl	80007e4 <LL_APB2_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f7ff fd63 	bl	80007b4 <LL_AHB1_GRP1_EnableClock>
	/**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000cee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cf2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000d04:	2307      	movs	r3, #7
 8000d06:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4818      	ldr	r0, [pc, #96]	; (8000d70 <MX_USART1_UART_Init+0xb8>)
 8000d0e:	f003 f992 	bl	8004036 <LL_GPIO_Init>

	/* USART1 interrupt Init */
	NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d12:	f7ff fc37 	bl	8000584 <__NVIC_GetPriorityGrouping>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fc87 	bl	8000630 <NVIC_EncodePriority>
 8000d22:	4603      	mov	r3, r0
 8000d24:	4619      	mov	r1, r3
 8000d26:	2025      	movs	r0, #37	; 0x25
 8000d28:	f7ff fc58 	bl	80005dc <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 8000d2c:	2025      	movs	r0, #37	; 0x25
 8000d2e:	f7ff fc37 	bl	80005a0 <__NVIC_EnableIRQ>

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	USART_InitStruct.BaudRate = 9600;
 8000d32:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000d36:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	623b      	str	r3, [r7, #32]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000d44:	230c      	movs	r3, #12
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	633b      	str	r3, [r7, #48]	; 0x30
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	637b      	str	r3, [r7, #52]	; 0x34
	LL_USART_Init(USART1, &USART_InitStruct);
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	4619      	mov	r1, r3
 8000d56:	4807      	ldr	r0, [pc, #28]	; (8000d74 <MX_USART1_UART_Init+0xbc>)
 8000d58:	f003 fd80 	bl	800485c <LL_USART_Init>
	LL_USART_ConfigAsyncMode(USART1);
 8000d5c:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_USART1_UART_Init+0xbc>)
 8000d5e:	f7ff fcba 	bl	80006d6 <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART1);
 8000d62:	4804      	ldr	r0, [pc, #16]	; (8000d74 <MX_USART1_UART_Init+0xbc>)
 8000d64:	f7ff fc97 	bl	8000696 <LL_USART_Enable>
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	3738      	adds	r7, #56	; 0x38
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40020000 	.word	0x40020000
 8000d74:	40011000 	.word	0x40011000

08000d78 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <MX_USART2_UART_Init+0x50>)
 8000d80:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d88:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d9e:	220c      	movs	r2, #12
 8000da0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000db0:	f002 fc7a 	bl	80036a8 <HAL_UART_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000dba:	f000 f89b 	bl	8000ef4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200000f8 	.word	0x200000f8
 8000dc8:	40004400 	.word	0x40004400

08000dcc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4b37      	ldr	r3, [pc, #220]	; (8000ec4 <MX_GPIO_Init+0xf8>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a36      	ldr	r2, [pc, #216]	; (8000ec4 <MX_GPIO_Init+0xf8>)
 8000dec:	f043 0304 	orr.w	r3, r3, #4
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b34      	ldr	r3, [pc, #208]	; (8000ec4 <MX_GPIO_Init+0xf8>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b30      	ldr	r3, [pc, #192]	; (8000ec4 <MX_GPIO_Init+0xf8>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a2f      	ldr	r2, [pc, #188]	; (8000ec4 <MX_GPIO_Init+0xf8>)
 8000e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b2d      	ldr	r3, [pc, #180]	; (8000ec4 <MX_GPIO_Init+0xf8>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	4b29      	ldr	r3, [pc, #164]	; (8000ec4 <MX_GPIO_Init+0xf8>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a28      	ldr	r2, [pc, #160]	; (8000ec4 <MX_GPIO_Init+0xf8>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b26      	ldr	r3, [pc, #152]	; (8000ec4 <MX_GPIO_Init+0xf8>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <MX_GPIO_Init+0xf8>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a21      	ldr	r2, [pc, #132]	; (8000ec4 <MX_GPIO_Init+0xf8>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <MX_GPIO_Init+0xf8>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin|SET_Pin, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2160      	movs	r1, #96	; 0x60
 8000e56:	481c      	ldr	r0, [pc, #112]	; (8000ec8 <MX_GPIO_Init+0xfc>)
 8000e58:	f001 f9fa 	bl	8002250 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2110      	movs	r1, #16
 8000e60:	481a      	ldr	r0, [pc, #104]	; (8000ecc <MX_GPIO_Init+0x100>)
 8000e62:	f001 f9f5 	bl	8002250 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000e66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e6a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e6c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e70:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4813      	ldr	r0, [pc, #76]	; (8000ecc <MX_GPIO_Init+0x100>)
 8000e7e:	f001 f863 	bl	8001f48 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin SET_Pin */
	GPIO_InitStruct.Pin = LD2_Pin|SET_Pin;
 8000e82:	2360      	movs	r3, #96	; 0x60
 8000e84:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	480b      	ldr	r0, [pc, #44]	; (8000ec8 <MX_GPIO_Init+0xfc>)
 8000e9a:	f001 f855 	bl	8001f48 <HAL_GPIO_Init>

	/*Configure GPIO pin : ENABLE_Pin */
	GPIO_InitStruct.Pin = ENABLE_Pin;
 8000e9e:	2310      	movs	r3, #16
 8000ea0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4805      	ldr	r0, [pc, #20]	; (8000ecc <MX_GPIO_Init+0x100>)
 8000eb6:	f001 f847 	bl	8001f48 <HAL_GPIO_Init>

}
 8000eba:	bf00      	nop
 8000ebc:	3728      	adds	r7, #40	; 0x28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	40020800 	.word	0x40020800

08000ed0 <StartUartReception>:
 * @brief  This function prints user info on PC com port and initiates RX transfer
 * @param  None
 * @retval None
 */
void StartUartReception(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	uartTxFlush();
 8000ed4:	f000 fad8 	bl	8001488 <uartTxFlush>

	/* Clear Overrun flag, in case characters have already been sent to USART */
	LL_USART_ClearFlag_ORE(USART1);
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <StartUartReception+0x20>)
 8000eda:	f7ff fc12 	bl	8000702 <LL_USART_ClearFlag_ORE>

	/* Enable RXNE and Error interrupts */
	LL_USART_EnableIT_RXNE(USART1);
 8000ede:	4804      	ldr	r0, [pc, #16]	; (8000ef0 <StartUartReception+0x20>)
 8000ee0:	f7ff fc21 	bl	8000726 <LL_USART_EnableIT_RXNE>
	LL_USART_EnableIT_ERROR(USART1);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <StartUartReception+0x20>)
 8000ee6:	f7ff fc41 	bl	800076c <LL_USART_EnableIT_ERROR>
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40011000 	.word	0x40011000

08000ef4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef8:	b672      	cpsid	i
}
 8000efa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000efc:	2201      	movs	r2, #1
 8000efe:	2120      	movs	r1, #32
 8000f00:	4801      	ldr	r0, [pc, #4]	; (8000f08 <Error_Handler+0x14>)
 8000f02:	f001 f9a5 	bl	8002250 <HAL_GPIO_WritePin>
	while (1)
 8000f06:	e7fe      	b.n	8000f06 <Error_Handler+0x12>
 8000f08:	40020000 	.word	0x40020000

08000f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	4a0f      	ldr	r2, [pc, #60]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f20:	6453      	str	r3, [r2, #68]	; 0x44
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f4a:	2007      	movs	r0, #7
 8000f4c:	f000 ffc8 	bl	8001ee0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40023800 	.word	0x40023800

08000f5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a23      	ldr	r2, [pc, #140]	; (8001008 <HAL_I2C_MspInit+0xac>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d13f      	bne.n	8000ffe <HAL_I2C_MspInit+0xa2>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	4b22      	ldr	r3, [pc, #136]	; (800100c <HAL_I2C_MspInit+0xb0>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a21      	ldr	r2, [pc, #132]	; (800100c <HAL_I2C_MspInit+0xb0>)
 8000f88:	f043 0302 	orr.w	r3, r3, #2
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b1f      	ldr	r3, [pc, #124]	; (800100c <HAL_I2C_MspInit+0xb0>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fa0:	2312      	movs	r3, #18
 8000fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fac:	2304      	movs	r3, #4
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4816      	ldr	r0, [pc, #88]	; (8001010 <HAL_I2C_MspInit+0xb4>)
 8000fb8:	f000 ffc6 	bl	8001f48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <HAL_I2C_MspInit+0xb0>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	4a11      	ldr	r2, [pc, #68]	; (800100c <HAL_I2C_MspInit+0xb0>)
 8000fc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fca:	6413      	str	r3, [r2, #64]	; 0x40
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <HAL_I2C_MspInit+0xb0>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */
    __HAL_RCC_I2C1_FORCE_RESET();
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <HAL_I2C_MspInit+0xb0>)
 8000fda:	6a1b      	ldr	r3, [r3, #32]
 8000fdc:	4a0b      	ldr	r2, [pc, #44]	; (800100c <HAL_I2C_MspInit+0xb0>)
 8000fde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fe2:	6213      	str	r3, [r2, #32]
    HAL_Delay(2);
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f000 fea5 	bl	8001d34 <HAL_Delay>
    __HAL_RCC_I2C1_RELEASE_RESET();
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <HAL_I2C_MspInit+0xb0>)
 8000fec:	6a1b      	ldr	r3, [r3, #32]
 8000fee:	4a07      	ldr	r2, [pc, #28]	; (800100c <HAL_I2C_MspInit+0xb0>)
 8000ff0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000ff4:	6213      	str	r3, [r2, #32]
    hi2c->State = HAL_I2C_STATE_RESET;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ffe:	bf00      	nop
 8001000:	3728      	adds	r7, #40	; 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40005400 	.word	0x40005400
 800100c:	40023800 	.word	0x40023800
 8001010:	40020400 	.word	0x40020400

08001014 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	; 0x28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a19      	ldr	r2, [pc, #100]	; (8001098 <HAL_UART_MspInit+0x84>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d12b      	bne.n	800108e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <HAL_UART_MspInit+0x88>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	4a17      	ldr	r2, [pc, #92]	; (800109c <HAL_UART_MspInit+0x88>)
 8001040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001044:	6413      	str	r3, [r2, #64]	; 0x40
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <HAL_UART_MspInit+0x88>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <HAL_UART_MspInit+0x88>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a10      	ldr	r2, [pc, #64]	; (800109c <HAL_UART_MspInit+0x88>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <HAL_UART_MspInit+0x88>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800106e:	230c      	movs	r3, #12
 8001070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107a:	2303      	movs	r3, #3
 800107c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800107e:	2307      	movs	r3, #7
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	4805      	ldr	r0, [pc, #20]	; (80010a0 <HAL_UART_MspInit+0x8c>)
 800108a:	f000 ff5d 	bl	8001f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800108e:	bf00      	nop
 8001090:	3728      	adds	r7, #40	; 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40004400 	.word	0x40004400
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020000 	.word	0x40020000

080010a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <NMI_Handler+0x4>

080010aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <HardFault_Handler+0x4>

080010b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <MemManage_Handler+0x4>

080010b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <BusFault_Handler+0x4>

080010bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <UsageFault_Handler+0x4>

080010c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f0:	f000 fe00 	bl	8001cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
	uartInterruptProcess();
 80010fc:	f000 f93a 	bl	8001374 <uartInterruptProcess>
  /* USER CODE END USART1_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}

08001104 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	e00a      	b.n	800112c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001116:	f3af 8000 	nop.w
 800111a:	4601      	mov	r1, r0
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	1c5a      	adds	r2, r3, #1
 8001120:	60ba      	str	r2, [r7, #8]
 8001122:	b2ca      	uxtb	r2, r1
 8001124:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	3301      	adds	r3, #1
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	429a      	cmp	r2, r3
 8001132:	dbf0      	blt.n	8001116 <_read+0x12>
	}

return len;
 8001134:	687b      	ldr	r3, [r7, #4]
}
 8001136:	4618      	mov	r0, r3
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <_close>:
	}
	return len;
}

int _close(int file)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
	return -1;
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001166:	605a      	str	r2, [r3, #4]
	return 0;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <_isatty>:

int _isatty(int file)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
	return 1;
 800117e:	2301      	movs	r3, #1
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
	return 0;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b0:	4a14      	ldr	r2, [pc, #80]	; (8001204 <_sbrk+0x5c>)
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <_sbrk+0x60>)
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d102      	bne.n	80011ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <_sbrk+0x64>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	; (8001210 <_sbrk+0x68>)
 80011c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <_sbrk+0x64>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d207      	bcs.n	80011e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d8:	f003 fba4 	bl	8004924 <__errno>
 80011dc:	4603      	mov	r3, r0
 80011de:	220c      	movs	r2, #12
 80011e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
 80011e6:	e009      	b.n	80011fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <_sbrk+0x64>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ee:	4b07      	ldr	r3, [pc, #28]	; (800120c <_sbrk+0x64>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	4a05      	ldr	r2, [pc, #20]	; (800120c <_sbrk+0x64>)
 80011f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011fa:	68fb      	ldr	r3, [r7, #12]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20020000 	.word	0x20020000
 8001208:	00000400 	.word	0x00000400
 800120c:	200001c4 	.word	0x200001c4
 8001210:	200004f0 	.word	0x200004f0

08001214 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <SystemInit+0x20>)
 800121a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800121e:	4a05      	ldr	r2, [pc, #20]	; (8001234 <SystemInit+0x20>)
 8001220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001224:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <LL_USART_IsActiveFlag_ORE>:
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0308 	and.w	r3, r3, #8
 8001248:	2b08      	cmp	r3, #8
 800124a:	bf0c      	ite	eq
 800124c:	2301      	moveq	r3, #1
 800124e:	2300      	movne	r3, #0
 8001250:	b2db      	uxtb	r3, r3
}
 8001252:	4618      	mov	r0, r3
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <LL_USART_IsActiveFlag_RXNE>:
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0320 	and.w	r3, r3, #32
 800126e:	2b20      	cmp	r3, #32
 8001270:	bf0c      	ite	eq
 8001272:	2301      	moveq	r3, #1
 8001274:	2300      	movne	r3, #0
 8001276:	b2db      	uxtb	r3, r3
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_USART_ClearFlag_ORE>:
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001292:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800129a:	68fb      	ldr	r3, [r7, #12]
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b089      	sub	sp, #36	; 0x24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	330c      	adds	r3, #12
 80012b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	e853 3f00 	ldrex	r3, [r3]
 80012bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012c4:	61fb      	str	r3, [r7, #28]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	330c      	adds	r3, #12
 80012ca:	69fa      	ldr	r2, [r7, #28]
 80012cc:	61ba      	str	r2, [r7, #24]
 80012ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012d0:	6979      	ldr	r1, [r7, #20]
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	e841 2300 	strex	r3, r2, [r1]
 80012d8:	613b      	str	r3, [r7, #16]
   return(result);
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1e7      	bne.n	80012b0 <LL_USART_DisableIT_TXE+0x8>
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3724      	adds	r7, #36	; 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	f003 0320 	and.w	r3, r3, #32
 80012fe:	2b20      	cmp	r3, #32
 8001300:	bf0c      	ite	eq
 8001302:	2301      	moveq	r3, #1
 8001304:	2300      	movne	r3, #0
 8001306:	b2db      	uxtb	r3, r3
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(USART_TypeDef *USARTx)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001324:	2b80      	cmp	r3, #128	; 0x80
 8001326:	bf0c      	ite	eq
 8001328:	2301      	moveq	r3, #1
 800132a:	2300      	movne	r3, #0
 800132c:	b2db      	uxtb	r3, r3
}
 800132e:	4618      	mov	r0, r3
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	b2db      	uxtb	r3, r3
}
 8001348:	4618      	mov	r0, r3
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001360:	78fa      	ldrb	r2, [r7, #3]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	605a      	str	r2, [r3, #4]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <uartInterruptProcess>:
uint8_t uartTxReadIdx = 0;
uint8_t uartTxWriteIdx = 0;

// call in void USARTX_IRQHandler(void)
void uartInterruptProcess()
{
 8001374:	b598      	push	{r3, r4, r7, lr}
 8001376:	af00      	add	r7, sp, #0
    // receive
    if (LL_USART_IsActiveFlag_RXNE(USARTX) && LL_USART_IsEnabledIT_RXNE(USARTX))
 8001378:	483a      	ldr	r0, [pc, #232]	; (8001464 <uartInterruptProcess+0xf0>)
 800137a:	f7ff ff70 	bl	800125e <LL_USART_IsActiveFlag_RXNE>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d036      	beq.n	80013f2 <uartInterruptProcess+0x7e>
 8001384:	4837      	ldr	r0, [pc, #220]	; (8001464 <uartInterruptProcess+0xf0>)
 8001386:	f7ff ffb2 	bl	80012ee <LL_USART_IsEnabledIT_RXNE>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d030      	beq.n	80013f2 <uartInterruptProcess+0x7e>
    {
        uartRxBuffer[uartRxWriteIdx] = LL_USART_ReceiveData8(USARTX);
 8001390:	4b35      	ldr	r3, [pc, #212]	; (8001468 <uartInterruptProcess+0xf4>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	461c      	mov	r4, r3
 8001396:	4833      	ldr	r0, [pc, #204]	; (8001464 <uartInterruptProcess+0xf0>)
 8001398:	f7ff ffcf 	bl	800133a <LL_USART_ReceiveData8>
 800139c:	4603      	mov	r3, r0
 800139e:	461a      	mov	r2, r3
 80013a0:	4b32      	ldr	r3, [pc, #200]	; (800146c <uartInterruptProcess+0xf8>)
 80013a2:	551a      	strb	r2, [r3, r4]

#if defined(UART_ECHO)
        uartPutChar(uartRxBuffer[uartRxWriteIdx]);
#endif

        if (uartRxBuffer[uartRxWriteIdx] == '\n')
 80013a4:	4b30      	ldr	r3, [pc, #192]	; (8001468 <uartInterruptProcess+0xf4>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b30      	ldr	r3, [pc, #192]	; (800146c <uartInterruptProcess+0xf8>)
 80013ac:	5c9b      	ldrb	r3, [r3, r2]
 80013ae:	2b0a      	cmp	r3, #10
 80013b0:	d102      	bne.n	80013b8 <uartInterruptProcess+0x44>
        {
            uartRxCr = true;
 80013b2:	4b2f      	ldr	r3, [pc, #188]	; (8001470 <uartInterruptProcess+0xfc>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	701a      	strb	r2, [r3, #0]
        }

        uartRxCounter++;
 80013b8:	4b2e      	ldr	r3, [pc, #184]	; (8001474 <uartInterruptProcess+0x100>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	3301      	adds	r3, #1
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	4b2c      	ldr	r3, [pc, #176]	; (8001474 <uartInterruptProcess+0x100>)
 80013c2:	701a      	strb	r2, [r3, #0]
        if (uartRxCounter == UART_RX_BUFFER_SIZE)
 80013c4:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <uartInterruptProcess+0x100>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b80      	cmp	r3, #128	; 0x80
 80013ca:	d105      	bne.n	80013d8 <uartInterruptProcess+0x64>
        {
            uartRxOverflow = 1;
 80013cc:	4b2a      	ldr	r3, [pc, #168]	; (8001478 <uartInterruptProcess+0x104>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
            uartRxCounter = 0;
 80013d2:	4b28      	ldr	r3, [pc, #160]	; (8001474 <uartInterruptProcess+0x100>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
        }

        uartRxWriteIdx++;
 80013d8:	4b23      	ldr	r3, [pc, #140]	; (8001468 <uartInterruptProcess+0xf4>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	3301      	adds	r3, #1
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	4b21      	ldr	r3, [pc, #132]	; (8001468 <uartInterruptProcess+0xf4>)
 80013e2:	701a      	strb	r2, [r3, #0]
        if (uartRxWriteIdx == UART_RX_BUFFER_SIZE)
 80013e4:	4b20      	ldr	r3, [pc, #128]	; (8001468 <uartInterruptProcess+0xf4>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b80      	cmp	r3, #128	; 0x80
 80013ea:	d102      	bne.n	80013f2 <uartInterruptProcess+0x7e>
            uartRxWriteIdx = 0;
 80013ec:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <uartInterruptProcess+0xf4>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
    }

    // overrun error
    if (LL_USART_IsActiveFlag_ORE(USARTX))
 80013f2:	481c      	ldr	r0, [pc, #112]	; (8001464 <uartInterruptProcess+0xf0>)
 80013f4:	f7ff ff20 	bl	8001238 <LL_USART_IsActiveFlag_ORE>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d005      	beq.n	800140a <uartInterruptProcess+0x96>
    {
        LL_USART_ReceiveData8(USARTX);
 80013fe:	4819      	ldr	r0, [pc, #100]	; (8001464 <uartInterruptProcess+0xf0>)
 8001400:	f7ff ff9b 	bl	800133a <LL_USART_ReceiveData8>
        LL_USART_ClearFlag_ORE(USARTX);
 8001404:	4817      	ldr	r0, [pc, #92]	; (8001464 <uartInterruptProcess+0xf0>)
 8001406:	f7ff ff3d 	bl	8001284 <LL_USART_ClearFlag_ORE>
    }

    // send
    if (LL_USART_IsEnabledIT_TXE(USARTX))
 800140a:	4816      	ldr	r0, [pc, #88]	; (8001464 <uartInterruptProcess+0xf0>)
 800140c:	f7ff ff82 	bl	8001314 <LL_USART_IsEnabledIT_TXE>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d023      	beq.n	800145e <uartInterruptProcess+0xea>
    {
        if (uartTxCounter)
 8001416:	4b19      	ldr	r3, [pc, #100]	; (800147c <uartInterruptProcess+0x108>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d01c      	beq.n	8001458 <uartInterruptProcess+0xe4>
        {
            LL_USART_TransmitData8(USARTX, uartTxBuffer[uartTxReadIdx]);
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <uartInterruptProcess+0x10c>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	4b17      	ldr	r3, [pc, #92]	; (8001484 <uartInterruptProcess+0x110>)
 8001426:	5c9b      	ldrb	r3, [r3, r2]
 8001428:	4619      	mov	r1, r3
 800142a:	480e      	ldr	r0, [pc, #56]	; (8001464 <uartInterruptProcess+0xf0>)
 800142c:	f7ff ff92 	bl	8001354 <LL_USART_TransmitData8>
            uartTxCounter--;
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <uartInterruptProcess+0x108>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	3b01      	subs	r3, #1
 8001436:	b2da      	uxtb	r2, r3
 8001438:	4b10      	ldr	r3, [pc, #64]	; (800147c <uartInterruptProcess+0x108>)
 800143a:	701a      	strb	r2, [r3, #0]

            uartTxReadIdx++;
 800143c:	4b10      	ldr	r3, [pc, #64]	; (8001480 <uartInterruptProcess+0x10c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	3301      	adds	r3, #1
 8001442:	b2da      	uxtb	r2, r3
 8001444:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <uartInterruptProcess+0x10c>)
 8001446:	701a      	strb	r2, [r3, #0]
            if (uartTxReadIdx == UART_TX_BUFFER_SIZE)
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <uartInterruptProcess+0x10c>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b80      	cmp	r3, #128	; 0x80
 800144e:	d106      	bne.n	800145e <uartInterruptProcess+0xea>
                uartTxReadIdx = 0;
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <uartInterruptProcess+0x10c>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
        else
        {
            LL_USART_DisableIT_TXE(USARTX);
        }
    }
}
 8001456:	e002      	b.n	800145e <uartInterruptProcess+0xea>
            LL_USART_DisableIT_TXE(USARTX);
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <uartInterruptProcess+0xf0>)
 800145a:	f7ff ff25 	bl	80012a8 <LL_USART_DisableIT_TXE>
}
 800145e:	bf00      	nop
 8001460:	bd98      	pop	{r3, r4, r7, pc}
 8001462:	bf00      	nop
 8001464:	40011000 	.word	0x40011000
 8001468:	2000024a 	.word	0x2000024a
 800146c:	200001c8 	.word	0x200001c8
 8001470:	2000024c 	.word	0x2000024c
 8001474:	20000248 	.word	0x20000248
 8001478:	2000024b 	.word	0x2000024b
 800147c:	200002d0 	.word	0x200002d0
 8001480:	200002d1 	.word	0x200002d1
 8001484:	20000250 	.word	0x20000250

08001488 <uartTxFlush>:

void uartTxFlush(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
    uartTxCounter = 0;
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <uartTxFlush+0x20>)
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]
    uartTxReadIdx = 0;
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <uartTxFlush+0x24>)
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
    uartTxWriteIdx = 0;
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <uartTxFlush+0x28>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	200002d0 	.word	0x200002d0
 80014ac:	200002d1 	.word	0x200002d1
 80014b0:	200002d2 	.word	0x200002d2

080014b4 <isUartRxNotEmpty>:

bool isUartRxNotEmpty(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
    return (bool)uartRxCounter;
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <isUartRxNotEmpty+0x1c>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	bf14      	ite	ne
 80014c0:	2301      	movne	r3, #1
 80014c2:	2300      	moveq	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	20000248 	.word	0x20000248

080014d4 <uartGetChar>:

char uartGetChar(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
    while (uartRxCounter == 0)
 80014da:	bf00      	nop
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <uartGetChar+0x50>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0fb      	beq.n	80014dc <uartGetChar+0x8>
        ;

    char c = uartRxBuffer[uartRxReadIdx];
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <uartGetChar+0x54>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <uartGetChar+0x58>)
 80014ec:	5c9b      	ldrb	r3, [r3, r2]
 80014ee:	71fb      	strb	r3, [r7, #7]
    uartRxCounter--;
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <uartGetChar+0x50>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <uartGetChar+0x50>)
 80014fa:	701a      	strb	r2, [r3, #0]

    uartRxReadIdx++;
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <uartGetChar+0x54>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <uartGetChar+0x54>)
 8001506:	701a      	strb	r2, [r3, #0]
    if (uartRxReadIdx == UART_RX_BUFFER_SIZE)
 8001508:	4b07      	ldr	r3, [pc, #28]	; (8001528 <uartGetChar+0x54>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b80      	cmp	r3, #128	; 0x80
 800150e:	d102      	bne.n	8001516 <uartGetChar+0x42>
        uartRxReadIdx = 0;
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <uartGetChar+0x54>)
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]

    return c;
 8001516:	79fb      	ldrb	r3, [r7, #7]
}
 8001518:	4618      	mov	r0, r3
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	20000248 	.word	0x20000248
 8001528:	20000249 	.word	0x20000249
 800152c:	200001c8 	.word	0x200001c8

08001530 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001530:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001568 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001534:	480d      	ldr	r0, [pc, #52]	; (800156c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001536:	490e      	ldr	r1, [pc, #56]	; (8001570 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001538:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800153c:	e002      	b.n	8001544 <LoopCopyDataInit>

0800153e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001542:	3304      	adds	r3, #4

08001544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001548:	d3f9      	bcc.n	800153e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154a:	4a0b      	ldr	r2, [pc, #44]	; (8001578 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800154c:	4c0b      	ldr	r4, [pc, #44]	; (800157c <LoopFillZerobss+0x26>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001550:	e001      	b.n	8001556 <LoopFillZerobss>

08001552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001554:	3204      	adds	r2, #4

08001556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001558:	d3fb      	bcc.n	8001552 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800155a:	f7ff fe5b 	bl	8001214 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800155e:	f003 f9e7 	bl	8004930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001562:	f7ff f999 	bl	8000898 <main>
  bx  lr    
 8001566:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001568:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800156c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001570:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001574:	0800882c 	.word	0x0800882c
  ldr r2, =_sbss
 8001578:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800157c:	200004f0 	.word	0x200004f0

08001580 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001580:	e7fe      	b.n	8001580 <ADC_IRQHandler>

08001582 <LCD_Init>:
#include <string.h>

static char tempLcdBuffer[32];

void LCD_Init(void)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	af00      	add	r7, sp, #0
  SSD1306_Init();
 8001586:	f000 f8c1 	bl	800170c <SSD1306_Init>
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <LCD_PrintTest>:

void LCD_PrintTest(uint16_t x,uint16_t y, char * msg, SSD1306_COLOR_t color, LCD_CharSize_t charSize)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60ba      	str	r2, [r7, #8]
 8001598:	461a      	mov	r2, r3
 800159a:	4603      	mov	r3, r0
 800159c:	81fb      	strh	r3, [r7, #14]
 800159e:	460b      	mov	r3, r1
 80015a0:	81bb      	strh	r3, [r7, #12]
 80015a2:	4613      	mov	r3, r2
 80015a4:	71fb      	strb	r3, [r7, #7]
  FontDef_t Font;
  
  /* Clear screen first */
  SSD1306_Fill(SSD1306_COLOR_BLACK);
 80015a6:	2000      	movs	r0, #0
 80015a8:	f000 f974 	bl	8001894 <SSD1306_Fill>
  
  SSD1306_GotoXY(x,y);
 80015ac:	89ba      	ldrh	r2, [r7, #12]
 80015ae:	89fb      	ldrh	r3, [r7, #14]
 80015b0:	4611      	mov	r1, r2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f9e6 	bl	8001984 <SSD1306_GotoXY>
  
  if(charSize == LCD_CHAR_SMALL){
 80015b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d132      	bne.n	8001626 <LCD_PrintTest+0x96>
    Font = Font_7x10;
 80015c0:	4a49      	ldr	r2, [pc, #292]	; (80016e8 <LCD_PrintTest+0x158>)
 80015c2:	f107 0310 	add.w	r3, r7, #16
 80015c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015ca:	e883 0003 	stmia.w	r3, {r0, r1}
    SSD1306_Puts("12345678901234567890", &Font, color);
 80015ce:	79fa      	ldrb	r2, [r7, #7]
 80015d0:	f107 0310 	add.w	r3, r7, #16
 80015d4:	4619      	mov	r1, r3
 80015d6:	4845      	ldr	r0, [pc, #276]	; (80016ec <LCD_PrintTest+0x15c>)
 80015d8:	f000 fa6a 	bl	8001ab0 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 80015dc:	f000 f92c 	bl	8001838 <SSD1306_UpdateScreen>

    SSD1306_GotoXY(x,y+10);
 80015e0:	89bb      	ldrh	r3, [r7, #12]
 80015e2:	330a      	adds	r3, #10
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	89fb      	ldrh	r3, [r7, #14]
 80015e8:	4611      	mov	r1, r2
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f9ca 	bl	8001984 <SSD1306_GotoXY>
    SSD1306_Puts("ABCDEFGHIJKLMNOPQRST", &Font, color);
 80015f0:	79fa      	ldrb	r2, [r7, #7]
 80015f2:	f107 0310 	add.w	r3, r7, #16
 80015f6:	4619      	mov	r1, r3
 80015f8:	483d      	ldr	r0, [pc, #244]	; (80016f0 <LCD_PrintTest+0x160>)
 80015fa:	f000 fa59 	bl	8001ab0 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 80015fe:	f000 f91b 	bl	8001838 <SSD1306_UpdateScreen>

    SSD1306_GotoXY(x,y+20);
 8001602:	89bb      	ldrh	r3, [r7, #12]
 8001604:	3314      	adds	r3, #20
 8001606:	b29a      	uxth	r2, r3
 8001608:	89fb      	ldrh	r3, [r7, #14]
 800160a:	4611      	mov	r1, r2
 800160c:	4618      	mov	r0, r3
 800160e:	f000 f9b9 	bl	8001984 <SSD1306_GotoXY>
    SSD1306_Puts("abcdefghijklmnopqrst", &Font, color);
 8001612:	79fa      	ldrb	r2, [r7, #7]
 8001614:	f107 0310 	add.w	r3, r7, #16
 8001618:	4619      	mov	r1, r3
 800161a:	4836      	ldr	r0, [pc, #216]	; (80016f4 <LCD_PrintTest+0x164>)
 800161c:	f000 fa48 	bl	8001ab0 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8001620:	f000 f90a 	bl	8001838 <SSD1306_UpdateScreen>
    SSD1306_Puts("ABCDEFGHIJK", &Font, color);
    SSD1306_UpdateScreen();
  }
  

}
 8001624:	e05b      	b.n	80016de <LCD_PrintTest+0x14e>
  }else if(charSize == LCD_CHAR_MEDIUM)
 8001626:	f897 3020 	ldrb.w	r3, [r7, #32]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d121      	bne.n	8001672 <LCD_PrintTest+0xe2>
    Font = Font_11x18;
 800162e:	4a32      	ldr	r2, [pc, #200]	; (80016f8 <LCD_PrintTest+0x168>)
 8001630:	f107 0310 	add.w	r3, r7, #16
 8001634:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001638:	e883 0003 	stmia.w	r3, {r0, r1}
    SSD1306_Puts("12345678901", &Font, color);
 800163c:	79fa      	ldrb	r2, [r7, #7]
 800163e:	f107 0310 	add.w	r3, r7, #16
 8001642:	4619      	mov	r1, r3
 8001644:	482d      	ldr	r0, [pc, #180]	; (80016fc <LCD_PrintTest+0x16c>)
 8001646:	f000 fa33 	bl	8001ab0 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 800164a:	f000 f8f5 	bl	8001838 <SSD1306_UpdateScreen>
    SSD1306_GotoXY(x,y+14);
 800164e:	89bb      	ldrh	r3, [r7, #12]
 8001650:	330e      	adds	r3, #14
 8001652:	b29a      	uxth	r2, r3
 8001654:	89fb      	ldrh	r3, [r7, #14]
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f000 f993 	bl	8001984 <SSD1306_GotoXY>
    SSD1306_Puts("ABCDEFGHIJK", &Font, color);
 800165e:	79fa      	ldrb	r2, [r7, #7]
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	4619      	mov	r1, r3
 8001666:	4826      	ldr	r0, [pc, #152]	; (8001700 <LCD_PrintTest+0x170>)
 8001668:	f000 fa22 	bl	8001ab0 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 800166c:	f000 f8e4 	bl	8001838 <SSD1306_UpdateScreen>
}
 8001670:	e035      	b.n	80016de <LCD_PrintTest+0x14e>
  }else if(charSize == LCD_CHAR_BIG)
 8001672:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d110      	bne.n	800169c <LCD_PrintTest+0x10c>
    Font = Font_16x26;
 800167a:	4a22      	ldr	r2, [pc, #136]	; (8001704 <LCD_PrintTest+0x174>)
 800167c:	f107 0310 	add.w	r3, r7, #16
 8001680:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001684:	e883 0003 	stmia.w	r3, {r0, r1}
    SSD1306_Puts("12345678", &Font, color);
 8001688:	79fa      	ldrb	r2, [r7, #7]
 800168a:	f107 0310 	add.w	r3, r7, #16
 800168e:	4619      	mov	r1, r3
 8001690:	481d      	ldr	r0, [pc, #116]	; (8001708 <LCD_PrintTest+0x178>)
 8001692:	f000 fa0d 	bl	8001ab0 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8001696:	f000 f8cf 	bl	8001838 <SSD1306_UpdateScreen>
}
 800169a:	e020      	b.n	80016de <LCD_PrintTest+0x14e>
    Font = Font_11x18;
 800169c:	4a16      	ldr	r2, [pc, #88]	; (80016f8 <LCD_PrintTest+0x168>)
 800169e:	f107 0310 	add.w	r3, r7, #16
 80016a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016a6:	e883 0003 	stmia.w	r3, {r0, r1}
    SSD1306_Puts("12345678901", &Font, color);
 80016aa:	79fa      	ldrb	r2, [r7, #7]
 80016ac:	f107 0310 	add.w	r3, r7, #16
 80016b0:	4619      	mov	r1, r3
 80016b2:	4812      	ldr	r0, [pc, #72]	; (80016fc <LCD_PrintTest+0x16c>)
 80016b4:	f000 f9fc 	bl	8001ab0 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 80016b8:	f000 f8be 	bl	8001838 <SSD1306_UpdateScreen>
    SSD1306_GotoXY(x,y+14);
 80016bc:	89bb      	ldrh	r3, [r7, #12]
 80016be:	330e      	adds	r3, #14
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	89fb      	ldrh	r3, [r7, #14]
 80016c4:	4611      	mov	r1, r2
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 f95c 	bl	8001984 <SSD1306_GotoXY>
    SSD1306_Puts("ABCDEFGHIJK", &Font, color);
 80016cc:	79fa      	ldrb	r2, [r7, #7]
 80016ce:	f107 0310 	add.w	r3, r7, #16
 80016d2:	4619      	mov	r1, r3
 80016d4:	480a      	ldr	r0, [pc, #40]	; (8001700 <LCD_PrintTest+0x170>)
 80016d6:	f000 f9eb 	bl	8001ab0 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 80016da:	f000 f8ad 	bl	8001838 <SSD1306_UpdateScreen>
}
 80016de:	bf00      	nop
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000004 	.word	0x20000004
 80016ec:	08005eb8 	.word	0x08005eb8
 80016f0:	08005ed0 	.word	0x08005ed0
 80016f4:	08005ee8 	.word	0x08005ee8
 80016f8:	2000000c 	.word	0x2000000c
 80016fc:	08005f00 	.word	0x08005f00
 8001700:	08005f0c 	.word	0x08005f0c
 8001704:	20000014 	.word	0x20000014
 8001708:	08005f18 	.word	0x08005f18

0800170c <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	/* Init I2C */
	ssd1306_I2C_Init();
 8001710:	f000 f9f4 	bl	8001afc <ssd1306_I2C_Init>
//	{
//		__NOP();
//	}

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001714:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001718:	2201      	movs	r2, #1
 800171a:	2178      	movs	r1, #120	; 0x78
 800171c:	4844      	ldr	r0, [pc, #272]	; (8001830 <SSD1306_Init+0x124>)
 800171e:	f000 fff3 	bl	8002708 <HAL_I2C_IsDeviceReady>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <SSD1306_Init+0x20>
		/* Return false */
		return 0;
 8001728:	2300      	movs	r3, #0
 800172a:	e07f      	b.n	800182c <SSD1306_Init+0x120>
	}

	/* A little delay for the SSD1306 initialization */
	HAL_Delay(100);
 800172c:	2064      	movs	r0, #100	; 0x64
 800172e:	f000 fb01 	bl	8001d34 <HAL_Delay>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001732:	22ae      	movs	r2, #174	; 0xae
 8001734:	2100      	movs	r1, #0
 8001736:	2078      	movs	r0, #120	; 0x78
 8001738:	f000 fa6c 	bl	8001c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800173c:	22a8      	movs	r2, #168	; 0xa8
 800173e:	2100      	movs	r1, #0
 8001740:	2078      	movs	r0, #120	; 0x78
 8001742:	f000 fa67 	bl	8001c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x1F); //
 8001746:	221f      	movs	r2, #31
 8001748:	2100      	movs	r1, #0
 800174a:	2078      	movs	r0, #120	; 0x78
 800174c:	f000 fa62 	bl	8001c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001750:	22d3      	movs	r2, #211	; 0xd3
 8001752:	2100      	movs	r1, #0
 8001754:	2078      	movs	r0, #120	; 0x78
 8001756:	f000 fa5d 	bl	8001c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //
 800175a:	2200      	movs	r2, #0
 800175c:	2100      	movs	r1, #0
 800175e:	2078      	movs	r0, #120	; 0x78
 8001760:	f000 fa58 	bl	8001c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001764:	2240      	movs	r2, #64	; 0x40
 8001766:	2100      	movs	r1, #0
 8001768:	2078      	movs	r0, #120	; 0x78
 800176a:	f000 fa53 	bl	8001c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 800176e:	2220      	movs	r2, #32
 8001770:	2100      	movs	r1, #0
 8001772:	2078      	movs	r0, #120	; 0x78
 8001774:	f000 fa4e 	bl	8001c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x02); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001778:	2202      	movs	r2, #2
 800177a:	2100      	movs	r1, #0
 800177c:	2078      	movs	r0, #120	; 0x78
 800177e:	f000 fa49 	bl	8001c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001782:	22a1      	movs	r2, #161	; 0xa1
 8001784:	2100      	movs	r1, #0
 8001786:	2078      	movs	r0, #120	; 0x78
 8001788:	f000 fa44 	bl	8001c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800178c:	22c8      	movs	r2, #200	; 0xc8
 800178e:	2100      	movs	r1, #0
 8001790:	2078      	movs	r0, #120	; 0x78
 8001792:	f000 fa3f 	bl	8001c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001796:	22da      	movs	r2, #218	; 0xda
 8001798:	2100      	movs	r1, #0
 800179a:	2078      	movs	r0, #120	; 0x78
 800179c:	f000 fa3a 	bl	8001c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x02); //
 80017a0:	2202      	movs	r2, #2
 80017a2:	2100      	movs	r1, #0
 80017a4:	2078      	movs	r0, #120	; 0x78
 80017a6:	f000 fa35 	bl	8001c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80017aa:	2281      	movs	r2, #129	; 0x81
 80017ac:	2100      	movs	r1, #0
 80017ae:	2078      	movs	r0, #120	; 0x78
 80017b0:	f000 fa30 	bl	8001c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x1F); //
 80017b4:	221f      	movs	r2, #31
 80017b6:	2100      	movs	r1, #0
 80017b8:	2078      	movs	r0, #120	; 0x78
 80017ba:	f000 fa2b 	bl	8001c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80017be:	22a4      	movs	r2, #164	; 0xa4
 80017c0:	2100      	movs	r1, #0
 80017c2:	2078      	movs	r0, #120	; 0x78
 80017c4:	f000 fa26 	bl	8001c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display mode
 80017c8:	22a6      	movs	r2, #166	; 0xa6
 80017ca:	2100      	movs	r1, #0
 80017cc:	2078      	movs	r0, #120	; 0x78
 80017ce:	f000 fa21 	bl	8001c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80017d2:	22d5      	movs	r2, #213	; 0xd5
 80017d4:	2100      	movs	r1, #0
 80017d6:	2078      	movs	r0, #120	; 0x78
 80017d8:	f000 fa1c 	bl	8001c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x80); //--set divide ratio
 80017dc:	2280      	movs	r2, #128	; 0x80
 80017de:	2100      	movs	r1, #0
 80017e0:	2078      	movs	r0, #120	; 0x78
 80017e2:	f000 fa17 	bl	8001c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80017e6:	228d      	movs	r2, #141	; 0x8d
 80017e8:	2100      	movs	r1, #0
 80017ea:	2078      	movs	r0, #120	; 0x78
 80017ec:	f000 fa12 	bl	8001c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80017f0:	2214      	movs	r2, #20
 80017f2:	2100      	movs	r1, #0
 80017f4:	2078      	movs	r0, #120	; 0x78
 80017f6:	f000 fa0d 	bl	8001c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x2E); //Disable Scroll
 80017fa:	222e      	movs	r2, #46	; 0x2e
 80017fc:	2100      	movs	r1, #0
 80017fe:	2078      	movs	r0, #120	; 0x78
 8001800:	f000 fa08 	bl	8001c14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001804:	22af      	movs	r2, #175	; 0xaf
 8001806:	2100      	movs	r1, #0
 8001808:	2078      	movs	r0, #120	; 0x78
 800180a:	f000 fa03 	bl	8001c14 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0x2F); //Disable Scroll*/

	//SSD1306_WRITECOMMAND(0xA5); //--turn on SSD1306 panel

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800180e:	2000      	movs	r0, #0
 8001810:	f000 f840 	bl	8001894 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001814:	f000 f810 	bl	8001838 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <SSD1306_Init+0x128>)
 800181a:	2200      	movs	r2, #0
 800181c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800181e:	4b05      	ldr	r3, [pc, #20]	; (8001834 <SSD1306_Init+0x128>)
 8001820:	2200      	movs	r2, #0
 8001822:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <SSD1306_Init+0x128>)
 8001826:	2201      	movs	r2, #1
 8001828:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800182a:	2301      	movs	r3, #1
}
 800182c:	4618      	mov	r0, r3
 800182e:	bd80      	pop	{r7, pc}
 8001830:	200000a4 	.word	0x200000a4
 8001834:	200004d4 	.word	0x200004d4

08001838 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 4; m++) {
 800183e:	2300      	movs	r3, #0
 8001840:	71fb      	strb	r3, [r7, #7]
 8001842:	e01d      	b.n	8001880 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0+m);
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	3b50      	subs	r3, #80	; 0x50
 8001848:	b2db      	uxtb	r3, r3
 800184a:	461a      	mov	r2, r3
 800184c:	2100      	movs	r1, #0
 800184e:	2078      	movs	r0, #120	; 0x78
 8001850:	f000 f9e0 	bl	8001c14 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001854:	2200      	movs	r2, #0
 8001856:	2100      	movs	r1, #0
 8001858:	2078      	movs	r0, #120	; 0x78
 800185a:	f000 f9db 	bl	8001c14 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800185e:	2210      	movs	r2, #16
 8001860:	2100      	movs	r1, #0
 8001862:	2078      	movs	r0, #120	; 0x78
 8001864:	f000 f9d6 	bl	8001c14 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMultiple(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	01db      	lsls	r3, r3, #7
 800186c:	4a08      	ldr	r2, [pc, #32]	; (8001890 <SSD1306_UpdateScreen+0x58>)
 800186e:	441a      	add	r2, r3
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	2140      	movs	r1, #64	; 0x40
 8001874:	2078      	movs	r0, #120	; 0x78
 8001876:	f000 f96f 	bl	8001b58 <ssd1306_I2C_WriteMultiple>
	for (m = 0; m < 4; m++) {
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	3301      	adds	r3, #1
 800187e:	71fb      	strb	r3, [r7, #7]
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	2b03      	cmp	r3, #3
 8001884:	d9de      	bls.n	8001844 <SSD1306_UpdateScreen+0xc>
	}
}
 8001886:	bf00      	nop
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	200002d4 	.word	0x200002d4

08001894 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <SSD1306_Fill+0x14>
 80018a4:	2300      	movs	r3, #0
 80018a6:	e000      	b.n	80018aa <SSD1306_Fill+0x16>
 80018a8:	23ff      	movs	r3, #255	; 0xff
 80018aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ae:	4619      	mov	r1, r3
 80018b0:	4803      	ldr	r0, [pc, #12]	; (80018c0 <SSD1306_Fill+0x2c>)
 80018b2:	f003 f861 	bl	8004978 <memset>
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200002d4 	.word	0x200002d4

080018c4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	80fb      	strh	r3, [r7, #6]
 80018ce:	460b      	mov	r3, r1
 80018d0:	80bb      	strh	r3, [r7, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	70fb      	strb	r3, [r7, #3]
	if (
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	2b7f      	cmp	r3, #127	; 0x7f
 80018da:	d848      	bhi.n	800196e <SSD1306_DrawPixel+0xaa>
			x >= SSD1306_WIDTH ||
 80018dc:	88bb      	ldrh	r3, [r7, #4]
 80018de:	2b1f      	cmp	r3, #31
 80018e0:	d845      	bhi.n	800196e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80018e2:	4b26      	ldr	r3, [pc, #152]	; (800197c <SSD1306_DrawPixel+0xb8>)
 80018e4:	791b      	ldrb	r3, [r3, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d006      	beq.n	80018f8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80018ea:	78fb      	ldrb	r3, [r7, #3]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	bf0c      	ite	eq
 80018f0:	2301      	moveq	r3, #1
 80018f2:	2300      	movne	r3, #0
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80018f8:	78fb      	ldrb	r3, [r7, #3]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d11a      	bne.n	8001934 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80018fe:	88fa      	ldrh	r2, [r7, #6]
 8001900:	88bb      	ldrh	r3, [r7, #4]
 8001902:	08db      	lsrs	r3, r3, #3
 8001904:	b298      	uxth	r0, r3
 8001906:	4603      	mov	r3, r0
 8001908:	01db      	lsls	r3, r3, #7
 800190a:	4413      	add	r3, r2
 800190c:	4a1c      	ldr	r2, [pc, #112]	; (8001980 <SSD1306_DrawPixel+0xbc>)
 800190e:	5cd3      	ldrb	r3, [r2, r3]
 8001910:	b25a      	sxtb	r2, r3
 8001912:	88bb      	ldrh	r3, [r7, #4]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	2101      	movs	r1, #1
 800191a:	fa01 f303 	lsl.w	r3, r1, r3
 800191e:	b25b      	sxtb	r3, r3
 8001920:	4313      	orrs	r3, r2
 8001922:	b259      	sxtb	r1, r3
 8001924:	88fa      	ldrh	r2, [r7, #6]
 8001926:	4603      	mov	r3, r0
 8001928:	01db      	lsls	r3, r3, #7
 800192a:	4413      	add	r3, r2
 800192c:	b2c9      	uxtb	r1, r1
 800192e:	4a14      	ldr	r2, [pc, #80]	; (8001980 <SSD1306_DrawPixel+0xbc>)
 8001930:	54d1      	strb	r1, [r2, r3]
 8001932:	e01d      	b.n	8001970 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001934:	88fa      	ldrh	r2, [r7, #6]
 8001936:	88bb      	ldrh	r3, [r7, #4]
 8001938:	08db      	lsrs	r3, r3, #3
 800193a:	b298      	uxth	r0, r3
 800193c:	4603      	mov	r3, r0
 800193e:	01db      	lsls	r3, r3, #7
 8001940:	4413      	add	r3, r2
 8001942:	4a0f      	ldr	r2, [pc, #60]	; (8001980 <SSD1306_DrawPixel+0xbc>)
 8001944:	5cd3      	ldrb	r3, [r2, r3]
 8001946:	b25a      	sxtb	r2, r3
 8001948:	88bb      	ldrh	r3, [r7, #4]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	2101      	movs	r1, #1
 8001950:	fa01 f303 	lsl.w	r3, r1, r3
 8001954:	b25b      	sxtb	r3, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	b25b      	sxtb	r3, r3
 800195a:	4013      	ands	r3, r2
 800195c:	b259      	sxtb	r1, r3
 800195e:	88fa      	ldrh	r2, [r7, #6]
 8001960:	4603      	mov	r3, r0
 8001962:	01db      	lsls	r3, r3, #7
 8001964:	4413      	add	r3, r2
 8001966:	b2c9      	uxtb	r1, r1
 8001968:	4a05      	ldr	r2, [pc, #20]	; (8001980 <SSD1306_DrawPixel+0xbc>)
 800196a:	54d1      	strb	r1, [r2, r3]
 800196c:	e000      	b.n	8001970 <SSD1306_DrawPixel+0xac>
		return;
 800196e:	bf00      	nop
	}
}
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	200004d4 	.word	0x200004d4
 8001980:	200002d4 	.word	0x200002d4

08001984 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	460a      	mov	r2, r1
 800198e:	80fb      	strh	r3, [r7, #6]
 8001990:	4613      	mov	r3, r2
 8001992:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001994:	4a05      	ldr	r2, [pc, #20]	; (80019ac <SSD1306_GotoXY+0x28>)
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800199a:	4a04      	ldr	r2, [pc, #16]	; (80019ac <SSD1306_GotoXY+0x28>)
 800199c:	88bb      	ldrh	r3, [r7, #4]
 800199e:	8053      	strh	r3, [r2, #2]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	200004d4 	.word	0x200004d4

080019b0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	6039      	str	r1, [r7, #0]
 80019ba:	71fb      	strb	r3, [r7, #7]
 80019bc:	4613      	mov	r3, r2
 80019be:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
			SSD1306_WIDTH < (SSD1306.CurrentX + Font->FontWidth) ||
 80019c0:	4b3a      	ldr	r3, [pc, #232]	; (8001aac <SSD1306_Putc+0xfc>)
 80019c2:	881b      	ldrh	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	4413      	add	r3, r2
	if (
 80019cc:	2b80      	cmp	r3, #128	; 0x80
 80019ce:	dc07      	bgt.n	80019e0 <SSD1306_Putc+0x30>
			SSD1306_HEIGHT < (SSD1306.CurrentY + Font->FontHeight)
 80019d0:	4b36      	ldr	r3, [pc, #216]	; (8001aac <SSD1306_Putc+0xfc>)
 80019d2:	885b      	ldrh	r3, [r3, #2]
 80019d4:	461a      	mov	r2, r3
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	785b      	ldrb	r3, [r3, #1]
 80019da:	4413      	add	r3, r2
			SSD1306_WIDTH < (SSD1306.CurrentX + Font->FontWidth) ||
 80019dc:	2b20      	cmp	r3, #32
 80019de:	dd01      	ble.n	80019e4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	e05e      	b.n	8001aa2 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	e04b      	b.n	8001a82 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	3b20      	subs	r3, #32
 80019f2:	6839      	ldr	r1, [r7, #0]
 80019f4:	7849      	ldrb	r1, [r1, #1]
 80019f6:	fb01 f303 	mul.w	r3, r1, r3
 80019fa:	4619      	mov	r1, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	440b      	add	r3, r1
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	4413      	add	r3, r2
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001a08:	2300      	movs	r3, #0
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	e030      	b.n	8001a70 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d010      	beq.n	8001a40 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001a1e:	4b23      	ldr	r3, [pc, #140]	; (8001aac <SSD1306_Putc+0xfc>)
 8001a20:	881a      	ldrh	r2, [r3, #0]
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	b298      	uxth	r0, r3
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <SSD1306_Putc+0xfc>)
 8001a2c:	885a      	ldrh	r2, [r3, #2]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	4413      	add	r3, r2
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	79ba      	ldrb	r2, [r7, #6]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f7ff ff43 	bl	80018c4 <SSD1306_DrawPixel>
 8001a3e:	e014      	b.n	8001a6a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001a40:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <SSD1306_Putc+0xfc>)
 8001a42:	881a      	ldrh	r2, [r3, #0]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	4413      	add	r3, r2
 8001a4a:	b298      	uxth	r0, r3
 8001a4c:	4b17      	ldr	r3, [pc, #92]	; (8001aac <SSD1306_Putc+0xfc>)
 8001a4e:	885a      	ldrh	r2, [r3, #2]
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	4413      	add	r3, r2
 8001a56:	b299      	uxth	r1, r3
 8001a58:	79bb      	ldrb	r3, [r7, #6]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	bf0c      	ite	eq
 8001a5e:	2301      	moveq	r3, #1
 8001a60:	2300      	movne	r3, #0
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	461a      	mov	r2, r3
 8001a66:	f7ff ff2d 	bl	80018c4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d3c8      	bcc.n	8001a0e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	785b      	ldrb	r3, [r3, #1]
 8001a86:	461a      	mov	r2, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d3ad      	bcc.n	80019ea <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001a8e:	4b07      	ldr	r3, [pc, #28]	; (8001aac <SSD1306_Putc+0xfc>)
 8001a90:	881a      	ldrh	r2, [r3, #0]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	4413      	add	r3, r2
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <SSD1306_Putc+0xfc>)
 8001a9e:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200004d4 	.word	0x200004d4

08001ab0 <SSD1306_Puts>:

char SSD1306_Puts(const char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	4613      	mov	r3, r2
 8001abc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001abe:	e012      	b.n	8001ae6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	79fa      	ldrb	r2, [r7, #7]
 8001ac6:	68b9      	ldr	r1, [r7, #8]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff71 	bl	80019b0 <SSD1306_Putc>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d002      	beq.n	8001ae0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	e008      	b.n	8001af2 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1e8      	bne.n	8001ac0 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	781b      	ldrb	r3, [r3, #0]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <ssd1306_I2C_Init>:
 * @retval Initialization status:
 *           - 0: LCD was not detected on I2C port
 *           - > 0: LCD initialized OK and ready to use
 */
void ssd1306_I2C_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <ssd1306_I2C_Init+0x50>)
 8001b02:	4a13      	ldr	r2, [pc, #76]	; (8001b50 <ssd1306_I2C_Init+0x54>)
 8001b04:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001b06:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <ssd1306_I2C_Init+0x50>)
 8001b08:	4a12      	ldr	r2, [pc, #72]	; (8001b54 <ssd1306_I2C_Init+0x58>)
 8001b0a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <ssd1306_I2C_Init+0x50>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <ssd1306_I2C_Init+0x50>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <ssd1306_I2C_Init+0x50>)
 8001b1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b1e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b20:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <ssd1306_I2C_Init+0x50>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <ssd1306_I2C_Init+0x50>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b2c:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <ssd1306_I2C_Init+0x50>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <ssd1306_I2C_Init+0x50>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b38:	4804      	ldr	r0, [pc, #16]	; (8001b4c <ssd1306_I2C_Init+0x50>)
 8001b3a:	f000 fba3 	bl	8002284 <HAL_I2C_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <ssd1306_I2C_Init+0x4c>
	{
		Error_Handler();
 8001b44:	f7ff f9d6 	bl	8000ef4 <Error_Handler>
	}

}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	200000a4 	.word	0x200000a4
 8001b50:	40005400 	.word	0x40005400
 8001b54:	000186a0 	.word	0x000186a0

08001b58 <ssd1306_I2C_WriteMultiple>:

void ssd1306_I2C_WriteMultiple(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b5c:	b089      	sub	sp, #36	; 0x24
 8001b5e:	af02      	add	r7, sp, #8
 8001b60:	603a      	str	r2, [r7, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	4603      	mov	r3, r0
 8001b66:	71fb      	strb	r3, [r7, #7]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	71bb      	strb	r3, [r7, #6]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	80bb      	strh	r3, [r7, #4]
 8001b70:	466b      	mov	r3, sp
 8001b72:	461e      	mov	r6, r3
  uint8_t dt[count + 1];
 8001b74:	88bb      	ldrh	r3, [r7, #4]
 8001b76:	1c59      	adds	r1, r3, #1
 8001b78:	1e4b      	subs	r3, r1, #1
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	460a      	mov	r2, r1
 8001b7e:	2300      	movs	r3, #0
 8001b80:	4690      	mov	r8, r2
 8001b82:	4699      	mov	r9, r3
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b98:	460a      	mov	r2, r1
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	4614      	mov	r4, r2
 8001b9e:	461d      	mov	r5, r3
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	00eb      	lsls	r3, r5, #3
 8001baa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bae:	00e2      	lsls	r2, r4, #3
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	3307      	adds	r3, #7
 8001bb4:	08db      	lsrs	r3, r3, #3
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	ebad 0d03 	sub.w	sp, sp, r3
 8001bbc:	ab02      	add	r3, sp, #8
 8001bbe:	3300      	adds	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
  dt[0] = reg;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	79ba      	ldrb	r2, [r7, #6]
 8001bc6:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  for(i = 1; i <= count; i++)
 8001bc8:	2301      	movs	r3, #1
 8001bca:	75fb      	strb	r3, [r7, #23]
 8001bcc:	e00a      	b.n	8001be4 <ssd1306_I2C_WriteMultiple+0x8c>
    dt[i] = data[i-1];
 8001bce:	7dfb      	ldrb	r3, [r7, #23]
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	441a      	add	r2, r3
 8001bd6:	7dfb      	ldrb	r3, [r7, #23]
 8001bd8:	7811      	ldrb	r1, [r2, #0]
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	54d1      	strb	r1, [r2, r3]
  for(i = 1; i <= count; i++)
 8001bde:	7dfb      	ldrb	r3, [r7, #23]
 8001be0:	3301      	adds	r3, #1
 8001be2:	75fb      	strb	r3, [r7, #23]
 8001be4:	7dfb      	ldrb	r3, [r7, #23]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	88ba      	ldrh	r2, [r7, #4]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d2ef      	bcs.n	8001bce <ssd1306_I2C_WriteMultiple+0x76>
  HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 100);
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	b299      	uxth	r1, r3
 8001bf2:	88bb      	ldrh	r3, [r7, #4]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	2264      	movs	r2, #100	; 0x64
 8001bfa:	9200      	str	r2, [sp, #0]
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	4804      	ldr	r0, [pc, #16]	; (8001c10 <ssd1306_I2C_WriteMultiple+0xb8>)
 8001c00:	f000 fc84 	bl	800250c <HAL_I2C_Master_Transmit>
 8001c04:	46b5      	mov	sp, r6
}
 8001c06:	bf00      	nop
 8001c08:	371c      	adds	r7, #28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c10:	200000a4 	.word	0x200000a4

08001c14 <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	71bb      	strb	r3, [r7, #6]
 8001c22:	4613      	mov	r3, r2
 8001c24:	717b      	strb	r3, [r7, #5]
  uint8_t dt[2];
  dt[0] = reg;
 8001c26:	79bb      	ldrb	r3, [r7, #6]
 8001c28:	733b      	strb	r3, [r7, #12]
  dt[1] = data;
 8001c2a:	797b      	ldrb	r3, [r7, #5]
 8001c2c:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 100);
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	b299      	uxth	r1, r3
 8001c32:	f107 020c 	add.w	r2, r7, #12
 8001c36:	2364      	movs	r3, #100	; 0x64
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	4803      	ldr	r0, [pc, #12]	; (8001c4c <ssd1306_I2C_Write+0x38>)
 8001c3e:	f000 fc65 	bl	800250c <HAL_I2C_Master_Transmit>
}
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200000a4 	.word	0x200000a4

08001c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c54:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <HAL_Init+0x40>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0d      	ldr	r2, [pc, #52]	; (8001c90 <HAL_Init+0x40>)
 8001c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c60:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <HAL_Init+0x40>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <HAL_Init+0x40>)
 8001c66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <HAL_Init+0x40>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a07      	ldr	r2, [pc, #28]	; (8001c90 <HAL_Init+0x40>)
 8001c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c78:	2003      	movs	r0, #3
 8001c7a:	f000 f931 	bl	8001ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f000 f808 	bl	8001c94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c84:	f7ff f942 	bl	8000f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40023c00 	.word	0x40023c00

08001c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_InitTick+0x54>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_InitTick+0x58>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 f93b 	bl	8001f2e <HAL_SYSTICK_Config>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e00e      	b.n	8001ce0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b0f      	cmp	r3, #15
 8001cc6:	d80a      	bhi.n	8001cde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd0:	f000 f911 	bl	8001ef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cd4:	4a06      	ldr	r2, [pc, #24]	; (8001cf0 <HAL_InitTick+0x5c>)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	e000      	b.n	8001ce0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20000000 	.word	0x20000000
 8001cec:	20000020 	.word	0x20000020
 8001cf0:	2000001c 	.word	0x2000001c

08001cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_IncTick+0x20>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_IncTick+0x24>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4413      	add	r3, r2
 8001d04:	4a04      	ldr	r2, [pc, #16]	; (8001d18 <HAL_IncTick+0x24>)
 8001d06:	6013      	str	r3, [r2, #0]
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000020 	.word	0x20000020
 8001d18:	200004dc 	.word	0x200004dc

08001d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <HAL_GetTick+0x14>)
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	200004dc 	.word	0x200004dc

08001d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d3c:	f7ff ffee 	bl	8001d1c <HAL_GetTick>
 8001d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d4c:	d005      	beq.n	8001d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_Delay+0x44>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	461a      	mov	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4413      	add	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d5a:	bf00      	nop
 8001d5c:	f7ff ffde 	bl	8001d1c <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d8f7      	bhi.n	8001d5c <HAL_Delay+0x28>
  {
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000020 	.word	0x20000020

08001d7c <__NVIC_SetPriorityGrouping>:
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dae:	4a04      	ldr	r2, [pc, #16]	; (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	60d3      	str	r3, [r2, #12]
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <__NVIC_GetPriorityGrouping>:
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <__NVIC_GetPriorityGrouping+0x18>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	0a1b      	lsrs	r3, r3, #8
 8001dce:	f003 0307 	and.w	r3, r3, #7
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <__NVIC_SetPriority>:
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	6039      	str	r1, [r7, #0]
 8001dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	db0a      	blt.n	8001e0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	490c      	ldr	r1, [pc, #48]	; (8001e2c <__NVIC_SetPriority+0x4c>)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	0112      	lsls	r2, r2, #4
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	440b      	add	r3, r1
 8001e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e08:	e00a      	b.n	8001e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4908      	ldr	r1, [pc, #32]	; (8001e30 <__NVIC_SetPriority+0x50>)
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	3b04      	subs	r3, #4
 8001e18:	0112      	lsls	r2, r2, #4
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	761a      	strb	r2, [r3, #24]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000e100 	.word	0xe000e100
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <NVIC_EncodePriority>:
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	; 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f1c3 0307 	rsb	r3, r3, #7
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	bf28      	it	cs
 8001e52:	2304      	movcs	r3, #4
 8001e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	2b06      	cmp	r3, #6
 8001e5c:	d902      	bls.n	8001e64 <NVIC_EncodePriority+0x30>
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3b03      	subs	r3, #3
 8001e62:	e000      	b.n	8001e66 <NVIC_EncodePriority+0x32>
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	f04f 32ff 	mov.w	r2, #4294967295
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43da      	mvns	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	401a      	ands	r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	43d9      	mvns	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	4313      	orrs	r3, r2
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3724      	adds	r7, #36	; 0x24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eac:	d301      	bcc.n	8001eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00f      	b.n	8001ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <SysTick_Config+0x40>)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eba:	210f      	movs	r1, #15
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec0:	f7ff ff8e 	bl	8001de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <SysTick_Config+0x40>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eca:	4b04      	ldr	r3, [pc, #16]	; (8001edc <SysTick_Config+0x40>)
 8001ecc:	2207      	movs	r2, #7
 8001ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	e000e010 	.word	0xe000e010

08001ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff ff47 	bl	8001d7c <__NVIC_SetPriorityGrouping>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b086      	sub	sp, #24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f08:	f7ff ff5c 	bl	8001dc4 <__NVIC_GetPriorityGrouping>
 8001f0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	68b9      	ldr	r1, [r7, #8]
 8001f12:	6978      	ldr	r0, [r7, #20]
 8001f14:	f7ff ff8e 	bl	8001e34 <NVIC_EncodePriority>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff5d 	bl	8001de0 <__NVIC_SetPriority>
}
 8001f26:	bf00      	nop
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ffb0 	bl	8001e9c <SysTick_Config>
 8001f3c:	4603      	mov	r3, r0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	e159      	b.n	8002218 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f64:	2201      	movs	r2, #1
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	f040 8148 	bne.w	8002212 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d005      	beq.n	8001f9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d130      	bne.n	8001ffc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	f003 0201 	and.w	r2, r3, #1
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	2b03      	cmp	r3, #3
 8002006:	d017      	beq.n	8002038 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	2203      	movs	r2, #3
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d123      	bne.n	800208c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	08da      	lsrs	r2, r3, #3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3208      	adds	r2, #8
 800204c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	220f      	movs	r2, #15
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	08da      	lsrs	r2, r3, #3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3208      	adds	r2, #8
 8002086:	69b9      	ldr	r1, [r7, #24]
 8002088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	2203      	movs	r2, #3
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 0203 	and.w	r2, r3, #3
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80a2 	beq.w	8002212 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	4b57      	ldr	r3, [pc, #348]	; (8002230 <HAL_GPIO_Init+0x2e8>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	4a56      	ldr	r2, [pc, #344]	; (8002230 <HAL_GPIO_Init+0x2e8>)
 80020d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020dc:	6453      	str	r3, [r2, #68]	; 0x44
 80020de:	4b54      	ldr	r3, [pc, #336]	; (8002230 <HAL_GPIO_Init+0x2e8>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ea:	4a52      	ldr	r2, [pc, #328]	; (8002234 <HAL_GPIO_Init+0x2ec>)
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	3302      	adds	r3, #2
 80020f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	220f      	movs	r2, #15
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a49      	ldr	r2, [pc, #292]	; (8002238 <HAL_GPIO_Init+0x2f0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d019      	beq.n	800214a <HAL_GPIO_Init+0x202>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a48      	ldr	r2, [pc, #288]	; (800223c <HAL_GPIO_Init+0x2f4>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d013      	beq.n	8002146 <HAL_GPIO_Init+0x1fe>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a47      	ldr	r2, [pc, #284]	; (8002240 <HAL_GPIO_Init+0x2f8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d00d      	beq.n	8002142 <HAL_GPIO_Init+0x1fa>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a46      	ldr	r2, [pc, #280]	; (8002244 <HAL_GPIO_Init+0x2fc>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d007      	beq.n	800213e <HAL_GPIO_Init+0x1f6>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a45      	ldr	r2, [pc, #276]	; (8002248 <HAL_GPIO_Init+0x300>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d101      	bne.n	800213a <HAL_GPIO_Init+0x1f2>
 8002136:	2304      	movs	r3, #4
 8002138:	e008      	b.n	800214c <HAL_GPIO_Init+0x204>
 800213a:	2307      	movs	r3, #7
 800213c:	e006      	b.n	800214c <HAL_GPIO_Init+0x204>
 800213e:	2303      	movs	r3, #3
 8002140:	e004      	b.n	800214c <HAL_GPIO_Init+0x204>
 8002142:	2302      	movs	r3, #2
 8002144:	e002      	b.n	800214c <HAL_GPIO_Init+0x204>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <HAL_GPIO_Init+0x204>
 800214a:	2300      	movs	r3, #0
 800214c:	69fa      	ldr	r2, [r7, #28]
 800214e:	f002 0203 	and.w	r2, r2, #3
 8002152:	0092      	lsls	r2, r2, #2
 8002154:	4093      	lsls	r3, r2
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800215c:	4935      	ldr	r1, [pc, #212]	; (8002234 <HAL_GPIO_Init+0x2ec>)
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	089b      	lsrs	r3, r3, #2
 8002162:	3302      	adds	r3, #2
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800216a:	4b38      	ldr	r3, [pc, #224]	; (800224c <HAL_GPIO_Init+0x304>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	43db      	mvns	r3, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4013      	ands	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800218e:	4a2f      	ldr	r2, [pc, #188]	; (800224c <HAL_GPIO_Init+0x304>)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002194:	4b2d      	ldr	r3, [pc, #180]	; (800224c <HAL_GPIO_Init+0x304>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021b8:	4a24      	ldr	r2, [pc, #144]	; (800224c <HAL_GPIO_Init+0x304>)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021be:	4b23      	ldr	r3, [pc, #140]	; (800224c <HAL_GPIO_Init+0x304>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021e2:	4a1a      	ldr	r2, [pc, #104]	; (800224c <HAL_GPIO_Init+0x304>)
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e8:	4b18      	ldr	r3, [pc, #96]	; (800224c <HAL_GPIO_Init+0x304>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800220c:	4a0f      	ldr	r2, [pc, #60]	; (800224c <HAL_GPIO_Init+0x304>)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3301      	adds	r3, #1
 8002216:	61fb      	str	r3, [r7, #28]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	2b0f      	cmp	r3, #15
 800221c:	f67f aea2 	bls.w	8001f64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002220:	bf00      	nop
 8002222:	bf00      	nop
 8002224:	3724      	adds	r7, #36	; 0x24
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40023800 	.word	0x40023800
 8002234:	40013800 	.word	0x40013800
 8002238:	40020000 	.word	0x40020000
 800223c:	40020400 	.word	0x40020400
 8002240:	40020800 	.word	0x40020800
 8002244:	40020c00 	.word	0x40020c00
 8002248:	40021000 	.word	0x40021000
 800224c:	40013c00 	.word	0x40013c00

08002250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	807b      	strh	r3, [r7, #2]
 800225c:	4613      	mov	r3, r2
 800225e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002260:	787b      	ldrb	r3, [r7, #1]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002266:	887a      	ldrh	r2, [r7, #2]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800226c:	e003      	b.n	8002276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800226e:	887b      	ldrh	r3, [r7, #2]
 8002270:	041a      	lsls	r2, r3, #16
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	619a      	str	r2, [r3, #24]
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
	...

08002284 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e12b      	b.n	80024ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d106      	bne.n	80022b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7fe fe56 	bl	8000f5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2224      	movs	r2, #36	; 0x24
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0201 	bic.w	r2, r2, #1
 80022c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022e8:	f001 f9b6 	bl	8003658 <HAL_RCC_GetPCLK1Freq>
 80022ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	4a81      	ldr	r2, [pc, #516]	; (80024f8 <HAL_I2C_Init+0x274>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d807      	bhi.n	8002308 <HAL_I2C_Init+0x84>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4a80      	ldr	r2, [pc, #512]	; (80024fc <HAL_I2C_Init+0x278>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	bf94      	ite	ls
 8002300:	2301      	movls	r3, #1
 8002302:	2300      	movhi	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	e006      	b.n	8002316 <HAL_I2C_Init+0x92>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4a7d      	ldr	r2, [pc, #500]	; (8002500 <HAL_I2C_Init+0x27c>)
 800230c:	4293      	cmp	r3, r2
 800230e:	bf94      	ite	ls
 8002310:	2301      	movls	r3, #1
 8002312:	2300      	movhi	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e0e7      	b.n	80024ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	4a78      	ldr	r2, [pc, #480]	; (8002504 <HAL_I2C_Init+0x280>)
 8002322:	fba2 2303 	umull	r2, r3, r2, r3
 8002326:	0c9b      	lsrs	r3, r3, #18
 8002328:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	430a      	orrs	r2, r1
 800233c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	4a6a      	ldr	r2, [pc, #424]	; (80024f8 <HAL_I2C_Init+0x274>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d802      	bhi.n	8002358 <HAL_I2C_Init+0xd4>
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	3301      	adds	r3, #1
 8002356:	e009      	b.n	800236c <HAL_I2C_Init+0xe8>
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	4a69      	ldr	r2, [pc, #420]	; (8002508 <HAL_I2C_Init+0x284>)
 8002364:	fba2 2303 	umull	r2, r3, r2, r3
 8002368:	099b      	lsrs	r3, r3, #6
 800236a:	3301      	adds	r3, #1
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	430b      	orrs	r3, r1
 8002372:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800237e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	495c      	ldr	r1, [pc, #368]	; (80024f8 <HAL_I2C_Init+0x274>)
 8002388:	428b      	cmp	r3, r1
 800238a:	d819      	bhi.n	80023c0 <HAL_I2C_Init+0x13c>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	1e59      	subs	r1, r3, #1
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	fbb1 f3f3 	udiv	r3, r1, r3
 800239a:	1c59      	adds	r1, r3, #1
 800239c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023a0:	400b      	ands	r3, r1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00a      	beq.n	80023bc <HAL_I2C_Init+0x138>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1e59      	subs	r1, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80023b4:	3301      	adds	r3, #1
 80023b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ba:	e051      	b.n	8002460 <HAL_I2C_Init+0x1dc>
 80023bc:	2304      	movs	r3, #4
 80023be:	e04f      	b.n	8002460 <HAL_I2C_Init+0x1dc>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d111      	bne.n	80023ec <HAL_I2C_Init+0x168>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	1e58      	subs	r0, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6859      	ldr	r1, [r3, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	440b      	add	r3, r1
 80023d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023da:	3301      	adds	r3, #1
 80023dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	bf0c      	ite	eq
 80023e4:	2301      	moveq	r3, #1
 80023e6:	2300      	movne	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	e012      	b.n	8002412 <HAL_I2C_Init+0x18e>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1e58      	subs	r0, r3, #1
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6859      	ldr	r1, [r3, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	0099      	lsls	r1, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002402:	3301      	adds	r3, #1
 8002404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002408:	2b00      	cmp	r3, #0
 800240a:	bf0c      	ite	eq
 800240c:	2301      	moveq	r3, #1
 800240e:	2300      	movne	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_I2C_Init+0x196>
 8002416:	2301      	movs	r3, #1
 8002418:	e022      	b.n	8002460 <HAL_I2C_Init+0x1dc>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10e      	bne.n	8002440 <HAL_I2C_Init+0x1bc>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1e58      	subs	r0, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6859      	ldr	r1, [r3, #4]
 800242a:	460b      	mov	r3, r1
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	440b      	add	r3, r1
 8002430:	fbb0 f3f3 	udiv	r3, r0, r3
 8002434:	3301      	adds	r3, #1
 8002436:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800243a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800243e:	e00f      	b.n	8002460 <HAL_I2C_Init+0x1dc>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	1e58      	subs	r0, r3, #1
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6859      	ldr	r1, [r3, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	0099      	lsls	r1, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	fbb0 f3f3 	udiv	r3, r0, r3
 8002456:	3301      	adds	r3, #1
 8002458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800245c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	6809      	ldr	r1, [r1, #0]
 8002464:	4313      	orrs	r3, r2
 8002466:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69da      	ldr	r2, [r3, #28]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800248e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6911      	ldr	r1, [r2, #16]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68d2      	ldr	r2, [r2, #12]
 800249a:	4311      	orrs	r1, r2
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	430b      	orrs	r3, r1
 80024a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695a      	ldr	r2, [r3, #20]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0201 	orr.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2220      	movs	r2, #32
 80024da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	000186a0 	.word	0x000186a0
 80024fc:	001e847f 	.word	0x001e847f
 8002500:	003d08ff 	.word	0x003d08ff
 8002504:	431bde83 	.word	0x431bde83
 8002508:	10624dd3 	.word	0x10624dd3

0800250c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b088      	sub	sp, #32
 8002510:	af02      	add	r7, sp, #8
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	607a      	str	r2, [r7, #4]
 8002516:	461a      	mov	r2, r3
 8002518:	460b      	mov	r3, r1
 800251a:	817b      	strh	r3, [r7, #10]
 800251c:	4613      	mov	r3, r2
 800251e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002520:	f7ff fbfc 	bl	8001d1c <HAL_GetTick>
 8002524:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b20      	cmp	r3, #32
 8002530:	f040 80e0 	bne.w	80026f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	2319      	movs	r3, #25
 800253a:	2201      	movs	r2, #1
 800253c:	4970      	ldr	r1, [pc, #448]	; (8002700 <HAL_I2C_Master_Transmit+0x1f4>)
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 fa92 	bl	8002a68 <I2C_WaitOnFlagUntilTimeout>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800254a:	2302      	movs	r3, #2
 800254c:	e0d3      	b.n	80026f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <HAL_I2C_Master_Transmit+0x50>
 8002558:	2302      	movs	r3, #2
 800255a:	e0cc      	b.n	80026f6 <HAL_I2C_Master_Transmit+0x1ea>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b01      	cmp	r3, #1
 8002570:	d007      	beq.n	8002582 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f042 0201 	orr.w	r2, r2, #1
 8002580:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002590:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2221      	movs	r2, #33	; 0x21
 8002596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2210      	movs	r2, #16
 800259e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	893a      	ldrh	r2, [r7, #8]
 80025b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	4a50      	ldr	r2, [pc, #320]	; (8002704 <HAL_I2C_Master_Transmit+0x1f8>)
 80025c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025c4:	8979      	ldrh	r1, [r7, #10]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	6a3a      	ldr	r2, [r7, #32]
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 f9ca 	bl	8002964 <I2C_MasterRequestWrite>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e08d      	b.n	80026f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025da:	2300      	movs	r3, #0
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025f0:	e066      	b.n	80026c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	6a39      	ldr	r1, [r7, #32]
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 fb0c 	bl	8002c14 <I2C_WaitOnTXEFlagUntilTimeout>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00d      	beq.n	800261e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	2b04      	cmp	r3, #4
 8002608:	d107      	bne.n	800261a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002618:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e06b      	b.n	80026f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	781a      	ldrb	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002638:	b29b      	uxth	r3, r3
 800263a:	3b01      	subs	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002646:	3b01      	subs	r3, #1
 8002648:	b29a      	uxth	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b04      	cmp	r3, #4
 800265a:	d11b      	bne.n	8002694 <HAL_I2C_Master_Transmit+0x188>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002660:	2b00      	cmp	r3, #0
 8002662:	d017      	beq.n	8002694 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	781a      	ldrb	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267e:	b29b      	uxth	r3, r3
 8002680:	3b01      	subs	r3, #1
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268c:	3b01      	subs	r3, #1
 800268e:	b29a      	uxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	6a39      	ldr	r1, [r7, #32]
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 fafc 	bl	8002c96 <I2C_WaitOnBTFFlagUntilTimeout>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00d      	beq.n	80026c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d107      	bne.n	80026bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e01a      	b.n	80026f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d194      	bne.n	80025f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026f0:	2300      	movs	r3, #0
 80026f2:	e000      	b.n	80026f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026f4:	2302      	movs	r3, #2
  }
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	00100002 	.word	0x00100002
 8002704:	ffff0000 	.word	0xffff0000

08002708 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08a      	sub	sp, #40	; 0x28
 800270c:	af02      	add	r7, sp, #8
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	607a      	str	r2, [r7, #4]
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	460b      	mov	r3, r1
 8002716:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002718:	f7ff fb00 	bl	8001d1c <HAL_GetTick>
 800271c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800271e:	2300      	movs	r3, #0
 8002720:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b20      	cmp	r3, #32
 800272c:	f040 8111 	bne.w	8002952 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	2319      	movs	r3, #25
 8002736:	2201      	movs	r2, #1
 8002738:	4988      	ldr	r1, [pc, #544]	; (800295c <HAL_I2C_IsDeviceReady+0x254>)
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f994 	bl	8002a68 <I2C_WaitOnFlagUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002746:	2302      	movs	r3, #2
 8002748:	e104      	b.n	8002954 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_I2C_IsDeviceReady+0x50>
 8002754:	2302      	movs	r3, #2
 8002756:	e0fd      	b.n	8002954 <HAL_I2C_IsDeviceReady+0x24c>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b01      	cmp	r3, #1
 800276c:	d007      	beq.n	800277e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f042 0201 	orr.w	r2, r2, #1
 800277c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800278c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2224      	movs	r2, #36	; 0x24
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4a70      	ldr	r2, [pc, #448]	; (8002960 <HAL_I2C_IsDeviceReady+0x258>)
 80027a0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027b0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 f952 	bl	8002a68 <I2C_WaitOnFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00d      	beq.n	80027e6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027d8:	d103      	bne.n	80027e2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027e0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e0b6      	b.n	8002954 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027e6:	897b      	ldrh	r3, [r7, #10]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	461a      	mov	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027f4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80027f6:	f7ff fa91 	bl	8001d1c <HAL_GetTick>
 80027fa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b02      	cmp	r3, #2
 8002808:	bf0c      	ite	eq
 800280a:	2301      	moveq	r3, #1
 800280c:	2300      	movne	r3, #0
 800280e:	b2db      	uxtb	r3, r3
 8002810:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800281c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002820:	bf0c      	ite	eq
 8002822:	2301      	moveq	r3, #1
 8002824:	2300      	movne	r3, #0
 8002826:	b2db      	uxtb	r3, r3
 8002828:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800282a:	e025      	b.n	8002878 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800282c:	f7ff fa76 	bl	8001d1c <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d302      	bcc.n	8002842 <HAL_I2C_IsDeviceReady+0x13a>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d103      	bne.n	800284a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	22a0      	movs	r2, #160	; 0xa0
 8002846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b02      	cmp	r3, #2
 8002856:	bf0c      	ite	eq
 8002858:	2301      	moveq	r3, #1
 800285a:	2300      	movne	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800286a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800286e:	bf0c      	ite	eq
 8002870:	2301      	moveq	r3, #1
 8002872:	2300      	movne	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2ba0      	cmp	r3, #160	; 0xa0
 8002882:	d005      	beq.n	8002890 <HAL_I2C_IsDeviceReady+0x188>
 8002884:	7dfb      	ldrb	r3, [r7, #23]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d102      	bne.n	8002890 <HAL_I2C_IsDeviceReady+0x188>
 800288a:	7dbb      	ldrb	r3, [r7, #22]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0cd      	beq.n	800282c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d129      	bne.n	80028fa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	2319      	movs	r3, #25
 80028d2:	2201      	movs	r2, #1
 80028d4:	4921      	ldr	r1, [pc, #132]	; (800295c <HAL_I2C_IsDeviceReady+0x254>)
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f8c6 	bl	8002a68 <I2C_WaitOnFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e036      	b.n	8002954 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2220      	movs	r2, #32
 80028ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	e02c      	b.n	8002954 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002908:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002912:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	2319      	movs	r3, #25
 800291a:	2201      	movs	r2, #1
 800291c:	490f      	ldr	r1, [pc, #60]	; (800295c <HAL_I2C_IsDeviceReady+0x254>)
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f8a2 	bl	8002a68 <I2C_WaitOnFlagUntilTimeout>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e012      	b.n	8002954 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	3301      	adds	r3, #1
 8002932:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	429a      	cmp	r2, r3
 800293a:	f4ff af32 	bcc.w	80027a2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2220      	movs	r2, #32
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002952:	2302      	movs	r3, #2
  }
}
 8002954:	4618      	mov	r0, r3
 8002956:	3720      	adds	r7, #32
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	00100002 	.word	0x00100002
 8002960:	ffff0000 	.word	0xffff0000

08002964 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af02      	add	r7, sp, #8
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	607a      	str	r2, [r7, #4]
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	460b      	mov	r3, r1
 8002972:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002978:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2b08      	cmp	r3, #8
 800297e:	d006      	beq.n	800298e <I2C_MasterRequestWrite+0x2a>
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d003      	beq.n	800298e <I2C_MasterRequestWrite+0x2a>
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800298c:	d108      	bne.n	80029a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	e00b      	b.n	80029b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	2b12      	cmp	r3, #18
 80029a6:	d107      	bne.n	80029b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 f84f 	bl	8002a68 <I2C_WaitOnFlagUntilTimeout>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00d      	beq.n	80029ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029de:	d103      	bne.n	80029e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e035      	b.n	8002a58 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029f4:	d108      	bne.n	8002a08 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029f6:	897b      	ldrh	r3, [r7, #10]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	461a      	mov	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a04:	611a      	str	r2, [r3, #16]
 8002a06:	e01b      	b.n	8002a40 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a08:	897b      	ldrh	r3, [r7, #10]
 8002a0a:	11db      	asrs	r3, r3, #7
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	f003 0306 	and.w	r3, r3, #6
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	f063 030f 	orn	r3, r3, #15
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	490e      	ldr	r1, [pc, #56]	; (8002a60 <I2C_MasterRequestWrite+0xfc>)
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 f875 	bl	8002b16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e010      	b.n	8002a58 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a36:	897b      	ldrh	r3, [r7, #10]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	4907      	ldr	r1, [pc, #28]	; (8002a64 <I2C_MasterRequestWrite+0x100>)
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f865 	bl	8002b16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	00010008 	.word	0x00010008
 8002a64:	00010002 	.word	0x00010002

08002a68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	4613      	mov	r3, r2
 8002a76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a78:	e025      	b.n	8002ac6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a80:	d021      	beq.n	8002ac6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a82:	f7ff f94b 	bl	8001d1c <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d302      	bcc.n	8002a98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d116      	bne.n	8002ac6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f043 0220 	orr.w	r2, r3, #32
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e023      	b.n	8002b0e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	0c1b      	lsrs	r3, r3, #16
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d10d      	bne.n	8002aec <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	43da      	mvns	r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	4013      	ands	r3, r2
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	bf0c      	ite	eq
 8002ae2:	2301      	moveq	r3, #1
 8002ae4:	2300      	movne	r3, #0
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	461a      	mov	r2, r3
 8002aea:	e00c      	b.n	8002b06 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	43da      	mvns	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	4013      	ands	r3, r2
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	bf0c      	ite	eq
 8002afe:	2301      	moveq	r3, #1
 8002b00:	2300      	movne	r3, #0
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	461a      	mov	r2, r3
 8002b06:	79fb      	ldrb	r3, [r7, #7]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d0b6      	beq.n	8002a7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b084      	sub	sp, #16
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	607a      	str	r2, [r7, #4]
 8002b22:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b24:	e051      	b.n	8002bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b34:	d123      	bne.n	8002b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b44:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b4e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f043 0204 	orr.w	r2, r3, #4
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e046      	b.n	8002c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b84:	d021      	beq.n	8002bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b86:	f7ff f8c9 	bl	8001d1c <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d302      	bcc.n	8002b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d116      	bne.n	8002bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f043 0220 	orr.w	r2, r3, #32
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e020      	b.n	8002c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	0c1b      	lsrs	r3, r3, #16
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d10c      	bne.n	8002bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	43da      	mvns	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4013      	ands	r3, r2
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	bf14      	ite	ne
 8002be6:	2301      	movne	r3, #1
 8002be8:	2300      	moveq	r3, #0
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	e00b      	b.n	8002c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	43da      	mvns	r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	bf14      	ite	ne
 8002c00:	2301      	movne	r3, #1
 8002c02:	2300      	moveq	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d18d      	bne.n	8002b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c20:	e02d      	b.n	8002c7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f878 	bl	8002d18 <I2C_IsAcknowledgeFailed>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e02d      	b.n	8002c8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c38:	d021      	beq.n	8002c7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c3a:	f7ff f86f 	bl	8001d1c <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d302      	bcc.n	8002c50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d116      	bne.n	8002c7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f043 0220 	orr.w	r2, r3, #32
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e007      	b.n	8002c8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c88:	2b80      	cmp	r3, #128	; 0x80
 8002c8a:	d1ca      	bne.n	8002c22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b084      	sub	sp, #16
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ca2:	e02d      	b.n	8002d00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 f837 	bl	8002d18 <I2C_IsAcknowledgeFailed>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e02d      	b.n	8002d10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cba:	d021      	beq.n	8002d00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cbc:	f7ff f82e 	bl	8001d1c <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d302      	bcc.n	8002cd2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d116      	bne.n	8002d00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	f043 0220 	orr.w	r2, r3, #32
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e007      	b.n	8002d10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d1ca      	bne.n	8002ca4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d2e:	d11b      	bne.n	8002d68 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d38:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	f043 0204 	orr.w	r2, r3, #4
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e000      	b.n	8002d6a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
	...

08002d78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e267      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d075      	beq.n	8002e82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d96:	4b88      	ldr	r3, [pc, #544]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d00c      	beq.n	8002dbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002da2:	4b85      	ldr	r3, [pc, #532]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d112      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dae:	4b82      	ldr	r3, [pc, #520]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dba:	d10b      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dbc:	4b7e      	ldr	r3, [pc, #504]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d05b      	beq.n	8002e80 <HAL_RCC_OscConfig+0x108>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d157      	bne.n	8002e80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e242      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ddc:	d106      	bne.n	8002dec <HAL_RCC_OscConfig+0x74>
 8002dde:	4b76      	ldr	r3, [pc, #472]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a75      	ldr	r2, [pc, #468]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	e01d      	b.n	8002e28 <HAL_RCC_OscConfig+0xb0>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002df4:	d10c      	bne.n	8002e10 <HAL_RCC_OscConfig+0x98>
 8002df6:	4b70      	ldr	r3, [pc, #448]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a6f      	ldr	r2, [pc, #444]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	4b6d      	ldr	r3, [pc, #436]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a6c      	ldr	r2, [pc, #432]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	e00b      	b.n	8002e28 <HAL_RCC_OscConfig+0xb0>
 8002e10:	4b69      	ldr	r3, [pc, #420]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a68      	ldr	r2, [pc, #416]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e1a:	6013      	str	r3, [r2, #0]
 8002e1c:	4b66      	ldr	r3, [pc, #408]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a65      	ldr	r2, [pc, #404]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d013      	beq.n	8002e58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7fe ff74 	bl	8001d1c <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e38:	f7fe ff70 	bl	8001d1c <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b64      	cmp	r3, #100	; 0x64
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e207      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4a:	4b5b      	ldr	r3, [pc, #364]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0xc0>
 8002e56:	e014      	b.n	8002e82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e58:	f7fe ff60 	bl	8001d1c <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e60:	f7fe ff5c 	bl	8001d1c <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b64      	cmp	r3, #100	; 0x64
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e1f3      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e72:	4b51      	ldr	r3, [pc, #324]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0xe8>
 8002e7e:	e000      	b.n	8002e82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d063      	beq.n	8002f56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e8e:	4b4a      	ldr	r3, [pc, #296]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00b      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e9a:	4b47      	ldr	r3, [pc, #284]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	d11c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ea6:	4b44      	ldr	r3, [pc, #272]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d116      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb2:	4b41      	ldr	r3, [pc, #260]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d005      	beq.n	8002eca <HAL_RCC_OscConfig+0x152>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d001      	beq.n	8002eca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e1c7      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eca:	4b3b      	ldr	r3, [pc, #236]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	4937      	ldr	r1, [pc, #220]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ede:	e03a      	b.n	8002f56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d020      	beq.n	8002f2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ee8:	4b34      	ldr	r3, [pc, #208]	; (8002fbc <HAL_RCC_OscConfig+0x244>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eee:	f7fe ff15 	bl	8001d1c <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ef6:	f7fe ff11 	bl	8001d1c <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e1a8      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f08:	4b2b      	ldr	r3, [pc, #172]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0f0      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f14:	4b28      	ldr	r3, [pc, #160]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	4925      	ldr	r1, [pc, #148]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	600b      	str	r3, [r1, #0]
 8002f28:	e015      	b.n	8002f56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f2a:	4b24      	ldr	r3, [pc, #144]	; (8002fbc <HAL_RCC_OscConfig+0x244>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f30:	f7fe fef4 	bl	8001d1c <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f38:	f7fe fef0 	bl	8001d1c <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e187      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f4a:	4b1b      	ldr	r3, [pc, #108]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d036      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d016      	beq.n	8002f98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f6a:	4b15      	ldr	r3, [pc, #84]	; (8002fc0 <HAL_RCC_OscConfig+0x248>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f70:	f7fe fed4 	bl	8001d1c <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f78:	f7fe fed0 	bl	8001d1c <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e167      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0x200>
 8002f96:	e01b      	b.n	8002fd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f98:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <HAL_RCC_OscConfig+0x248>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9e:	f7fe febd 	bl	8001d1c <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa4:	e00e      	b.n	8002fc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fa6:	f7fe feb9 	bl	8001d1c <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d907      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e150      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	42470000 	.word	0x42470000
 8002fc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc4:	4b88      	ldr	r3, [pc, #544]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 8002fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1ea      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 8097 	beq.w	800310c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fe2:	4b81      	ldr	r3, [pc, #516]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10f      	bne.n	800300e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60bb      	str	r3, [r7, #8]
 8002ff2:	4b7d      	ldr	r3, [pc, #500]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	4a7c      	ldr	r2, [pc, #496]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ffe:	4b7a      	ldr	r3, [pc, #488]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003006:	60bb      	str	r3, [r7, #8]
 8003008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800300a:	2301      	movs	r3, #1
 800300c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300e:	4b77      	ldr	r3, [pc, #476]	; (80031ec <HAL_RCC_OscConfig+0x474>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d118      	bne.n	800304c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800301a:	4b74      	ldr	r3, [pc, #464]	; (80031ec <HAL_RCC_OscConfig+0x474>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a73      	ldr	r2, [pc, #460]	; (80031ec <HAL_RCC_OscConfig+0x474>)
 8003020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003026:	f7fe fe79 	bl	8001d1c <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302e:	f7fe fe75 	bl	8001d1c <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e10c      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003040:	4b6a      	ldr	r3, [pc, #424]	; (80031ec <HAL_RCC_OscConfig+0x474>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0f0      	beq.n	800302e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d106      	bne.n	8003062 <HAL_RCC_OscConfig+0x2ea>
 8003054:	4b64      	ldr	r3, [pc, #400]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003058:	4a63      	ldr	r2, [pc, #396]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	6713      	str	r3, [r2, #112]	; 0x70
 8003060:	e01c      	b.n	800309c <HAL_RCC_OscConfig+0x324>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b05      	cmp	r3, #5
 8003068:	d10c      	bne.n	8003084 <HAL_RCC_OscConfig+0x30c>
 800306a:	4b5f      	ldr	r3, [pc, #380]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306e:	4a5e      	ldr	r2, [pc, #376]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003070:	f043 0304 	orr.w	r3, r3, #4
 8003074:	6713      	str	r3, [r2, #112]	; 0x70
 8003076:	4b5c      	ldr	r3, [pc, #368]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307a:	4a5b      	ldr	r2, [pc, #364]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	6713      	str	r3, [r2, #112]	; 0x70
 8003082:	e00b      	b.n	800309c <HAL_RCC_OscConfig+0x324>
 8003084:	4b58      	ldr	r3, [pc, #352]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003088:	4a57      	ldr	r2, [pc, #348]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 800308a:	f023 0301 	bic.w	r3, r3, #1
 800308e:	6713      	str	r3, [r2, #112]	; 0x70
 8003090:	4b55      	ldr	r3, [pc, #340]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003094:	4a54      	ldr	r2, [pc, #336]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003096:	f023 0304 	bic.w	r3, r3, #4
 800309a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d015      	beq.n	80030d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a4:	f7fe fe3a 	bl	8001d1c <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030aa:	e00a      	b.n	80030c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ac:	f7fe fe36 	bl	8001d1c <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e0cb      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c2:	4b49      	ldr	r3, [pc, #292]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 80030c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0ee      	beq.n	80030ac <HAL_RCC_OscConfig+0x334>
 80030ce:	e014      	b.n	80030fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d0:	f7fe fe24 	bl	8001d1c <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d6:	e00a      	b.n	80030ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d8:	f7fe fe20 	bl	8001d1c <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e0b5      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ee:	4b3e      	ldr	r3, [pc, #248]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 80030f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1ee      	bne.n	80030d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030fa:	7dfb      	ldrb	r3, [r7, #23]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d105      	bne.n	800310c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003100:	4b39      	ldr	r3, [pc, #228]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	4a38      	ldr	r2, [pc, #224]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003106:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800310a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 80a1 	beq.w	8003258 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003116:	4b34      	ldr	r3, [pc, #208]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	2b08      	cmp	r3, #8
 8003120:	d05c      	beq.n	80031dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	2b02      	cmp	r3, #2
 8003128:	d141      	bne.n	80031ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800312a:	4b31      	ldr	r3, [pc, #196]	; (80031f0 <HAL_RCC_OscConfig+0x478>)
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7fe fdf4 	bl	8001d1c <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003138:	f7fe fdf0 	bl	8001d1c <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e087      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314a:	4b27      	ldr	r3, [pc, #156]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69da      	ldr	r2, [r3, #28]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	019b      	lsls	r3, r3, #6
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316c:	085b      	lsrs	r3, r3, #1
 800316e:	3b01      	subs	r3, #1
 8003170:	041b      	lsls	r3, r3, #16
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	061b      	lsls	r3, r3, #24
 800317a:	491b      	ldr	r1, [pc, #108]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 800317c:	4313      	orrs	r3, r2
 800317e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003180:	4b1b      	ldr	r3, [pc, #108]	; (80031f0 <HAL_RCC_OscConfig+0x478>)
 8003182:	2201      	movs	r2, #1
 8003184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003186:	f7fe fdc9 	bl	8001d1c <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800318e:	f7fe fdc5 	bl	8001d1c <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e05c      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a0:	4b11      	ldr	r3, [pc, #68]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0f0      	beq.n	800318e <HAL_RCC_OscConfig+0x416>
 80031ac:	e054      	b.n	8003258 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ae:	4b10      	ldr	r3, [pc, #64]	; (80031f0 <HAL_RCC_OscConfig+0x478>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b4:	f7fe fdb2 	bl	8001d1c <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031bc:	f7fe fdae 	bl	8001d1c <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e045      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ce:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f0      	bne.n	80031bc <HAL_RCC_OscConfig+0x444>
 80031da:	e03d      	b.n	8003258 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d107      	bne.n	80031f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e038      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40007000 	.word	0x40007000
 80031f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031f4:	4b1b      	ldr	r3, [pc, #108]	; (8003264 <HAL_RCC_OscConfig+0x4ec>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d028      	beq.n	8003254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800320c:	429a      	cmp	r2, r3
 800320e:	d121      	bne.n	8003254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321a:	429a      	cmp	r2, r3
 800321c:	d11a      	bne.n	8003254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003224:	4013      	ands	r3, r2
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800322a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800322c:	4293      	cmp	r3, r2
 800322e:	d111      	bne.n	8003254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323a:	085b      	lsrs	r3, r3, #1
 800323c:	3b01      	subs	r3, #1
 800323e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003240:	429a      	cmp	r2, r3
 8003242:	d107      	bne.n	8003254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003250:	429a      	cmp	r2, r3
 8003252:	d001      	beq.n	8003258 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40023800 	.word	0x40023800

08003268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0cc      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800327c:	4b68      	ldr	r3, [pc, #416]	; (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d90c      	bls.n	80032a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328a:	4b65      	ldr	r3, [pc, #404]	; (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003292:	4b63      	ldr	r3, [pc, #396]	; (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0b8      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d020      	beq.n	80032f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032bc:	4b59      	ldr	r3, [pc, #356]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4a58      	ldr	r2, [pc, #352]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032d4:	4b53      	ldr	r3, [pc, #332]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	4a52      	ldr	r2, [pc, #328]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032e0:	4b50      	ldr	r3, [pc, #320]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	494d      	ldr	r1, [pc, #308]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d044      	beq.n	8003388 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d107      	bne.n	8003316 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003306:	4b47      	ldr	r3, [pc, #284]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d119      	bne.n	8003346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e07f      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b02      	cmp	r3, #2
 800331c:	d003      	beq.n	8003326 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003322:	2b03      	cmp	r3, #3
 8003324:	d107      	bne.n	8003336 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003326:	4b3f      	ldr	r3, [pc, #252]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d109      	bne.n	8003346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e06f      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003336:	4b3b      	ldr	r3, [pc, #236]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e067      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003346:	4b37      	ldr	r3, [pc, #220]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f023 0203 	bic.w	r2, r3, #3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	4934      	ldr	r1, [pc, #208]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	4313      	orrs	r3, r2
 8003356:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003358:	f7fe fce0 	bl	8001d1c <HAL_GetTick>
 800335c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335e:	e00a      	b.n	8003376 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003360:	f7fe fcdc 	bl	8001d1c <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	f241 3288 	movw	r2, #5000	; 0x1388
 800336e:	4293      	cmp	r3, r2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e04f      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003376:	4b2b      	ldr	r3, [pc, #172]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 020c 	and.w	r2, r3, #12
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	429a      	cmp	r2, r3
 8003386:	d1eb      	bne.n	8003360 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003388:	4b25      	ldr	r3, [pc, #148]	; (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d20c      	bcs.n	80033b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003396:	4b22      	ldr	r3, [pc, #136]	; (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800339e:	4b20      	ldr	r3, [pc, #128]	; (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d001      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e032      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033bc:	4b19      	ldr	r3, [pc, #100]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4916      	ldr	r1, [pc, #88]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d009      	beq.n	80033ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033da:	4b12      	ldr	r3, [pc, #72]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	490e      	ldr	r1, [pc, #56]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033ee:	f000 f821 	bl	8003434 <HAL_RCC_GetSysClockFreq>
 80033f2:	4602      	mov	r2, r0
 80033f4:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	490a      	ldr	r1, [pc, #40]	; (8003428 <HAL_RCC_ClockConfig+0x1c0>)
 8003400:	5ccb      	ldrb	r3, [r1, r3]
 8003402:	fa22 f303 	lsr.w	r3, r2, r3
 8003406:	4a09      	ldr	r2, [pc, #36]	; (800342c <HAL_RCC_ClockConfig+0x1c4>)
 8003408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800340a:	4b09      	ldr	r3, [pc, #36]	; (8003430 <HAL_RCC_ClockConfig+0x1c8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f7fe fc40 	bl	8001c94 <HAL_InitTick>

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40023c00 	.word	0x40023c00
 8003424:	40023800 	.word	0x40023800
 8003428:	08005f58 	.word	0x08005f58
 800342c:	20000000 	.word	0x20000000
 8003430:	2000001c 	.word	0x2000001c

08003434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003438:	b094      	sub	sp, #80	; 0x50
 800343a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	647b      	str	r3, [r7, #68]	; 0x44
 8003440:	2300      	movs	r3, #0
 8003442:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003444:	2300      	movs	r3, #0
 8003446:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800344c:	4b79      	ldr	r3, [pc, #484]	; (8003634 <HAL_RCC_GetSysClockFreq+0x200>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 030c 	and.w	r3, r3, #12
 8003454:	2b08      	cmp	r3, #8
 8003456:	d00d      	beq.n	8003474 <HAL_RCC_GetSysClockFreq+0x40>
 8003458:	2b08      	cmp	r3, #8
 800345a:	f200 80e1 	bhi.w	8003620 <HAL_RCC_GetSysClockFreq+0x1ec>
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x34>
 8003462:	2b04      	cmp	r3, #4
 8003464:	d003      	beq.n	800346e <HAL_RCC_GetSysClockFreq+0x3a>
 8003466:	e0db      	b.n	8003620 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003468:	4b73      	ldr	r3, [pc, #460]	; (8003638 <HAL_RCC_GetSysClockFreq+0x204>)
 800346a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800346c:	e0db      	b.n	8003626 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800346e:	4b73      	ldr	r3, [pc, #460]	; (800363c <HAL_RCC_GetSysClockFreq+0x208>)
 8003470:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003472:	e0d8      	b.n	8003626 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003474:	4b6f      	ldr	r3, [pc, #444]	; (8003634 <HAL_RCC_GetSysClockFreq+0x200>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800347c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800347e:	4b6d      	ldr	r3, [pc, #436]	; (8003634 <HAL_RCC_GetSysClockFreq+0x200>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d063      	beq.n	8003552 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800348a:	4b6a      	ldr	r3, [pc, #424]	; (8003634 <HAL_RCC_GetSysClockFreq+0x200>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	099b      	lsrs	r3, r3, #6
 8003490:	2200      	movs	r2, #0
 8003492:	63bb      	str	r3, [r7, #56]	; 0x38
 8003494:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800349c:	633b      	str	r3, [r7, #48]	; 0x30
 800349e:	2300      	movs	r3, #0
 80034a0:	637b      	str	r3, [r7, #52]	; 0x34
 80034a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034a6:	4622      	mov	r2, r4
 80034a8:	462b      	mov	r3, r5
 80034aa:	f04f 0000 	mov.w	r0, #0
 80034ae:	f04f 0100 	mov.w	r1, #0
 80034b2:	0159      	lsls	r1, r3, #5
 80034b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034b8:	0150      	lsls	r0, r2, #5
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	4621      	mov	r1, r4
 80034c0:	1a51      	subs	r1, r2, r1
 80034c2:	6139      	str	r1, [r7, #16]
 80034c4:	4629      	mov	r1, r5
 80034c6:	eb63 0301 	sbc.w	r3, r3, r1
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034d8:	4659      	mov	r1, fp
 80034da:	018b      	lsls	r3, r1, #6
 80034dc:	4651      	mov	r1, sl
 80034de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034e2:	4651      	mov	r1, sl
 80034e4:	018a      	lsls	r2, r1, #6
 80034e6:	4651      	mov	r1, sl
 80034e8:	ebb2 0801 	subs.w	r8, r2, r1
 80034ec:	4659      	mov	r1, fp
 80034ee:	eb63 0901 	sbc.w	r9, r3, r1
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003502:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003506:	4690      	mov	r8, r2
 8003508:	4699      	mov	r9, r3
 800350a:	4623      	mov	r3, r4
 800350c:	eb18 0303 	adds.w	r3, r8, r3
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	462b      	mov	r3, r5
 8003514:	eb49 0303 	adc.w	r3, r9, r3
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	f04f 0300 	mov.w	r3, #0
 8003522:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003526:	4629      	mov	r1, r5
 8003528:	024b      	lsls	r3, r1, #9
 800352a:	4621      	mov	r1, r4
 800352c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003530:	4621      	mov	r1, r4
 8003532:	024a      	lsls	r2, r1, #9
 8003534:	4610      	mov	r0, r2
 8003536:	4619      	mov	r1, r3
 8003538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800353a:	2200      	movs	r2, #0
 800353c:	62bb      	str	r3, [r7, #40]	; 0x28
 800353e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003540:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003544:	f7fc fe9c 	bl	8000280 <__aeabi_uldivmod>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	4613      	mov	r3, r2
 800354e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003550:	e058      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003552:	4b38      	ldr	r3, [pc, #224]	; (8003634 <HAL_RCC_GetSysClockFreq+0x200>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	099b      	lsrs	r3, r3, #6
 8003558:	2200      	movs	r2, #0
 800355a:	4618      	mov	r0, r3
 800355c:	4611      	mov	r1, r2
 800355e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003562:	623b      	str	r3, [r7, #32]
 8003564:	2300      	movs	r3, #0
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
 8003568:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800356c:	4642      	mov	r2, r8
 800356e:	464b      	mov	r3, r9
 8003570:	f04f 0000 	mov.w	r0, #0
 8003574:	f04f 0100 	mov.w	r1, #0
 8003578:	0159      	lsls	r1, r3, #5
 800357a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800357e:	0150      	lsls	r0, r2, #5
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4641      	mov	r1, r8
 8003586:	ebb2 0a01 	subs.w	sl, r2, r1
 800358a:	4649      	mov	r1, r9
 800358c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800359c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035a4:	ebb2 040a 	subs.w	r4, r2, sl
 80035a8:	eb63 050b 	sbc.w	r5, r3, fp
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	00eb      	lsls	r3, r5, #3
 80035b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ba:	00e2      	lsls	r2, r4, #3
 80035bc:	4614      	mov	r4, r2
 80035be:	461d      	mov	r5, r3
 80035c0:	4643      	mov	r3, r8
 80035c2:	18e3      	adds	r3, r4, r3
 80035c4:	603b      	str	r3, [r7, #0]
 80035c6:	464b      	mov	r3, r9
 80035c8:	eb45 0303 	adc.w	r3, r5, r3
 80035cc:	607b      	str	r3, [r7, #4]
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035da:	4629      	mov	r1, r5
 80035dc:	028b      	lsls	r3, r1, #10
 80035de:	4621      	mov	r1, r4
 80035e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035e4:	4621      	mov	r1, r4
 80035e6:	028a      	lsls	r2, r1, #10
 80035e8:	4610      	mov	r0, r2
 80035ea:	4619      	mov	r1, r3
 80035ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ee:	2200      	movs	r2, #0
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	61fa      	str	r2, [r7, #28]
 80035f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035f8:	f7fc fe42 	bl	8000280 <__aeabi_uldivmod>
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	4613      	mov	r3, r2
 8003602:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003604:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <HAL_RCC_GetSysClockFreq+0x200>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	0c1b      	lsrs	r3, r3, #16
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	3301      	adds	r3, #1
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003614:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003618:	fbb2 f3f3 	udiv	r3, r2, r3
 800361c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800361e:	e002      	b.n	8003626 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003620:	4b05      	ldr	r3, [pc, #20]	; (8003638 <HAL_RCC_GetSysClockFreq+0x204>)
 8003622:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003624:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003628:	4618      	mov	r0, r3
 800362a:	3750      	adds	r7, #80	; 0x50
 800362c:	46bd      	mov	sp, r7
 800362e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003632:	bf00      	nop
 8003634:	40023800 	.word	0x40023800
 8003638:	00f42400 	.word	0x00f42400
 800363c:	007a1200 	.word	0x007a1200

08003640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003644:	4b03      	ldr	r3, [pc, #12]	; (8003654 <HAL_RCC_GetHCLKFreq+0x14>)
 8003646:	681b      	ldr	r3, [r3, #0]
}
 8003648:	4618      	mov	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	20000000 	.word	0x20000000

08003658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800365c:	f7ff fff0 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 8003660:	4602      	mov	r2, r0
 8003662:	4b05      	ldr	r3, [pc, #20]	; (8003678 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	0a9b      	lsrs	r3, r3, #10
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	4903      	ldr	r1, [pc, #12]	; (800367c <HAL_RCC_GetPCLK1Freq+0x24>)
 800366e:	5ccb      	ldrb	r3, [r1, r3]
 8003670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003674:	4618      	mov	r0, r3
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40023800 	.word	0x40023800
 800367c:	08005f68 	.word	0x08005f68

08003680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003684:	f7ff ffdc 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 8003688:	4602      	mov	r2, r0
 800368a:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	0b5b      	lsrs	r3, r3, #13
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	4903      	ldr	r1, [pc, #12]	; (80036a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003696:	5ccb      	ldrb	r3, [r1, r3]
 8003698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800369c:	4618      	mov	r0, r3
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40023800 	.word	0x40023800
 80036a4:	08005f68 	.word	0x08005f68

080036a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e03f      	b.n	800373a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d106      	bne.n	80036d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7fd fca0 	bl	8001014 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2224      	movs	r2, #36	; 0x24
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f929 	bl	8003944 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003700:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695a      	ldr	r2, [r3, #20]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003710:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003720:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b08a      	sub	sp, #40	; 0x28
 8003746:	af02      	add	r7, sp, #8
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	603b      	str	r3, [r7, #0]
 800374e:	4613      	mov	r3, r2
 8003750:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b20      	cmp	r3, #32
 8003760:	d17c      	bne.n	800385c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d002      	beq.n	800376e <HAL_UART_Transmit+0x2c>
 8003768:	88fb      	ldrh	r3, [r7, #6]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e075      	b.n	800385e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_UART_Transmit+0x3e>
 800377c:	2302      	movs	r3, #2
 800377e:	e06e      	b.n	800385e <HAL_UART_Transmit+0x11c>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2221      	movs	r2, #33	; 0x21
 8003792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003796:	f7fe fac1 	bl	8001d1c <HAL_GetTick>
 800379a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	88fa      	ldrh	r2, [r7, #6]
 80037a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	88fa      	ldrh	r2, [r7, #6]
 80037a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b0:	d108      	bne.n	80037c4 <HAL_UART_Transmit+0x82>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d104      	bne.n	80037c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	61bb      	str	r3, [r7, #24]
 80037c2:	e003      	b.n	80037cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037c8:	2300      	movs	r3, #0
 80037ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80037d4:	e02a      	b.n	800382c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2200      	movs	r2, #0
 80037de:	2180      	movs	r1, #128	; 0x80
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 f840 	bl	8003866 <UART_WaitOnFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e036      	b.n	800385e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10b      	bne.n	800380e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003804:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	3302      	adds	r3, #2
 800380a:	61bb      	str	r3, [r7, #24]
 800380c:	e007      	b.n	800381e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	781a      	ldrb	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	3301      	adds	r3, #1
 800381c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003822:	b29b      	uxth	r3, r3
 8003824:	3b01      	subs	r3, #1
 8003826:	b29a      	uxth	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1cf      	bne.n	80037d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2200      	movs	r2, #0
 800383e:	2140      	movs	r1, #64	; 0x40
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f810 	bl	8003866 <UART_WaitOnFlagUntilTimeout>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e006      	b.n	800385e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003858:	2300      	movs	r3, #0
 800385a:	e000      	b.n	800385e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800385c:	2302      	movs	r3, #2
  }
}
 800385e:	4618      	mov	r0, r3
 8003860:	3720      	adds	r7, #32
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b090      	sub	sp, #64	; 0x40
 800386a:	af00      	add	r7, sp, #0
 800386c:	60f8      	str	r0, [r7, #12]
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	603b      	str	r3, [r7, #0]
 8003872:	4613      	mov	r3, r2
 8003874:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003876:	e050      	b.n	800391a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800387a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387e:	d04c      	beq.n	800391a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003882:	2b00      	cmp	r3, #0
 8003884:	d007      	beq.n	8003896 <UART_WaitOnFlagUntilTimeout+0x30>
 8003886:	f7fe fa49 	bl	8001d1c <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003892:	429a      	cmp	r2, r3
 8003894:	d241      	bcs.n	800391a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	330c      	adds	r3, #12
 800389c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a0:	e853 3f00 	ldrex	r3, [r3]
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	330c      	adds	r3, #12
 80038b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038b6:	637a      	str	r2, [r7, #52]	; 0x34
 80038b8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038be:	e841 2300 	strex	r3, r2, [r1]
 80038c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1e5      	bne.n	8003896 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	3314      	adds	r3, #20
 80038d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	e853 3f00 	ldrex	r3, [r3]
 80038d8:	613b      	str	r3, [r7, #16]
   return(result);
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f023 0301 	bic.w	r3, r3, #1
 80038e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	3314      	adds	r3, #20
 80038e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038ea:	623a      	str	r2, [r7, #32]
 80038ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ee:	69f9      	ldr	r1, [r7, #28]
 80038f0:	6a3a      	ldr	r2, [r7, #32]
 80038f2:	e841 2300 	strex	r3, r2, [r1]
 80038f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1e5      	bne.n	80038ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2220      	movs	r2, #32
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e00f      	b.n	800393a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	4013      	ands	r3, r2
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	429a      	cmp	r2, r3
 8003928:	bf0c      	ite	eq
 800392a:	2301      	moveq	r3, #1
 800392c:	2300      	movne	r3, #0
 800392e:	b2db      	uxtb	r3, r3
 8003930:	461a      	mov	r2, r3
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	429a      	cmp	r2, r3
 8003936:	d09f      	beq.n	8003878 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3740      	adds	r7, #64	; 0x40
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003948:	b0c0      	sub	sp, #256	; 0x100
 800394a:	af00      	add	r7, sp, #0
 800394c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800395c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003960:	68d9      	ldr	r1, [r3, #12]
 8003962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	ea40 0301 	orr.w	r3, r0, r1
 800396c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800396e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	431a      	orrs	r2, r3
 800397c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	431a      	orrs	r2, r3
 8003984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800399c:	f021 010c 	bic.w	r1, r1, #12
 80039a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039aa:	430b      	orrs	r3, r1
 80039ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039be:	6999      	ldr	r1, [r3, #24]
 80039c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	ea40 0301 	orr.w	r3, r0, r1
 80039ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	4b8f      	ldr	r3, [pc, #572]	; (8003c10 <UART_SetConfig+0x2cc>)
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d005      	beq.n	80039e4 <UART_SetConfig+0xa0>
 80039d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	4b8d      	ldr	r3, [pc, #564]	; (8003c14 <UART_SetConfig+0x2d0>)
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d104      	bne.n	80039ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039e4:	f7ff fe4c 	bl	8003680 <HAL_RCC_GetPCLK2Freq>
 80039e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80039ec:	e003      	b.n	80039f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039ee:	f7ff fe33 	bl	8003658 <HAL_RCC_GetPCLK1Freq>
 80039f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a00:	f040 810c 	bne.w	8003c1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a16:	4622      	mov	r2, r4
 8003a18:	462b      	mov	r3, r5
 8003a1a:	1891      	adds	r1, r2, r2
 8003a1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a1e:	415b      	adcs	r3, r3
 8003a20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a26:	4621      	mov	r1, r4
 8003a28:	eb12 0801 	adds.w	r8, r2, r1
 8003a2c:	4629      	mov	r1, r5
 8003a2e:	eb43 0901 	adc.w	r9, r3, r1
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a46:	4690      	mov	r8, r2
 8003a48:	4699      	mov	r9, r3
 8003a4a:	4623      	mov	r3, r4
 8003a4c:	eb18 0303 	adds.w	r3, r8, r3
 8003a50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a54:	462b      	mov	r3, r5
 8003a56:	eb49 0303 	adc.w	r3, r9, r3
 8003a5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a72:	460b      	mov	r3, r1
 8003a74:	18db      	adds	r3, r3, r3
 8003a76:	653b      	str	r3, [r7, #80]	; 0x50
 8003a78:	4613      	mov	r3, r2
 8003a7a:	eb42 0303 	adc.w	r3, r2, r3
 8003a7e:	657b      	str	r3, [r7, #84]	; 0x54
 8003a80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a88:	f7fc fbfa 	bl	8000280 <__aeabi_uldivmod>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4b61      	ldr	r3, [pc, #388]	; (8003c18 <UART_SetConfig+0x2d4>)
 8003a92:	fba3 2302 	umull	r2, r3, r3, r2
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	011c      	lsls	r4, r3, #4
 8003a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003aa4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003aa8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003aac:	4642      	mov	r2, r8
 8003aae:	464b      	mov	r3, r9
 8003ab0:	1891      	adds	r1, r2, r2
 8003ab2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ab4:	415b      	adcs	r3, r3
 8003ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ab8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003abc:	4641      	mov	r1, r8
 8003abe:	eb12 0a01 	adds.w	sl, r2, r1
 8003ac2:	4649      	mov	r1, r9
 8003ac4:	eb43 0b01 	adc.w	fp, r3, r1
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ad4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ad8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003adc:	4692      	mov	sl, r2
 8003ade:	469b      	mov	fp, r3
 8003ae0:	4643      	mov	r3, r8
 8003ae2:	eb1a 0303 	adds.w	r3, sl, r3
 8003ae6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003aea:	464b      	mov	r3, r9
 8003aec:	eb4b 0303 	adc.w	r3, fp, r3
 8003af0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	18db      	adds	r3, r3, r3
 8003b0c:	643b      	str	r3, [r7, #64]	; 0x40
 8003b0e:	4613      	mov	r3, r2
 8003b10:	eb42 0303 	adc.w	r3, r2, r3
 8003b14:	647b      	str	r3, [r7, #68]	; 0x44
 8003b16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b1e:	f7fc fbaf 	bl	8000280 <__aeabi_uldivmod>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4611      	mov	r1, r2
 8003b28:	4b3b      	ldr	r3, [pc, #236]	; (8003c18 <UART_SetConfig+0x2d4>)
 8003b2a:	fba3 2301 	umull	r2, r3, r3, r1
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	2264      	movs	r2, #100	; 0x64
 8003b32:	fb02 f303 	mul.w	r3, r2, r3
 8003b36:	1acb      	subs	r3, r1, r3
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b3e:	4b36      	ldr	r3, [pc, #216]	; (8003c18 <UART_SetConfig+0x2d4>)
 8003b40:	fba3 2302 	umull	r2, r3, r3, r2
 8003b44:	095b      	lsrs	r3, r3, #5
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b4c:	441c      	add	r4, r3
 8003b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b52:	2200      	movs	r2, #0
 8003b54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b60:	4642      	mov	r2, r8
 8003b62:	464b      	mov	r3, r9
 8003b64:	1891      	adds	r1, r2, r2
 8003b66:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b68:	415b      	adcs	r3, r3
 8003b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b70:	4641      	mov	r1, r8
 8003b72:	1851      	adds	r1, r2, r1
 8003b74:	6339      	str	r1, [r7, #48]	; 0x30
 8003b76:	4649      	mov	r1, r9
 8003b78:	414b      	adcs	r3, r1
 8003b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b88:	4659      	mov	r1, fp
 8003b8a:	00cb      	lsls	r3, r1, #3
 8003b8c:	4651      	mov	r1, sl
 8003b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b92:	4651      	mov	r1, sl
 8003b94:	00ca      	lsls	r2, r1, #3
 8003b96:	4610      	mov	r0, r2
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	4642      	mov	r2, r8
 8003b9e:	189b      	adds	r3, r3, r2
 8003ba0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ba4:	464b      	mov	r3, r9
 8003ba6:	460a      	mov	r2, r1
 8003ba8:	eb42 0303 	adc.w	r3, r2, r3
 8003bac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003bbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003bc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	18db      	adds	r3, r3, r3
 8003bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bca:	4613      	mov	r3, r2
 8003bcc:	eb42 0303 	adc.w	r3, r2, r3
 8003bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003bda:	f7fc fb51 	bl	8000280 <__aeabi_uldivmod>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	4b0d      	ldr	r3, [pc, #52]	; (8003c18 <UART_SetConfig+0x2d4>)
 8003be4:	fba3 1302 	umull	r1, r3, r3, r2
 8003be8:	095b      	lsrs	r3, r3, #5
 8003bea:	2164      	movs	r1, #100	; 0x64
 8003bec:	fb01 f303 	mul.w	r3, r1, r3
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	3332      	adds	r3, #50	; 0x32
 8003bf6:	4a08      	ldr	r2, [pc, #32]	; (8003c18 <UART_SetConfig+0x2d4>)
 8003bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfc:	095b      	lsrs	r3, r3, #5
 8003bfe:	f003 0207 	and.w	r2, r3, #7
 8003c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4422      	add	r2, r4
 8003c0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c0c:	e105      	b.n	8003e1a <UART_SetConfig+0x4d6>
 8003c0e:	bf00      	nop
 8003c10:	40011000 	.word	0x40011000
 8003c14:	40011400 	.word	0x40011400
 8003c18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c20:	2200      	movs	r2, #0
 8003c22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c2e:	4642      	mov	r2, r8
 8003c30:	464b      	mov	r3, r9
 8003c32:	1891      	adds	r1, r2, r2
 8003c34:	6239      	str	r1, [r7, #32]
 8003c36:	415b      	adcs	r3, r3
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
 8003c3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c3e:	4641      	mov	r1, r8
 8003c40:	1854      	adds	r4, r2, r1
 8003c42:	4649      	mov	r1, r9
 8003c44:	eb43 0501 	adc.w	r5, r3, r1
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	00eb      	lsls	r3, r5, #3
 8003c52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c56:	00e2      	lsls	r2, r4, #3
 8003c58:	4614      	mov	r4, r2
 8003c5a:	461d      	mov	r5, r3
 8003c5c:	4643      	mov	r3, r8
 8003c5e:	18e3      	adds	r3, r4, r3
 8003c60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c64:	464b      	mov	r3, r9
 8003c66:	eb45 0303 	adc.w	r3, r5, r3
 8003c6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	f04f 0300 	mov.w	r3, #0
 8003c86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	008b      	lsls	r3, r1, #2
 8003c8e:	4621      	mov	r1, r4
 8003c90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c94:	4621      	mov	r1, r4
 8003c96:	008a      	lsls	r2, r1, #2
 8003c98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c9c:	f7fc faf0 	bl	8000280 <__aeabi_uldivmod>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4b60      	ldr	r3, [pc, #384]	; (8003e28 <UART_SetConfig+0x4e4>)
 8003ca6:	fba3 2302 	umull	r2, r3, r3, r2
 8003caa:	095b      	lsrs	r3, r3, #5
 8003cac:	011c      	lsls	r4, r3, #4
 8003cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003cb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003cbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003cc0:	4642      	mov	r2, r8
 8003cc2:	464b      	mov	r3, r9
 8003cc4:	1891      	adds	r1, r2, r2
 8003cc6:	61b9      	str	r1, [r7, #24]
 8003cc8:	415b      	adcs	r3, r3
 8003cca:	61fb      	str	r3, [r7, #28]
 8003ccc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cd0:	4641      	mov	r1, r8
 8003cd2:	1851      	adds	r1, r2, r1
 8003cd4:	6139      	str	r1, [r7, #16]
 8003cd6:	4649      	mov	r1, r9
 8003cd8:	414b      	adcs	r3, r1
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ce8:	4659      	mov	r1, fp
 8003cea:	00cb      	lsls	r3, r1, #3
 8003cec:	4651      	mov	r1, sl
 8003cee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cf2:	4651      	mov	r1, sl
 8003cf4:	00ca      	lsls	r2, r1, #3
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	4642      	mov	r2, r8
 8003cfe:	189b      	adds	r3, r3, r2
 8003d00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d04:	464b      	mov	r3, r9
 8003d06:	460a      	mov	r2, r1
 8003d08:	eb42 0303 	adc.w	r3, r2, r3
 8003d0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	f04f 0300 	mov.w	r3, #0
 8003d24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d28:	4649      	mov	r1, r9
 8003d2a:	008b      	lsls	r3, r1, #2
 8003d2c:	4641      	mov	r1, r8
 8003d2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d32:	4641      	mov	r1, r8
 8003d34:	008a      	lsls	r2, r1, #2
 8003d36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d3a:	f7fc faa1 	bl	8000280 <__aeabi_uldivmod>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	4b39      	ldr	r3, [pc, #228]	; (8003e28 <UART_SetConfig+0x4e4>)
 8003d44:	fba3 1302 	umull	r1, r3, r3, r2
 8003d48:	095b      	lsrs	r3, r3, #5
 8003d4a:	2164      	movs	r1, #100	; 0x64
 8003d4c:	fb01 f303 	mul.w	r3, r1, r3
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	3332      	adds	r3, #50	; 0x32
 8003d56:	4a34      	ldr	r2, [pc, #208]	; (8003e28 <UART_SetConfig+0x4e4>)
 8003d58:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5c:	095b      	lsrs	r3, r3, #5
 8003d5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d62:	441c      	add	r4, r3
 8003d64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d68:	2200      	movs	r2, #0
 8003d6a:	673b      	str	r3, [r7, #112]	; 0x70
 8003d6c:	677a      	str	r2, [r7, #116]	; 0x74
 8003d6e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d72:	4642      	mov	r2, r8
 8003d74:	464b      	mov	r3, r9
 8003d76:	1891      	adds	r1, r2, r2
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	415b      	adcs	r3, r3
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d82:	4641      	mov	r1, r8
 8003d84:	1851      	adds	r1, r2, r1
 8003d86:	6039      	str	r1, [r7, #0]
 8003d88:	4649      	mov	r1, r9
 8003d8a:	414b      	adcs	r3, r1
 8003d8c:	607b      	str	r3, [r7, #4]
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	f04f 0300 	mov.w	r3, #0
 8003d96:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d9a:	4659      	mov	r1, fp
 8003d9c:	00cb      	lsls	r3, r1, #3
 8003d9e:	4651      	mov	r1, sl
 8003da0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003da4:	4651      	mov	r1, sl
 8003da6:	00ca      	lsls	r2, r1, #3
 8003da8:	4610      	mov	r0, r2
 8003daa:	4619      	mov	r1, r3
 8003dac:	4603      	mov	r3, r0
 8003dae:	4642      	mov	r2, r8
 8003db0:	189b      	adds	r3, r3, r2
 8003db2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003db4:	464b      	mov	r3, r9
 8003db6:	460a      	mov	r2, r1
 8003db8:	eb42 0303 	adc.w	r3, r2, r3
 8003dbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	663b      	str	r3, [r7, #96]	; 0x60
 8003dc8:	667a      	str	r2, [r7, #100]	; 0x64
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003dd6:	4649      	mov	r1, r9
 8003dd8:	008b      	lsls	r3, r1, #2
 8003dda:	4641      	mov	r1, r8
 8003ddc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003de0:	4641      	mov	r1, r8
 8003de2:	008a      	lsls	r2, r1, #2
 8003de4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003de8:	f7fc fa4a 	bl	8000280 <__aeabi_uldivmod>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	4b0d      	ldr	r3, [pc, #52]	; (8003e28 <UART_SetConfig+0x4e4>)
 8003df2:	fba3 1302 	umull	r1, r3, r3, r2
 8003df6:	095b      	lsrs	r3, r3, #5
 8003df8:	2164      	movs	r1, #100	; 0x64
 8003dfa:	fb01 f303 	mul.w	r3, r1, r3
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	3332      	adds	r3, #50	; 0x32
 8003e04:	4a08      	ldr	r2, [pc, #32]	; (8003e28 <UART_SetConfig+0x4e4>)
 8003e06:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	f003 020f 	and.w	r2, r3, #15
 8003e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4422      	add	r2, r4
 8003e18:	609a      	str	r2, [r3, #8]
}
 8003e1a:	bf00      	nop
 8003e1c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e20:	46bd      	mov	sp, r7
 8003e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e26:	bf00      	nop
 8003e28:	51eb851f 	.word	0x51eb851f

08003e2c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b089      	sub	sp, #36	; 0x24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	fa93 f3a3 	rbit	r3, r3
 8003e46:	613b      	str	r3, [r7, #16]
  return result;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	fab3 f383 	clz	r3, r3
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	2103      	movs	r1, #3
 8003e54:	fa01 f303 	lsl.w	r3, r1, r3
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	401a      	ands	r2, r3
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	fa93 f3a3 	rbit	r3, r3
 8003e66:	61bb      	str	r3, [r7, #24]
  return result;
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	fab3 f383 	clz	r3, r3
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	fa01 f303 	lsl.w	r3, r1, r3
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	601a      	str	r2, [r3, #0]
}
 8003e7e:	bf00      	nop
 8003e80:	3724      	adds	r7, #36	; 0x24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b085      	sub	sp, #20
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	401a      	ands	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	6879      	ldr	r1, [r7, #4]
 8003ea4:	fb01 f303 	mul.w	r3, r1, r3
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	605a      	str	r2, [r3, #4]
}
 8003eae:	bf00      	nop
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b089      	sub	sp, #36	; 0x24
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	60f8      	str	r0, [r7, #12]
 8003ec2:	60b9      	str	r1, [r7, #8]
 8003ec4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	fa93 f3a3 	rbit	r3, r3
 8003ed4:	613b      	str	r3, [r7, #16]
  return result;
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	fab3 f383 	clz	r3, r3
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	2103      	movs	r1, #3
 8003ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	401a      	ands	r2, r3
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	fa93 f3a3 	rbit	r3, r3
 8003ef4:	61bb      	str	r3, [r7, #24]
  return result;
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	fab3 f383 	clz	r3, r3
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	fa01 f303 	lsl.w	r3, r1, r3
 8003f06:	431a      	orrs	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8003f0c:	bf00      	nop
 8003f0e:	3724      	adds	r7, #36	; 0x24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b089      	sub	sp, #36	; 0x24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	fa93 f3a3 	rbit	r3, r3
 8003f32:	613b      	str	r3, [r7, #16]
  return result;
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	fab3 f383 	clz	r3, r3
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	2103      	movs	r1, #3
 8003f40:	fa01 f303 	lsl.w	r3, r1, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	401a      	ands	r2, r3
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	fa93 f3a3 	rbit	r3, r3
 8003f52:	61bb      	str	r3, [r7, #24]
  return result;
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	fab3 f383 	clz	r3, r3
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	fa01 f303 	lsl.w	r3, r1, r3
 8003f64:	431a      	orrs	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	60da      	str	r2, [r3, #12]
}
 8003f6a:	bf00      	nop
 8003f6c:	3724      	adds	r7, #36	; 0x24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b089      	sub	sp, #36	; 0x24
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	60f8      	str	r0, [r7, #12]
 8003f7e:	60b9      	str	r1, [r7, #8]
 8003f80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6a1a      	ldr	r2, [r3, #32]
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	fa93 f3a3 	rbit	r3, r3
 8003f90:	613b      	str	r3, [r7, #16]
  return result;
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	fab3 f383 	clz	r3, r3
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	210f      	movs	r1, #15
 8003f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	401a      	ands	r2, r3
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	fa93 f3a3 	rbit	r3, r3
 8003fb0:	61bb      	str	r3, [r7, #24]
  return result;
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	fab3 f383 	clz	r3, r3
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8003fc8:	bf00      	nop
 8003fca:	3724      	adds	r7, #36	; 0x24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b089      	sub	sp, #36	; 0x24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	0a1b      	lsrs	r3, r3, #8
 8003fe8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	fa93 f3a3 	rbit	r3, r3
 8003ff0:	613b      	str	r3, [r7, #16]
  return result;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	fab3 f383 	clz	r3, r3
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	210f      	movs	r1, #15
 8003ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8004002:	43db      	mvns	r3, r3
 8004004:	401a      	ands	r2, r3
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	0a1b      	lsrs	r3, r3, #8
 800400a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	fa93 f3a3 	rbit	r3, r3
 8004012:	61bb      	str	r3, [r7, #24]
  return result;
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	fab3 f383 	clz	r3, r3
 800401a:	b2db      	uxtb	r3, r3
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	fa01 f303 	lsl.w	r3, r1, r3
 8004024:	431a      	orrs	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800402a:	bf00      	nop
 800402c:	3724      	adds	r7, #36	; 0x24
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b088      	sub	sp, #32
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8004040:	2300      	movs	r3, #0
 8004042:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8004044:	2300      	movs	r3, #0
 8004046:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	fa93 f3a3 	rbit	r3, r3
 8004054:	613b      	str	r3, [r7, #16]
  return result;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	fab3 f383 	clz	r3, r3
 800405c:	b2db      	uxtb	r3, r3
 800405e:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004060:	e050      	b.n	8004104 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	2101      	movs	r1, #1
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	fa01 f303 	lsl.w	r3, r1, r3
 800406e:	4013      	ands	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d042      	beq.n	80040fe <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d003      	beq.n	8004088 <LL_GPIO_Init+0x52>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b02      	cmp	r3, #2
 8004086:	d10d      	bne.n	80040a4 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	461a      	mov	r2, r3
 800408e:	69b9      	ldr	r1, [r7, #24]
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff ff12 	bl	8003eba <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	461a      	mov	r2, r3
 800409c:	69b9      	ldr	r1, [r7, #24]
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7ff fef3 	bl	8003e8a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	461a      	mov	r2, r3
 80040aa:	69b9      	ldr	r1, [r7, #24]
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7ff ff33 	bl	8003f18 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d11a      	bne.n	80040f0 <LL_GPIO_Init+0xba>
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	fa93 f3a3 	rbit	r3, r3
 80040c4:	60bb      	str	r3, [r7, #8]
  return result;
 80040c6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80040c8:	fab3 f383 	clz	r3, r3
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b07      	cmp	r3, #7
 80040d0:	d807      	bhi.n	80040e2 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	461a      	mov	r2, r3
 80040d8:	69b9      	ldr	r1, [r7, #24]
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7ff ff4b 	bl	8003f76 <LL_GPIO_SetAFPin_0_7>
 80040e0:	e006      	b.n	80040f0 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	461a      	mov	r2, r3
 80040e8:	69b9      	ldr	r1, [r7, #24]
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff ff72 	bl	8003fd4 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	461a      	mov	r2, r3
 80040f6:	69b9      	ldr	r1, [r7, #24]
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7ff fe97 	bl	8003e2c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	3301      	adds	r3, #1
 8004102:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	fa22 f303 	lsr.w	r3, r2, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1a7      	bne.n	8004062 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3720      	adds	r7, #32
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004120:	4b04      	ldr	r3, [pc, #16]	; (8004134 <LL_RCC_GetSysClkSource+0x18>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 030c 	and.w	r3, r3, #12
}
 8004128:	4618      	mov	r0, r3
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	40023800 	.word	0x40023800

08004138 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800413c:	4b04      	ldr	r3, [pc, #16]	; (8004150 <LL_RCC_GetAHBPrescaler+0x18>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004144:	4618      	mov	r0, r3
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40023800 	.word	0x40023800

08004154 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004158:	4b04      	ldr	r3, [pc, #16]	; (800416c <LL_RCC_GetAPB1Prescaler+0x18>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8004160:	4618      	mov	r0, r3
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	40023800 	.word	0x40023800

08004170 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004174:	4b04      	ldr	r3, [pc, #16]	; (8004188 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800417c:	4618      	mov	r0, r3
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40023800 	.word	0x40023800

0800418c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004190:	4b04      	ldr	r3, [pc, #16]	; (80041a4 <LL_RCC_PLL_GetMainSource+0x18>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8004198:	4618      	mov	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40023800 	.word	0x40023800

080041a8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80041ac:	4b04      	ldr	r3, [pc, #16]	; (80041c0 <LL_RCC_PLL_GetN+0x18>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	099b      	lsrs	r3, r3, #6
 80041b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	40023800 	.word	0x40023800

080041c4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80041c8:	4b04      	ldr	r3, [pc, #16]	; (80041dc <LL_RCC_PLL_GetP+0x18>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	40023800 	.word	0x40023800

080041e0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80041e4:	4b04      	ldr	r3, [pc, #16]	; (80041f8 <LL_RCC_PLL_GetDivider+0x18>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	40023800 	.word	0x40023800

080041fc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004204:	f000 f820 	bl	8004248 <RCC_GetSystemClockFreq>
 8004208:	4602      	mov	r2, r0
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f000 f840 	bl	8004298 <RCC_GetHCLKClockFreq>
 8004218:	4602      	mov	r2, r0
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	4618      	mov	r0, r3
 8004224:	f000 f84e 	bl	80042c4 <RCC_GetPCLK1ClockFreq>
 8004228:	4602      	mov	r2, r0
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	4618      	mov	r0, r3
 8004234:	f000 f85a 	bl	80042ec <RCC_GetPCLK2ClockFreq>
 8004238:	4602      	mov	r2, r0
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	60da      	str	r2, [r3, #12]
}
 800423e:	bf00      	nop
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
	...

08004248 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004252:	f7ff ff63 	bl	800411c <LL_RCC_GetSysClkSource>
 8004256:	4603      	mov	r3, r0
 8004258:	2b08      	cmp	r3, #8
 800425a:	d00c      	beq.n	8004276 <RCC_GetSystemClockFreq+0x2e>
 800425c:	2b08      	cmp	r3, #8
 800425e:	d80f      	bhi.n	8004280 <RCC_GetSystemClockFreq+0x38>
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <RCC_GetSystemClockFreq+0x22>
 8004264:	2b04      	cmp	r3, #4
 8004266:	d003      	beq.n	8004270 <RCC_GetSystemClockFreq+0x28>
 8004268:	e00a      	b.n	8004280 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800426a:	4b09      	ldr	r3, [pc, #36]	; (8004290 <RCC_GetSystemClockFreq+0x48>)
 800426c:	607b      	str	r3, [r7, #4]
      break;
 800426e:	e00a      	b.n	8004286 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004270:	4b08      	ldr	r3, [pc, #32]	; (8004294 <RCC_GetSystemClockFreq+0x4c>)
 8004272:	607b      	str	r3, [r7, #4]
      break;
 8004274:	e007      	b.n	8004286 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8004276:	2008      	movs	r0, #8
 8004278:	f000 f84c 	bl	8004314 <RCC_PLL_GetFreqDomain_SYS>
 800427c:	6078      	str	r0, [r7, #4]
      break;
 800427e:	e002      	b.n	8004286 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8004280:	4b03      	ldr	r3, [pc, #12]	; (8004290 <RCC_GetSystemClockFreq+0x48>)
 8004282:	607b      	str	r3, [r7, #4]
      break;
 8004284:	bf00      	nop
  }

  return frequency;
 8004286:	687b      	ldr	r3, [r7, #4]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	00f42400 	.word	0x00f42400
 8004294:	007a1200 	.word	0x007a1200

08004298 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80042a0:	f7ff ff4a 	bl	8004138 <LL_RCC_GetAHBPrescaler>
 80042a4:	4603      	mov	r3, r0
 80042a6:	091b      	lsrs	r3, r3, #4
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	4a04      	ldr	r2, [pc, #16]	; (80042c0 <RCC_GetHCLKClockFreq+0x28>)
 80042ae:	5cd3      	ldrb	r3, [r2, r3]
 80042b0:	461a      	mov	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	40d3      	lsrs	r3, r2
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	08005f58 	.word	0x08005f58

080042c4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80042cc:	f7ff ff42 	bl	8004154 <LL_RCC_GetAPB1Prescaler>
 80042d0:	4603      	mov	r3, r0
 80042d2:	0a9b      	lsrs	r3, r3, #10
 80042d4:	4a04      	ldr	r2, [pc, #16]	; (80042e8 <RCC_GetPCLK1ClockFreq+0x24>)
 80042d6:	5cd3      	ldrb	r3, [r2, r3]
 80042d8:	461a      	mov	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	40d3      	lsrs	r3, r2
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	08005f68 	.word	0x08005f68

080042ec <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80042f4:	f7ff ff3c 	bl	8004170 <LL_RCC_GetAPB2Prescaler>
 80042f8:	4603      	mov	r3, r0
 80042fa:	0b5b      	lsrs	r3, r3, #13
 80042fc:	4a04      	ldr	r2, [pc, #16]	; (8004310 <RCC_GetPCLK2ClockFreq+0x24>)
 80042fe:	5cd3      	ldrb	r3, [r2, r3]
 8004300:	461a      	mov	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	40d3      	lsrs	r3, r2
}
 8004306:	4618      	mov	r0, r3
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	08005f68 	.word	0x08005f68

08004314 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004314:	b590      	push	{r4, r7, lr}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	2300      	movs	r3, #0
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	2300      	movs	r3, #0
 8004326:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004328:	f7ff ff30 	bl	800418c <LL_RCC_PLL_GetMainSource>
 800432c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d004      	beq.n	800433e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800433a:	d003      	beq.n	8004344 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800433c:	e005      	b.n	800434a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800433e:	4b12      	ldr	r3, [pc, #72]	; (8004388 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004340:	617b      	str	r3, [r7, #20]
      break;
 8004342:	e005      	b.n	8004350 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004344:	4b11      	ldr	r3, [pc, #68]	; (800438c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8004346:	617b      	str	r3, [r7, #20]
      break;
 8004348:	e002      	b.n	8004350 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800434a:	4b0f      	ldr	r3, [pc, #60]	; (8004388 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800434c:	617b      	str	r3, [r7, #20]
      break;
 800434e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b08      	cmp	r3, #8
 8004354:	d113      	bne.n	800437e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004356:	f7ff ff43 	bl	80041e0 <LL_RCC_PLL_GetDivider>
 800435a:	4602      	mov	r2, r0
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	fbb3 f4f2 	udiv	r4, r3, r2
 8004362:	f7ff ff21 	bl	80041a8 <LL_RCC_PLL_GetN>
 8004366:	4603      	mov	r3, r0
 8004368:	fb03 f404 	mul.w	r4, r3, r4
 800436c:	f7ff ff2a 	bl	80041c4 <LL_RCC_PLL_GetP>
 8004370:	4603      	mov	r3, r0
 8004372:	0c1b      	lsrs	r3, r3, #16
 8004374:	3301      	adds	r3, #1
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	fbb4 f3f3 	udiv	r3, r4, r3
 800437c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800437e:	693b      	ldr	r3, [r7, #16]
}
 8004380:	4618      	mov	r0, r3
 8004382:	371c      	adds	r7, #28
 8004384:	46bd      	mov	sp, r7
 8004386:	bd90      	pop	{r4, r7, pc}
 8004388:	00f42400 	.word	0x00f42400
 800438c:	007a1200 	.word	0x007a1200

08004390 <LL_USART_IsEnabled>:
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043a4:	bf0c      	ite	eq
 80043a6:	2301      	moveq	r3, #1
 80043a8:	2300      	movne	r3, #0
 80043aa:	b2db      	uxtb	r3, r3
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <LL_USART_SetStopBitsLength>:
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	431a      	orrs	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	611a      	str	r2, [r3, #16]
}
 80043d2:	bf00      	nop
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <LL_USART_SetHWFlowCtrl>:
{
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	615a      	str	r2, [r3, #20]
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <LL_USART_SetBaudRate>:
{
 8004404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004408:	b0c0      	sub	sp, #256	; 0x100
 800440a:	af00      	add	r7, sp, #0
 800440c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004410:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8004414:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004418:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004424:	f040 810c 	bne.w	8004640 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004428:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800442c:	2200      	movs	r2, #0
 800442e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004432:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004436:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800443a:	4622      	mov	r2, r4
 800443c:	462b      	mov	r3, r5
 800443e:	1891      	adds	r1, r2, r2
 8004440:	6639      	str	r1, [r7, #96]	; 0x60
 8004442:	415b      	adcs	r3, r3
 8004444:	667b      	str	r3, [r7, #100]	; 0x64
 8004446:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800444a:	4621      	mov	r1, r4
 800444c:	eb12 0801 	adds.w	r8, r2, r1
 8004450:	4629      	mov	r1, r5
 8004452:	eb43 0901 	adc.w	r9, r3, r1
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	f04f 0300 	mov.w	r3, #0
 800445e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004462:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004466:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800446a:	4690      	mov	r8, r2
 800446c:	4699      	mov	r9, r3
 800446e:	4623      	mov	r3, r4
 8004470:	eb18 0303 	adds.w	r3, r8, r3
 8004474:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004478:	462b      	mov	r3, r5
 800447a:	eb49 0303 	adc.w	r3, r9, r3
 800447e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004482:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004486:	2200      	movs	r2, #0
 8004488:	469a      	mov	sl, r3
 800448a:	4693      	mov	fp, r2
 800448c:	eb1a 030a 	adds.w	r3, sl, sl
 8004490:	65bb      	str	r3, [r7, #88]	; 0x58
 8004492:	eb4b 030b 	adc.w	r3, fp, fp
 8004496:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004498:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800449c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80044a0:	f7fb feee 	bl	8000280 <__aeabi_uldivmod>
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	4b64      	ldr	r3, [pc, #400]	; (800463c <LL_USART_SetBaudRate+0x238>)
 80044aa:	fba3 2302 	umull	r2, r3, r3, r2
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	b29c      	uxth	r4, r3
 80044b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044c0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80044c4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80044c8:	4642      	mov	r2, r8
 80044ca:	464b      	mov	r3, r9
 80044cc:	1891      	adds	r1, r2, r2
 80044ce:	6539      	str	r1, [r7, #80]	; 0x50
 80044d0:	415b      	adcs	r3, r3
 80044d2:	657b      	str	r3, [r7, #84]	; 0x54
 80044d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80044d8:	4641      	mov	r1, r8
 80044da:	1851      	adds	r1, r2, r1
 80044dc:	64b9      	str	r1, [r7, #72]	; 0x48
 80044de:	4649      	mov	r1, r9
 80044e0:	414b      	adcs	r3, r1
 80044e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044e4:	f04f 0200 	mov.w	r2, #0
 80044e8:	f04f 0300 	mov.w	r3, #0
 80044ec:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 80044f0:	4659      	mov	r1, fp
 80044f2:	00cb      	lsls	r3, r1, #3
 80044f4:	4651      	mov	r1, sl
 80044f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044fa:	4651      	mov	r1, sl
 80044fc:	00ca      	lsls	r2, r1, #3
 80044fe:	4610      	mov	r0, r2
 8004500:	4619      	mov	r1, r3
 8004502:	4603      	mov	r3, r0
 8004504:	4642      	mov	r2, r8
 8004506:	189b      	adds	r3, r3, r2
 8004508:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800450c:	464b      	mov	r3, r9
 800450e:	460a      	mov	r2, r1
 8004510:	eb42 0303 	adc.w	r3, r2, r3
 8004514:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004518:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800451c:	2200      	movs	r2, #0
 800451e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004522:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8004526:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800452a:	460b      	mov	r3, r1
 800452c:	18db      	adds	r3, r3, r3
 800452e:	643b      	str	r3, [r7, #64]	; 0x40
 8004530:	4613      	mov	r3, r2
 8004532:	eb42 0303 	adc.w	r3, r2, r3
 8004536:	647b      	str	r3, [r7, #68]	; 0x44
 8004538:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800453c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004540:	f7fb fe9e 	bl	8000280 <__aeabi_uldivmod>
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	4611      	mov	r1, r2
 800454a:	4b3c      	ldr	r3, [pc, #240]	; (800463c <LL_USART_SetBaudRate+0x238>)
 800454c:	fba3 2301 	umull	r2, r3, r3, r1
 8004550:	095b      	lsrs	r3, r3, #5
 8004552:	2264      	movs	r2, #100	; 0x64
 8004554:	fb02 f303 	mul.w	r3, r2, r3
 8004558:	1acb      	subs	r3, r1, r3
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004560:	4b36      	ldr	r3, [pc, #216]	; (800463c <LL_USART_SetBaudRate+0x238>)
 8004562:	fba3 2302 	umull	r2, r3, r3, r2
 8004566:	095b      	lsrs	r3, r3, #5
 8004568:	b29b      	uxth	r3, r3
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	b29b      	uxth	r3, r3
 800456e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004572:	b29b      	uxth	r3, r3
 8004574:	4423      	add	r3, r4
 8004576:	b29c      	uxth	r4, r3
 8004578:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800457c:	2200      	movs	r2, #0
 800457e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004582:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004586:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 800458a:	4642      	mov	r2, r8
 800458c:	464b      	mov	r3, r9
 800458e:	1891      	adds	r1, r2, r2
 8004590:	63b9      	str	r1, [r7, #56]	; 0x38
 8004592:	415b      	adcs	r3, r3
 8004594:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004596:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800459a:	4641      	mov	r1, r8
 800459c:	1851      	adds	r1, r2, r1
 800459e:	6339      	str	r1, [r7, #48]	; 0x30
 80045a0:	4649      	mov	r1, r9
 80045a2:	414b      	adcs	r3, r1
 80045a4:	637b      	str	r3, [r7, #52]	; 0x34
 80045a6:	f04f 0200 	mov.w	r2, #0
 80045aa:	f04f 0300 	mov.w	r3, #0
 80045ae:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80045b2:	4659      	mov	r1, fp
 80045b4:	00cb      	lsls	r3, r1, #3
 80045b6:	4651      	mov	r1, sl
 80045b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045bc:	4651      	mov	r1, sl
 80045be:	00ca      	lsls	r2, r1, #3
 80045c0:	4610      	mov	r0, r2
 80045c2:	4619      	mov	r1, r3
 80045c4:	4603      	mov	r3, r0
 80045c6:	4642      	mov	r2, r8
 80045c8:	189b      	adds	r3, r3, r2
 80045ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045ce:	464b      	mov	r3, r9
 80045d0:	460a      	mov	r2, r1
 80045d2:	eb42 0303 	adc.w	r3, r2, r3
 80045d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80045da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80045de:	2200      	movs	r2, #0
 80045e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045e4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80045e8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80045ec:	460b      	mov	r3, r1
 80045ee:	18db      	adds	r3, r3, r3
 80045f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80045f2:	4613      	mov	r3, r2
 80045f4:	eb42 0303 	adc.w	r3, r2, r3
 80045f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045fe:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004602:	f7fb fe3d 	bl	8000280 <__aeabi_uldivmod>
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	4b0c      	ldr	r3, [pc, #48]	; (800463c <LL_USART_SetBaudRate+0x238>)
 800460c:	fba3 1302 	umull	r1, r3, r3, r2
 8004610:	095b      	lsrs	r3, r3, #5
 8004612:	2164      	movs	r1, #100	; 0x64
 8004614:	fb01 f303 	mul.w	r3, r1, r3
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	3332      	adds	r3, #50	; 0x32
 800461e:	4a07      	ldr	r2, [pc, #28]	; (800463c <LL_USART_SetBaudRate+0x238>)
 8004620:	fba2 2303 	umull	r2, r3, r2, r3
 8004624:	095b      	lsrs	r3, r3, #5
 8004626:	b29b      	uxth	r3, r3
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	b29b      	uxth	r3, r3
 800462e:	4423      	add	r3, r4
 8004630:	b29b      	uxth	r3, r3
 8004632:	461a      	mov	r2, r3
 8004634:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004638:	609a      	str	r2, [r3, #8]
}
 800463a:	e107      	b.n	800484c <LL_USART_SetBaudRate+0x448>
 800463c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004640:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004644:	2200      	movs	r2, #0
 8004646:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800464a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800464e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8004652:	4642      	mov	r2, r8
 8004654:	464b      	mov	r3, r9
 8004656:	1891      	adds	r1, r2, r2
 8004658:	6239      	str	r1, [r7, #32]
 800465a:	415b      	adcs	r3, r3
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
 800465e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004662:	4641      	mov	r1, r8
 8004664:	1854      	adds	r4, r2, r1
 8004666:	4649      	mov	r1, r9
 8004668:	eb43 0501 	adc.w	r5, r3, r1
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	f04f 0300 	mov.w	r3, #0
 8004674:	00eb      	lsls	r3, r5, #3
 8004676:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800467a:	00e2      	lsls	r2, r4, #3
 800467c:	4614      	mov	r4, r2
 800467e:	461d      	mov	r5, r3
 8004680:	4643      	mov	r3, r8
 8004682:	18e3      	adds	r3, r4, r3
 8004684:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004688:	464b      	mov	r3, r9
 800468a:	eb45 0303 	adc.w	r3, r5, r3
 800468e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004692:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004696:	2200      	movs	r2, #0
 8004698:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800469c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80046ac:	4629      	mov	r1, r5
 80046ae:	008b      	lsls	r3, r1, #2
 80046b0:	4621      	mov	r1, r4
 80046b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046b6:	4621      	mov	r1, r4
 80046b8:	008a      	lsls	r2, r1, #2
 80046ba:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80046be:	f7fb fddf 	bl	8000280 <__aeabi_uldivmod>
 80046c2:	4602      	mov	r2, r0
 80046c4:	460b      	mov	r3, r1
 80046c6:	4b64      	ldr	r3, [pc, #400]	; (8004858 <LL_USART_SetBaudRate+0x454>)
 80046c8:	fba3 2302 	umull	r2, r3, r3, r2
 80046cc:	095b      	lsrs	r3, r3, #5
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	b29c      	uxth	r4, r3
 80046d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80046d8:	2200      	movs	r2, #0
 80046da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046e2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80046e6:	4642      	mov	r2, r8
 80046e8:	464b      	mov	r3, r9
 80046ea:	1891      	adds	r1, r2, r2
 80046ec:	61b9      	str	r1, [r7, #24]
 80046ee:	415b      	adcs	r3, r3
 80046f0:	61fb      	str	r3, [r7, #28]
 80046f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046f6:	4641      	mov	r1, r8
 80046f8:	1851      	adds	r1, r2, r1
 80046fa:	6139      	str	r1, [r7, #16]
 80046fc:	4649      	mov	r1, r9
 80046fe:	414b      	adcs	r3, r1
 8004700:	617b      	str	r3, [r7, #20]
 8004702:	f04f 0200 	mov.w	r2, #0
 8004706:	f04f 0300 	mov.w	r3, #0
 800470a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800470e:	4659      	mov	r1, fp
 8004710:	00cb      	lsls	r3, r1, #3
 8004712:	4651      	mov	r1, sl
 8004714:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004718:	4651      	mov	r1, sl
 800471a:	00ca      	lsls	r2, r1, #3
 800471c:	4610      	mov	r0, r2
 800471e:	4619      	mov	r1, r3
 8004720:	4603      	mov	r3, r0
 8004722:	4642      	mov	r2, r8
 8004724:	189b      	adds	r3, r3, r2
 8004726:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800472a:	464b      	mov	r3, r9
 800472c:	460a      	mov	r2, r1
 800472e:	eb42 0303 	adc.w	r3, r2, r3
 8004732:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004736:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800473a:	2200      	movs	r2, #0
 800473c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004740:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004744:	f04f 0200 	mov.w	r2, #0
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8004750:	4649      	mov	r1, r9
 8004752:	008b      	lsls	r3, r1, #2
 8004754:	4641      	mov	r1, r8
 8004756:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800475a:	4641      	mov	r1, r8
 800475c:	008a      	lsls	r2, r1, #2
 800475e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004762:	f7fb fd8d 	bl	8000280 <__aeabi_uldivmod>
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	4b3b      	ldr	r3, [pc, #236]	; (8004858 <LL_USART_SetBaudRate+0x454>)
 800476c:	fba3 1302 	umull	r1, r3, r3, r2
 8004770:	095b      	lsrs	r3, r3, #5
 8004772:	2164      	movs	r1, #100	; 0x64
 8004774:	fb01 f303 	mul.w	r3, r1, r3
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	3332      	adds	r3, #50	; 0x32
 800477e:	4a36      	ldr	r2, [pc, #216]	; (8004858 <LL_USART_SetBaudRate+0x454>)
 8004780:	fba2 2303 	umull	r2, r3, r2, r3
 8004784:	095b      	lsrs	r3, r3, #5
 8004786:	b29b      	uxth	r3, r3
 8004788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800478c:	b29b      	uxth	r3, r3
 800478e:	4423      	add	r3, r4
 8004790:	b29c      	uxth	r4, r3
 8004792:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004796:	2200      	movs	r2, #0
 8004798:	67bb      	str	r3, [r7, #120]	; 0x78
 800479a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800479c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047a0:	4642      	mov	r2, r8
 80047a2:	464b      	mov	r3, r9
 80047a4:	1891      	adds	r1, r2, r2
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	415b      	adcs	r3, r3
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047b0:	4641      	mov	r1, r8
 80047b2:	1851      	adds	r1, r2, r1
 80047b4:	6039      	str	r1, [r7, #0]
 80047b6:	4649      	mov	r1, r9
 80047b8:	414b      	adcs	r3, r1
 80047ba:	607b      	str	r3, [r7, #4]
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	f04f 0300 	mov.w	r3, #0
 80047c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047c8:	4659      	mov	r1, fp
 80047ca:	00cb      	lsls	r3, r1, #3
 80047cc:	4651      	mov	r1, sl
 80047ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047d2:	4651      	mov	r1, sl
 80047d4:	00ca      	lsls	r2, r1, #3
 80047d6:	4610      	mov	r0, r2
 80047d8:	4619      	mov	r1, r3
 80047da:	4603      	mov	r3, r0
 80047dc:	4642      	mov	r2, r8
 80047de:	189b      	adds	r3, r3, r2
 80047e0:	673b      	str	r3, [r7, #112]	; 0x70
 80047e2:	464b      	mov	r3, r9
 80047e4:	460a      	mov	r2, r1
 80047e6:	eb42 0303 	adc.w	r3, r2, r3
 80047ea:	677b      	str	r3, [r7, #116]	; 0x74
 80047ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80047f0:	2200      	movs	r2, #0
 80047f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80047f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047f6:	f04f 0200 	mov.w	r2, #0
 80047fa:	f04f 0300 	mov.w	r3, #0
 80047fe:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8004802:	4649      	mov	r1, r9
 8004804:	008b      	lsls	r3, r1, #2
 8004806:	4641      	mov	r1, r8
 8004808:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800480c:	4641      	mov	r1, r8
 800480e:	008a      	lsls	r2, r1, #2
 8004810:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004814:	f7fb fd34 	bl	8000280 <__aeabi_uldivmod>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4b0e      	ldr	r3, [pc, #56]	; (8004858 <LL_USART_SetBaudRate+0x454>)
 800481e:	fba3 1302 	umull	r1, r3, r3, r2
 8004822:	095b      	lsrs	r3, r3, #5
 8004824:	2164      	movs	r1, #100	; 0x64
 8004826:	fb01 f303 	mul.w	r3, r1, r3
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	011b      	lsls	r3, r3, #4
 800482e:	3332      	adds	r3, #50	; 0x32
 8004830:	4a09      	ldr	r2, [pc, #36]	; (8004858 <LL_USART_SetBaudRate+0x454>)
 8004832:	fba2 2303 	umull	r2, r3, r2, r3
 8004836:	095b      	lsrs	r3, r3, #5
 8004838:	b29b      	uxth	r3, r3
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	b29b      	uxth	r3, r3
 8004840:	4423      	add	r3, r4
 8004842:	b29b      	uxth	r3, r3
 8004844:	461a      	mov	r2, r3
 8004846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800484a:	609a      	str	r2, [r3, #8]
}
 800484c:	bf00      	nop
 800484e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004852:	46bd      	mov	sp, r7
 8004854:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004858:	51eb851f 	.word	0x51eb851f

0800485c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800486a:	2300      	movs	r3, #0
 800486c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7ff fd8e 	bl	8004390 <LL_USART_IsEnabled>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d149      	bne.n	800490e <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004882:	f023 030c 	bic.w	r3, r3, #12
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	6851      	ldr	r1, [r2, #4]
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	68d2      	ldr	r2, [r2, #12]
 800488e:	4311      	orrs	r1, r2
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	6912      	ldr	r2, [r2, #16]
 8004894:	4311      	orrs	r1, r2
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	6992      	ldr	r2, [r2, #24]
 800489a:	430a      	orrs	r2, r1
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	4619      	mov	r1, r3
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7ff fd85 	bl	80043b8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	4619      	mov	r1, r3
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7ff fd92 	bl	80043de <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80048ba:	f107 0308 	add.w	r3, r7, #8
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff fc9c 	bl	80041fc <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a14      	ldr	r2, [pc, #80]	; (8004918 <LL_USART_Init+0xbc>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d102      	bne.n	80048d2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	61bb      	str	r3, [r7, #24]
 80048d0:	e00c      	b.n	80048ec <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a11      	ldr	r2, [pc, #68]	; (800491c <LL_USART_Init+0xc0>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d102      	bne.n	80048e0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	61bb      	str	r3, [r7, #24]
 80048de:	e005      	b.n	80048ec <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a0f      	ldr	r2, [pc, #60]	; (8004920 <LL_USART_Init+0xc4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d101      	bne.n	80048ec <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00d      	beq.n	800490e <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d009      	beq.n	800490e <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 80048fa:	2300      	movs	r3, #0
 80048fc:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69b9      	ldr	r1, [r7, #24]
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f7ff fd7b 	bl	8004404 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800490e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3720      	adds	r7, #32
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40011000 	.word	0x40011000
 800491c:	40004400 	.word	0x40004400
 8004920:	40011400 	.word	0x40011400

08004924 <__errno>:
 8004924:	4b01      	ldr	r3, [pc, #4]	; (800492c <__errno+0x8>)
 8004926:	6818      	ldr	r0, [r3, #0]
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	20000024 	.word	0x20000024

08004930 <__libc_init_array>:
 8004930:	b570      	push	{r4, r5, r6, lr}
 8004932:	4d0d      	ldr	r5, [pc, #52]	; (8004968 <__libc_init_array+0x38>)
 8004934:	4c0d      	ldr	r4, [pc, #52]	; (800496c <__libc_init_array+0x3c>)
 8004936:	1b64      	subs	r4, r4, r5
 8004938:	10a4      	asrs	r4, r4, #2
 800493a:	2600      	movs	r6, #0
 800493c:	42a6      	cmp	r6, r4
 800493e:	d109      	bne.n	8004954 <__libc_init_array+0x24>
 8004940:	4d0b      	ldr	r5, [pc, #44]	; (8004970 <__libc_init_array+0x40>)
 8004942:	4c0c      	ldr	r4, [pc, #48]	; (8004974 <__libc_init_array+0x44>)
 8004944:	f001 fa72 	bl	8005e2c <_init>
 8004948:	1b64      	subs	r4, r4, r5
 800494a:	10a4      	asrs	r4, r4, #2
 800494c:	2600      	movs	r6, #0
 800494e:	42a6      	cmp	r6, r4
 8004950:	d105      	bne.n	800495e <__libc_init_array+0x2e>
 8004952:	bd70      	pop	{r4, r5, r6, pc}
 8004954:	f855 3b04 	ldr.w	r3, [r5], #4
 8004958:	4798      	blx	r3
 800495a:	3601      	adds	r6, #1
 800495c:	e7ee      	b.n	800493c <__libc_init_array+0xc>
 800495e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004962:	4798      	blx	r3
 8004964:	3601      	adds	r6, #1
 8004966:	e7f2      	b.n	800494e <__libc_init_array+0x1e>
 8004968:	08008824 	.word	0x08008824
 800496c:	08008824 	.word	0x08008824
 8004970:	08008824 	.word	0x08008824
 8004974:	08008828 	.word	0x08008828

08004978 <memset>:
 8004978:	4402      	add	r2, r0
 800497a:	4603      	mov	r3, r0
 800497c:	4293      	cmp	r3, r2
 800497e:	d100      	bne.n	8004982 <memset+0xa>
 8004980:	4770      	bx	lr
 8004982:	f803 1b01 	strb.w	r1, [r3], #1
 8004986:	e7f9      	b.n	800497c <memset+0x4>

08004988 <iprintf>:
 8004988:	b40f      	push	{r0, r1, r2, r3}
 800498a:	4b0a      	ldr	r3, [pc, #40]	; (80049b4 <iprintf+0x2c>)
 800498c:	b513      	push	{r0, r1, r4, lr}
 800498e:	681c      	ldr	r4, [r3, #0]
 8004990:	b124      	cbz	r4, 800499c <iprintf+0x14>
 8004992:	69a3      	ldr	r3, [r4, #24]
 8004994:	b913      	cbnz	r3, 800499c <iprintf+0x14>
 8004996:	4620      	mov	r0, r4
 8004998:	f000 faa8 	bl	8004eec <__sinit>
 800499c:	ab05      	add	r3, sp, #20
 800499e:	9a04      	ldr	r2, [sp, #16]
 80049a0:	68a1      	ldr	r1, [r4, #8]
 80049a2:	9301      	str	r3, [sp, #4]
 80049a4:	4620      	mov	r0, r4
 80049a6:	f000 fe0d 	bl	80055c4 <_vfiprintf_r>
 80049aa:	b002      	add	sp, #8
 80049ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049b0:	b004      	add	sp, #16
 80049b2:	4770      	bx	lr
 80049b4:	20000024 	.word	0x20000024

080049b8 <putchar>:
 80049b8:	4b09      	ldr	r3, [pc, #36]	; (80049e0 <putchar+0x28>)
 80049ba:	b513      	push	{r0, r1, r4, lr}
 80049bc:	681c      	ldr	r4, [r3, #0]
 80049be:	4601      	mov	r1, r0
 80049c0:	b134      	cbz	r4, 80049d0 <putchar+0x18>
 80049c2:	69a3      	ldr	r3, [r4, #24]
 80049c4:	b923      	cbnz	r3, 80049d0 <putchar+0x18>
 80049c6:	9001      	str	r0, [sp, #4]
 80049c8:	4620      	mov	r0, r4
 80049ca:	f000 fa8f 	bl	8004eec <__sinit>
 80049ce:	9901      	ldr	r1, [sp, #4]
 80049d0:	68a2      	ldr	r2, [r4, #8]
 80049d2:	4620      	mov	r0, r4
 80049d4:	b002      	add	sp, #8
 80049d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049da:	f001 b8b7 	b.w	8005b4c <_putc_r>
 80049de:	bf00      	nop
 80049e0:	20000024 	.word	0x20000024

080049e4 <_puts_r>:
 80049e4:	b570      	push	{r4, r5, r6, lr}
 80049e6:	460e      	mov	r6, r1
 80049e8:	4605      	mov	r5, r0
 80049ea:	b118      	cbz	r0, 80049f4 <_puts_r+0x10>
 80049ec:	6983      	ldr	r3, [r0, #24]
 80049ee:	b90b      	cbnz	r3, 80049f4 <_puts_r+0x10>
 80049f0:	f000 fa7c 	bl	8004eec <__sinit>
 80049f4:	69ab      	ldr	r3, [r5, #24]
 80049f6:	68ac      	ldr	r4, [r5, #8]
 80049f8:	b913      	cbnz	r3, 8004a00 <_puts_r+0x1c>
 80049fa:	4628      	mov	r0, r5
 80049fc:	f000 fa76 	bl	8004eec <__sinit>
 8004a00:	4b2c      	ldr	r3, [pc, #176]	; (8004ab4 <_puts_r+0xd0>)
 8004a02:	429c      	cmp	r4, r3
 8004a04:	d120      	bne.n	8004a48 <_puts_r+0x64>
 8004a06:	686c      	ldr	r4, [r5, #4]
 8004a08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a0a:	07db      	lsls	r3, r3, #31
 8004a0c:	d405      	bmi.n	8004a1a <_puts_r+0x36>
 8004a0e:	89a3      	ldrh	r3, [r4, #12]
 8004a10:	0598      	lsls	r0, r3, #22
 8004a12:	d402      	bmi.n	8004a1a <_puts_r+0x36>
 8004a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a16:	f000 fb07 	bl	8005028 <__retarget_lock_acquire_recursive>
 8004a1a:	89a3      	ldrh	r3, [r4, #12]
 8004a1c:	0719      	lsls	r1, r3, #28
 8004a1e:	d51d      	bpl.n	8004a5c <_puts_r+0x78>
 8004a20:	6923      	ldr	r3, [r4, #16]
 8004a22:	b1db      	cbz	r3, 8004a5c <_puts_r+0x78>
 8004a24:	3e01      	subs	r6, #1
 8004a26:	68a3      	ldr	r3, [r4, #8]
 8004a28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	60a3      	str	r3, [r4, #8]
 8004a30:	bb39      	cbnz	r1, 8004a82 <_puts_r+0x9e>
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	da38      	bge.n	8004aa8 <_puts_r+0xc4>
 8004a36:	4622      	mov	r2, r4
 8004a38:	210a      	movs	r1, #10
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	f000 f87c 	bl	8004b38 <__swbuf_r>
 8004a40:	3001      	adds	r0, #1
 8004a42:	d011      	beq.n	8004a68 <_puts_r+0x84>
 8004a44:	250a      	movs	r5, #10
 8004a46:	e011      	b.n	8004a6c <_puts_r+0x88>
 8004a48:	4b1b      	ldr	r3, [pc, #108]	; (8004ab8 <_puts_r+0xd4>)
 8004a4a:	429c      	cmp	r4, r3
 8004a4c:	d101      	bne.n	8004a52 <_puts_r+0x6e>
 8004a4e:	68ac      	ldr	r4, [r5, #8]
 8004a50:	e7da      	b.n	8004a08 <_puts_r+0x24>
 8004a52:	4b1a      	ldr	r3, [pc, #104]	; (8004abc <_puts_r+0xd8>)
 8004a54:	429c      	cmp	r4, r3
 8004a56:	bf08      	it	eq
 8004a58:	68ec      	ldreq	r4, [r5, #12]
 8004a5a:	e7d5      	b.n	8004a08 <_puts_r+0x24>
 8004a5c:	4621      	mov	r1, r4
 8004a5e:	4628      	mov	r0, r5
 8004a60:	f000 f8bc 	bl	8004bdc <__swsetup_r>
 8004a64:	2800      	cmp	r0, #0
 8004a66:	d0dd      	beq.n	8004a24 <_puts_r+0x40>
 8004a68:	f04f 35ff 	mov.w	r5, #4294967295
 8004a6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a6e:	07da      	lsls	r2, r3, #31
 8004a70:	d405      	bmi.n	8004a7e <_puts_r+0x9a>
 8004a72:	89a3      	ldrh	r3, [r4, #12]
 8004a74:	059b      	lsls	r3, r3, #22
 8004a76:	d402      	bmi.n	8004a7e <_puts_r+0x9a>
 8004a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a7a:	f000 fad6 	bl	800502a <__retarget_lock_release_recursive>
 8004a7e:	4628      	mov	r0, r5
 8004a80:	bd70      	pop	{r4, r5, r6, pc}
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	da04      	bge.n	8004a90 <_puts_r+0xac>
 8004a86:	69a2      	ldr	r2, [r4, #24]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	dc06      	bgt.n	8004a9a <_puts_r+0xb6>
 8004a8c:	290a      	cmp	r1, #10
 8004a8e:	d004      	beq.n	8004a9a <_puts_r+0xb6>
 8004a90:	6823      	ldr	r3, [r4, #0]
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	6022      	str	r2, [r4, #0]
 8004a96:	7019      	strb	r1, [r3, #0]
 8004a98:	e7c5      	b.n	8004a26 <_puts_r+0x42>
 8004a9a:	4622      	mov	r2, r4
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	f000 f84b 	bl	8004b38 <__swbuf_r>
 8004aa2:	3001      	adds	r0, #1
 8004aa4:	d1bf      	bne.n	8004a26 <_puts_r+0x42>
 8004aa6:	e7df      	b.n	8004a68 <_puts_r+0x84>
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	250a      	movs	r5, #10
 8004aac:	1c5a      	adds	r2, r3, #1
 8004aae:	6022      	str	r2, [r4, #0]
 8004ab0:	701d      	strb	r5, [r3, #0]
 8004ab2:	e7db      	b.n	8004a6c <_puts_r+0x88>
 8004ab4:	080087a8 	.word	0x080087a8
 8004ab8:	080087c8 	.word	0x080087c8
 8004abc:	08008788 	.word	0x08008788

08004ac0 <puts>:
 8004ac0:	4b02      	ldr	r3, [pc, #8]	; (8004acc <puts+0xc>)
 8004ac2:	4601      	mov	r1, r0
 8004ac4:	6818      	ldr	r0, [r3, #0]
 8004ac6:	f7ff bf8d 	b.w	80049e4 <_puts_r>
 8004aca:	bf00      	nop
 8004acc:	20000024 	.word	0x20000024

08004ad0 <sniprintf>:
 8004ad0:	b40c      	push	{r2, r3}
 8004ad2:	b530      	push	{r4, r5, lr}
 8004ad4:	4b17      	ldr	r3, [pc, #92]	; (8004b34 <sniprintf+0x64>)
 8004ad6:	1e0c      	subs	r4, r1, #0
 8004ad8:	681d      	ldr	r5, [r3, #0]
 8004ada:	b09d      	sub	sp, #116	; 0x74
 8004adc:	da08      	bge.n	8004af0 <sniprintf+0x20>
 8004ade:	238b      	movs	r3, #139	; 0x8b
 8004ae0:	602b      	str	r3, [r5, #0]
 8004ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae6:	b01d      	add	sp, #116	; 0x74
 8004ae8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004aec:	b002      	add	sp, #8
 8004aee:	4770      	bx	lr
 8004af0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004af4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004af8:	bf14      	ite	ne
 8004afa:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004afe:	4623      	moveq	r3, r4
 8004b00:	9304      	str	r3, [sp, #16]
 8004b02:	9307      	str	r3, [sp, #28]
 8004b04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b08:	9002      	str	r0, [sp, #8]
 8004b0a:	9006      	str	r0, [sp, #24]
 8004b0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004b10:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004b12:	ab21      	add	r3, sp, #132	; 0x84
 8004b14:	a902      	add	r1, sp, #8
 8004b16:	4628      	mov	r0, r5
 8004b18:	9301      	str	r3, [sp, #4]
 8004b1a:	f000 fc29 	bl	8005370 <_svfiprintf_r>
 8004b1e:	1c43      	adds	r3, r0, #1
 8004b20:	bfbc      	itt	lt
 8004b22:	238b      	movlt	r3, #139	; 0x8b
 8004b24:	602b      	strlt	r3, [r5, #0]
 8004b26:	2c00      	cmp	r4, #0
 8004b28:	d0dd      	beq.n	8004ae6 <sniprintf+0x16>
 8004b2a:	9b02      	ldr	r3, [sp, #8]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	701a      	strb	r2, [r3, #0]
 8004b30:	e7d9      	b.n	8004ae6 <sniprintf+0x16>
 8004b32:	bf00      	nop
 8004b34:	20000024 	.word	0x20000024

08004b38 <__swbuf_r>:
 8004b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3a:	460e      	mov	r6, r1
 8004b3c:	4614      	mov	r4, r2
 8004b3e:	4605      	mov	r5, r0
 8004b40:	b118      	cbz	r0, 8004b4a <__swbuf_r+0x12>
 8004b42:	6983      	ldr	r3, [r0, #24]
 8004b44:	b90b      	cbnz	r3, 8004b4a <__swbuf_r+0x12>
 8004b46:	f000 f9d1 	bl	8004eec <__sinit>
 8004b4a:	4b21      	ldr	r3, [pc, #132]	; (8004bd0 <__swbuf_r+0x98>)
 8004b4c:	429c      	cmp	r4, r3
 8004b4e:	d12b      	bne.n	8004ba8 <__swbuf_r+0x70>
 8004b50:	686c      	ldr	r4, [r5, #4]
 8004b52:	69a3      	ldr	r3, [r4, #24]
 8004b54:	60a3      	str	r3, [r4, #8]
 8004b56:	89a3      	ldrh	r3, [r4, #12]
 8004b58:	071a      	lsls	r2, r3, #28
 8004b5a:	d52f      	bpl.n	8004bbc <__swbuf_r+0x84>
 8004b5c:	6923      	ldr	r3, [r4, #16]
 8004b5e:	b36b      	cbz	r3, 8004bbc <__swbuf_r+0x84>
 8004b60:	6923      	ldr	r3, [r4, #16]
 8004b62:	6820      	ldr	r0, [r4, #0]
 8004b64:	1ac0      	subs	r0, r0, r3
 8004b66:	6963      	ldr	r3, [r4, #20]
 8004b68:	b2f6      	uxtb	r6, r6
 8004b6a:	4283      	cmp	r3, r0
 8004b6c:	4637      	mov	r7, r6
 8004b6e:	dc04      	bgt.n	8004b7a <__swbuf_r+0x42>
 8004b70:	4621      	mov	r1, r4
 8004b72:	4628      	mov	r0, r5
 8004b74:	f000 f926 	bl	8004dc4 <_fflush_r>
 8004b78:	bb30      	cbnz	r0, 8004bc8 <__swbuf_r+0x90>
 8004b7a:	68a3      	ldr	r3, [r4, #8]
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	60a3      	str	r3, [r4, #8]
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	1c5a      	adds	r2, r3, #1
 8004b84:	6022      	str	r2, [r4, #0]
 8004b86:	701e      	strb	r6, [r3, #0]
 8004b88:	6963      	ldr	r3, [r4, #20]
 8004b8a:	3001      	adds	r0, #1
 8004b8c:	4283      	cmp	r3, r0
 8004b8e:	d004      	beq.n	8004b9a <__swbuf_r+0x62>
 8004b90:	89a3      	ldrh	r3, [r4, #12]
 8004b92:	07db      	lsls	r3, r3, #31
 8004b94:	d506      	bpl.n	8004ba4 <__swbuf_r+0x6c>
 8004b96:	2e0a      	cmp	r6, #10
 8004b98:	d104      	bne.n	8004ba4 <__swbuf_r+0x6c>
 8004b9a:	4621      	mov	r1, r4
 8004b9c:	4628      	mov	r0, r5
 8004b9e:	f000 f911 	bl	8004dc4 <_fflush_r>
 8004ba2:	b988      	cbnz	r0, 8004bc8 <__swbuf_r+0x90>
 8004ba4:	4638      	mov	r0, r7
 8004ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ba8:	4b0a      	ldr	r3, [pc, #40]	; (8004bd4 <__swbuf_r+0x9c>)
 8004baa:	429c      	cmp	r4, r3
 8004bac:	d101      	bne.n	8004bb2 <__swbuf_r+0x7a>
 8004bae:	68ac      	ldr	r4, [r5, #8]
 8004bb0:	e7cf      	b.n	8004b52 <__swbuf_r+0x1a>
 8004bb2:	4b09      	ldr	r3, [pc, #36]	; (8004bd8 <__swbuf_r+0xa0>)
 8004bb4:	429c      	cmp	r4, r3
 8004bb6:	bf08      	it	eq
 8004bb8:	68ec      	ldreq	r4, [r5, #12]
 8004bba:	e7ca      	b.n	8004b52 <__swbuf_r+0x1a>
 8004bbc:	4621      	mov	r1, r4
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	f000 f80c 	bl	8004bdc <__swsetup_r>
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	d0cb      	beq.n	8004b60 <__swbuf_r+0x28>
 8004bc8:	f04f 37ff 	mov.w	r7, #4294967295
 8004bcc:	e7ea      	b.n	8004ba4 <__swbuf_r+0x6c>
 8004bce:	bf00      	nop
 8004bd0:	080087a8 	.word	0x080087a8
 8004bd4:	080087c8 	.word	0x080087c8
 8004bd8:	08008788 	.word	0x08008788

08004bdc <__swsetup_r>:
 8004bdc:	4b32      	ldr	r3, [pc, #200]	; (8004ca8 <__swsetup_r+0xcc>)
 8004bde:	b570      	push	{r4, r5, r6, lr}
 8004be0:	681d      	ldr	r5, [r3, #0]
 8004be2:	4606      	mov	r6, r0
 8004be4:	460c      	mov	r4, r1
 8004be6:	b125      	cbz	r5, 8004bf2 <__swsetup_r+0x16>
 8004be8:	69ab      	ldr	r3, [r5, #24]
 8004bea:	b913      	cbnz	r3, 8004bf2 <__swsetup_r+0x16>
 8004bec:	4628      	mov	r0, r5
 8004bee:	f000 f97d 	bl	8004eec <__sinit>
 8004bf2:	4b2e      	ldr	r3, [pc, #184]	; (8004cac <__swsetup_r+0xd0>)
 8004bf4:	429c      	cmp	r4, r3
 8004bf6:	d10f      	bne.n	8004c18 <__swsetup_r+0x3c>
 8004bf8:	686c      	ldr	r4, [r5, #4]
 8004bfa:	89a3      	ldrh	r3, [r4, #12]
 8004bfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c00:	0719      	lsls	r1, r3, #28
 8004c02:	d42c      	bmi.n	8004c5e <__swsetup_r+0x82>
 8004c04:	06dd      	lsls	r5, r3, #27
 8004c06:	d411      	bmi.n	8004c2c <__swsetup_r+0x50>
 8004c08:	2309      	movs	r3, #9
 8004c0a:	6033      	str	r3, [r6, #0]
 8004c0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c10:	81a3      	strh	r3, [r4, #12]
 8004c12:	f04f 30ff 	mov.w	r0, #4294967295
 8004c16:	e03e      	b.n	8004c96 <__swsetup_r+0xba>
 8004c18:	4b25      	ldr	r3, [pc, #148]	; (8004cb0 <__swsetup_r+0xd4>)
 8004c1a:	429c      	cmp	r4, r3
 8004c1c:	d101      	bne.n	8004c22 <__swsetup_r+0x46>
 8004c1e:	68ac      	ldr	r4, [r5, #8]
 8004c20:	e7eb      	b.n	8004bfa <__swsetup_r+0x1e>
 8004c22:	4b24      	ldr	r3, [pc, #144]	; (8004cb4 <__swsetup_r+0xd8>)
 8004c24:	429c      	cmp	r4, r3
 8004c26:	bf08      	it	eq
 8004c28:	68ec      	ldreq	r4, [r5, #12]
 8004c2a:	e7e6      	b.n	8004bfa <__swsetup_r+0x1e>
 8004c2c:	0758      	lsls	r0, r3, #29
 8004c2e:	d512      	bpl.n	8004c56 <__swsetup_r+0x7a>
 8004c30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c32:	b141      	cbz	r1, 8004c46 <__swsetup_r+0x6a>
 8004c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c38:	4299      	cmp	r1, r3
 8004c3a:	d002      	beq.n	8004c42 <__swsetup_r+0x66>
 8004c3c:	4630      	mov	r0, r6
 8004c3e:	f000 fa5b 	bl	80050f8 <_free_r>
 8004c42:	2300      	movs	r3, #0
 8004c44:	6363      	str	r3, [r4, #52]	; 0x34
 8004c46:	89a3      	ldrh	r3, [r4, #12]
 8004c48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c4c:	81a3      	strh	r3, [r4, #12]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	6063      	str	r3, [r4, #4]
 8004c52:	6923      	ldr	r3, [r4, #16]
 8004c54:	6023      	str	r3, [r4, #0]
 8004c56:	89a3      	ldrh	r3, [r4, #12]
 8004c58:	f043 0308 	orr.w	r3, r3, #8
 8004c5c:	81a3      	strh	r3, [r4, #12]
 8004c5e:	6923      	ldr	r3, [r4, #16]
 8004c60:	b94b      	cbnz	r3, 8004c76 <__swsetup_r+0x9a>
 8004c62:	89a3      	ldrh	r3, [r4, #12]
 8004c64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c6c:	d003      	beq.n	8004c76 <__swsetup_r+0x9a>
 8004c6e:	4621      	mov	r1, r4
 8004c70:	4630      	mov	r0, r6
 8004c72:	f000 fa01 	bl	8005078 <__smakebuf_r>
 8004c76:	89a0      	ldrh	r0, [r4, #12]
 8004c78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c7c:	f010 0301 	ands.w	r3, r0, #1
 8004c80:	d00a      	beq.n	8004c98 <__swsetup_r+0xbc>
 8004c82:	2300      	movs	r3, #0
 8004c84:	60a3      	str	r3, [r4, #8]
 8004c86:	6963      	ldr	r3, [r4, #20]
 8004c88:	425b      	negs	r3, r3
 8004c8a:	61a3      	str	r3, [r4, #24]
 8004c8c:	6923      	ldr	r3, [r4, #16]
 8004c8e:	b943      	cbnz	r3, 8004ca2 <__swsetup_r+0xc6>
 8004c90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c94:	d1ba      	bne.n	8004c0c <__swsetup_r+0x30>
 8004c96:	bd70      	pop	{r4, r5, r6, pc}
 8004c98:	0781      	lsls	r1, r0, #30
 8004c9a:	bf58      	it	pl
 8004c9c:	6963      	ldrpl	r3, [r4, #20]
 8004c9e:	60a3      	str	r3, [r4, #8]
 8004ca0:	e7f4      	b.n	8004c8c <__swsetup_r+0xb0>
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	e7f7      	b.n	8004c96 <__swsetup_r+0xba>
 8004ca6:	bf00      	nop
 8004ca8:	20000024 	.word	0x20000024
 8004cac:	080087a8 	.word	0x080087a8
 8004cb0:	080087c8 	.word	0x080087c8
 8004cb4:	08008788 	.word	0x08008788

08004cb8 <__sflush_r>:
 8004cb8:	898a      	ldrh	r2, [r1, #12]
 8004cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cbe:	4605      	mov	r5, r0
 8004cc0:	0710      	lsls	r0, r2, #28
 8004cc2:	460c      	mov	r4, r1
 8004cc4:	d458      	bmi.n	8004d78 <__sflush_r+0xc0>
 8004cc6:	684b      	ldr	r3, [r1, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	dc05      	bgt.n	8004cd8 <__sflush_r+0x20>
 8004ccc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	dc02      	bgt.n	8004cd8 <__sflush_r+0x20>
 8004cd2:	2000      	movs	r0, #0
 8004cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cda:	2e00      	cmp	r6, #0
 8004cdc:	d0f9      	beq.n	8004cd2 <__sflush_r+0x1a>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ce4:	682f      	ldr	r7, [r5, #0]
 8004ce6:	602b      	str	r3, [r5, #0]
 8004ce8:	d032      	beq.n	8004d50 <__sflush_r+0x98>
 8004cea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004cec:	89a3      	ldrh	r3, [r4, #12]
 8004cee:	075a      	lsls	r2, r3, #29
 8004cf0:	d505      	bpl.n	8004cfe <__sflush_r+0x46>
 8004cf2:	6863      	ldr	r3, [r4, #4]
 8004cf4:	1ac0      	subs	r0, r0, r3
 8004cf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cf8:	b10b      	cbz	r3, 8004cfe <__sflush_r+0x46>
 8004cfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cfc:	1ac0      	subs	r0, r0, r3
 8004cfe:	2300      	movs	r3, #0
 8004d00:	4602      	mov	r2, r0
 8004d02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d04:	6a21      	ldr	r1, [r4, #32]
 8004d06:	4628      	mov	r0, r5
 8004d08:	47b0      	blx	r6
 8004d0a:	1c43      	adds	r3, r0, #1
 8004d0c:	89a3      	ldrh	r3, [r4, #12]
 8004d0e:	d106      	bne.n	8004d1e <__sflush_r+0x66>
 8004d10:	6829      	ldr	r1, [r5, #0]
 8004d12:	291d      	cmp	r1, #29
 8004d14:	d82c      	bhi.n	8004d70 <__sflush_r+0xb8>
 8004d16:	4a2a      	ldr	r2, [pc, #168]	; (8004dc0 <__sflush_r+0x108>)
 8004d18:	40ca      	lsrs	r2, r1
 8004d1a:	07d6      	lsls	r6, r2, #31
 8004d1c:	d528      	bpl.n	8004d70 <__sflush_r+0xb8>
 8004d1e:	2200      	movs	r2, #0
 8004d20:	6062      	str	r2, [r4, #4]
 8004d22:	04d9      	lsls	r1, r3, #19
 8004d24:	6922      	ldr	r2, [r4, #16]
 8004d26:	6022      	str	r2, [r4, #0]
 8004d28:	d504      	bpl.n	8004d34 <__sflush_r+0x7c>
 8004d2a:	1c42      	adds	r2, r0, #1
 8004d2c:	d101      	bne.n	8004d32 <__sflush_r+0x7a>
 8004d2e:	682b      	ldr	r3, [r5, #0]
 8004d30:	b903      	cbnz	r3, 8004d34 <__sflush_r+0x7c>
 8004d32:	6560      	str	r0, [r4, #84]	; 0x54
 8004d34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d36:	602f      	str	r7, [r5, #0]
 8004d38:	2900      	cmp	r1, #0
 8004d3a:	d0ca      	beq.n	8004cd2 <__sflush_r+0x1a>
 8004d3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d40:	4299      	cmp	r1, r3
 8004d42:	d002      	beq.n	8004d4a <__sflush_r+0x92>
 8004d44:	4628      	mov	r0, r5
 8004d46:	f000 f9d7 	bl	80050f8 <_free_r>
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	6360      	str	r0, [r4, #52]	; 0x34
 8004d4e:	e7c1      	b.n	8004cd4 <__sflush_r+0x1c>
 8004d50:	6a21      	ldr	r1, [r4, #32]
 8004d52:	2301      	movs	r3, #1
 8004d54:	4628      	mov	r0, r5
 8004d56:	47b0      	blx	r6
 8004d58:	1c41      	adds	r1, r0, #1
 8004d5a:	d1c7      	bne.n	8004cec <__sflush_r+0x34>
 8004d5c:	682b      	ldr	r3, [r5, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0c4      	beq.n	8004cec <__sflush_r+0x34>
 8004d62:	2b1d      	cmp	r3, #29
 8004d64:	d001      	beq.n	8004d6a <__sflush_r+0xb2>
 8004d66:	2b16      	cmp	r3, #22
 8004d68:	d101      	bne.n	8004d6e <__sflush_r+0xb6>
 8004d6a:	602f      	str	r7, [r5, #0]
 8004d6c:	e7b1      	b.n	8004cd2 <__sflush_r+0x1a>
 8004d6e:	89a3      	ldrh	r3, [r4, #12]
 8004d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d74:	81a3      	strh	r3, [r4, #12]
 8004d76:	e7ad      	b.n	8004cd4 <__sflush_r+0x1c>
 8004d78:	690f      	ldr	r7, [r1, #16]
 8004d7a:	2f00      	cmp	r7, #0
 8004d7c:	d0a9      	beq.n	8004cd2 <__sflush_r+0x1a>
 8004d7e:	0793      	lsls	r3, r2, #30
 8004d80:	680e      	ldr	r6, [r1, #0]
 8004d82:	bf08      	it	eq
 8004d84:	694b      	ldreq	r3, [r1, #20]
 8004d86:	600f      	str	r7, [r1, #0]
 8004d88:	bf18      	it	ne
 8004d8a:	2300      	movne	r3, #0
 8004d8c:	eba6 0807 	sub.w	r8, r6, r7
 8004d90:	608b      	str	r3, [r1, #8]
 8004d92:	f1b8 0f00 	cmp.w	r8, #0
 8004d96:	dd9c      	ble.n	8004cd2 <__sflush_r+0x1a>
 8004d98:	6a21      	ldr	r1, [r4, #32]
 8004d9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d9c:	4643      	mov	r3, r8
 8004d9e:	463a      	mov	r2, r7
 8004da0:	4628      	mov	r0, r5
 8004da2:	47b0      	blx	r6
 8004da4:	2800      	cmp	r0, #0
 8004da6:	dc06      	bgt.n	8004db6 <__sflush_r+0xfe>
 8004da8:	89a3      	ldrh	r3, [r4, #12]
 8004daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dae:	81a3      	strh	r3, [r4, #12]
 8004db0:	f04f 30ff 	mov.w	r0, #4294967295
 8004db4:	e78e      	b.n	8004cd4 <__sflush_r+0x1c>
 8004db6:	4407      	add	r7, r0
 8004db8:	eba8 0800 	sub.w	r8, r8, r0
 8004dbc:	e7e9      	b.n	8004d92 <__sflush_r+0xda>
 8004dbe:	bf00      	nop
 8004dc0:	20400001 	.word	0x20400001

08004dc4 <_fflush_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	690b      	ldr	r3, [r1, #16]
 8004dc8:	4605      	mov	r5, r0
 8004dca:	460c      	mov	r4, r1
 8004dcc:	b913      	cbnz	r3, 8004dd4 <_fflush_r+0x10>
 8004dce:	2500      	movs	r5, #0
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	bd38      	pop	{r3, r4, r5, pc}
 8004dd4:	b118      	cbz	r0, 8004dde <_fflush_r+0x1a>
 8004dd6:	6983      	ldr	r3, [r0, #24]
 8004dd8:	b90b      	cbnz	r3, 8004dde <_fflush_r+0x1a>
 8004dda:	f000 f887 	bl	8004eec <__sinit>
 8004dde:	4b14      	ldr	r3, [pc, #80]	; (8004e30 <_fflush_r+0x6c>)
 8004de0:	429c      	cmp	r4, r3
 8004de2:	d11b      	bne.n	8004e1c <_fflush_r+0x58>
 8004de4:	686c      	ldr	r4, [r5, #4]
 8004de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0ef      	beq.n	8004dce <_fflush_r+0xa>
 8004dee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004df0:	07d0      	lsls	r0, r2, #31
 8004df2:	d404      	bmi.n	8004dfe <_fflush_r+0x3a>
 8004df4:	0599      	lsls	r1, r3, #22
 8004df6:	d402      	bmi.n	8004dfe <_fflush_r+0x3a>
 8004df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dfa:	f000 f915 	bl	8005028 <__retarget_lock_acquire_recursive>
 8004dfe:	4628      	mov	r0, r5
 8004e00:	4621      	mov	r1, r4
 8004e02:	f7ff ff59 	bl	8004cb8 <__sflush_r>
 8004e06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e08:	07da      	lsls	r2, r3, #31
 8004e0a:	4605      	mov	r5, r0
 8004e0c:	d4e0      	bmi.n	8004dd0 <_fflush_r+0xc>
 8004e0e:	89a3      	ldrh	r3, [r4, #12]
 8004e10:	059b      	lsls	r3, r3, #22
 8004e12:	d4dd      	bmi.n	8004dd0 <_fflush_r+0xc>
 8004e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e16:	f000 f908 	bl	800502a <__retarget_lock_release_recursive>
 8004e1a:	e7d9      	b.n	8004dd0 <_fflush_r+0xc>
 8004e1c:	4b05      	ldr	r3, [pc, #20]	; (8004e34 <_fflush_r+0x70>)
 8004e1e:	429c      	cmp	r4, r3
 8004e20:	d101      	bne.n	8004e26 <_fflush_r+0x62>
 8004e22:	68ac      	ldr	r4, [r5, #8]
 8004e24:	e7df      	b.n	8004de6 <_fflush_r+0x22>
 8004e26:	4b04      	ldr	r3, [pc, #16]	; (8004e38 <_fflush_r+0x74>)
 8004e28:	429c      	cmp	r4, r3
 8004e2a:	bf08      	it	eq
 8004e2c:	68ec      	ldreq	r4, [r5, #12]
 8004e2e:	e7da      	b.n	8004de6 <_fflush_r+0x22>
 8004e30:	080087a8 	.word	0x080087a8
 8004e34:	080087c8 	.word	0x080087c8
 8004e38:	08008788 	.word	0x08008788

08004e3c <std>:
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	b510      	push	{r4, lr}
 8004e40:	4604      	mov	r4, r0
 8004e42:	e9c0 3300 	strd	r3, r3, [r0]
 8004e46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e4a:	6083      	str	r3, [r0, #8]
 8004e4c:	8181      	strh	r1, [r0, #12]
 8004e4e:	6643      	str	r3, [r0, #100]	; 0x64
 8004e50:	81c2      	strh	r2, [r0, #14]
 8004e52:	6183      	str	r3, [r0, #24]
 8004e54:	4619      	mov	r1, r3
 8004e56:	2208      	movs	r2, #8
 8004e58:	305c      	adds	r0, #92	; 0x5c
 8004e5a:	f7ff fd8d 	bl	8004978 <memset>
 8004e5e:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <std+0x38>)
 8004e60:	6263      	str	r3, [r4, #36]	; 0x24
 8004e62:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <std+0x3c>)
 8004e64:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e66:	4b05      	ldr	r3, [pc, #20]	; (8004e7c <std+0x40>)
 8004e68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e6a:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <std+0x44>)
 8004e6c:	6224      	str	r4, [r4, #32]
 8004e6e:	6323      	str	r3, [r4, #48]	; 0x30
 8004e70:	bd10      	pop	{r4, pc}
 8004e72:	bf00      	nop
 8004e74:	08005bfd 	.word	0x08005bfd
 8004e78:	08005c1f 	.word	0x08005c1f
 8004e7c:	08005c57 	.word	0x08005c57
 8004e80:	08005c7b 	.word	0x08005c7b

08004e84 <_cleanup_r>:
 8004e84:	4901      	ldr	r1, [pc, #4]	; (8004e8c <_cleanup_r+0x8>)
 8004e86:	f000 b8af 	b.w	8004fe8 <_fwalk_reent>
 8004e8a:	bf00      	nop
 8004e8c:	08004dc5 	.word	0x08004dc5

08004e90 <__sfmoreglue>:
 8004e90:	b570      	push	{r4, r5, r6, lr}
 8004e92:	2268      	movs	r2, #104	; 0x68
 8004e94:	1e4d      	subs	r5, r1, #1
 8004e96:	4355      	muls	r5, r2
 8004e98:	460e      	mov	r6, r1
 8004e9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e9e:	f000 f997 	bl	80051d0 <_malloc_r>
 8004ea2:	4604      	mov	r4, r0
 8004ea4:	b140      	cbz	r0, 8004eb8 <__sfmoreglue+0x28>
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	e9c0 1600 	strd	r1, r6, [r0]
 8004eac:	300c      	adds	r0, #12
 8004eae:	60a0      	str	r0, [r4, #8]
 8004eb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004eb4:	f7ff fd60 	bl	8004978 <memset>
 8004eb8:	4620      	mov	r0, r4
 8004eba:	bd70      	pop	{r4, r5, r6, pc}

08004ebc <__sfp_lock_acquire>:
 8004ebc:	4801      	ldr	r0, [pc, #4]	; (8004ec4 <__sfp_lock_acquire+0x8>)
 8004ebe:	f000 b8b3 	b.w	8005028 <__retarget_lock_acquire_recursive>
 8004ec2:	bf00      	nop
 8004ec4:	200004e1 	.word	0x200004e1

08004ec8 <__sfp_lock_release>:
 8004ec8:	4801      	ldr	r0, [pc, #4]	; (8004ed0 <__sfp_lock_release+0x8>)
 8004eca:	f000 b8ae 	b.w	800502a <__retarget_lock_release_recursive>
 8004ece:	bf00      	nop
 8004ed0:	200004e1 	.word	0x200004e1

08004ed4 <__sinit_lock_acquire>:
 8004ed4:	4801      	ldr	r0, [pc, #4]	; (8004edc <__sinit_lock_acquire+0x8>)
 8004ed6:	f000 b8a7 	b.w	8005028 <__retarget_lock_acquire_recursive>
 8004eda:	bf00      	nop
 8004edc:	200004e2 	.word	0x200004e2

08004ee0 <__sinit_lock_release>:
 8004ee0:	4801      	ldr	r0, [pc, #4]	; (8004ee8 <__sinit_lock_release+0x8>)
 8004ee2:	f000 b8a2 	b.w	800502a <__retarget_lock_release_recursive>
 8004ee6:	bf00      	nop
 8004ee8:	200004e2 	.word	0x200004e2

08004eec <__sinit>:
 8004eec:	b510      	push	{r4, lr}
 8004eee:	4604      	mov	r4, r0
 8004ef0:	f7ff fff0 	bl	8004ed4 <__sinit_lock_acquire>
 8004ef4:	69a3      	ldr	r3, [r4, #24]
 8004ef6:	b11b      	cbz	r3, 8004f00 <__sinit+0x14>
 8004ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004efc:	f7ff bff0 	b.w	8004ee0 <__sinit_lock_release>
 8004f00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004f04:	6523      	str	r3, [r4, #80]	; 0x50
 8004f06:	4b13      	ldr	r3, [pc, #76]	; (8004f54 <__sinit+0x68>)
 8004f08:	4a13      	ldr	r2, [pc, #76]	; (8004f58 <__sinit+0x6c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004f0e:	42a3      	cmp	r3, r4
 8004f10:	bf04      	itt	eq
 8004f12:	2301      	moveq	r3, #1
 8004f14:	61a3      	streq	r3, [r4, #24]
 8004f16:	4620      	mov	r0, r4
 8004f18:	f000 f820 	bl	8004f5c <__sfp>
 8004f1c:	6060      	str	r0, [r4, #4]
 8004f1e:	4620      	mov	r0, r4
 8004f20:	f000 f81c 	bl	8004f5c <__sfp>
 8004f24:	60a0      	str	r0, [r4, #8]
 8004f26:	4620      	mov	r0, r4
 8004f28:	f000 f818 	bl	8004f5c <__sfp>
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	60e0      	str	r0, [r4, #12]
 8004f30:	2104      	movs	r1, #4
 8004f32:	6860      	ldr	r0, [r4, #4]
 8004f34:	f7ff ff82 	bl	8004e3c <std>
 8004f38:	68a0      	ldr	r0, [r4, #8]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	2109      	movs	r1, #9
 8004f3e:	f7ff ff7d 	bl	8004e3c <std>
 8004f42:	68e0      	ldr	r0, [r4, #12]
 8004f44:	2202      	movs	r2, #2
 8004f46:	2112      	movs	r1, #18
 8004f48:	f7ff ff78 	bl	8004e3c <std>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	61a3      	str	r3, [r4, #24]
 8004f50:	e7d2      	b.n	8004ef8 <__sinit+0xc>
 8004f52:	bf00      	nop
 8004f54:	08008784 	.word	0x08008784
 8004f58:	08004e85 	.word	0x08004e85

08004f5c <__sfp>:
 8004f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5e:	4607      	mov	r7, r0
 8004f60:	f7ff ffac 	bl	8004ebc <__sfp_lock_acquire>
 8004f64:	4b1e      	ldr	r3, [pc, #120]	; (8004fe0 <__sfp+0x84>)
 8004f66:	681e      	ldr	r6, [r3, #0]
 8004f68:	69b3      	ldr	r3, [r6, #24]
 8004f6a:	b913      	cbnz	r3, 8004f72 <__sfp+0x16>
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	f7ff ffbd 	bl	8004eec <__sinit>
 8004f72:	3648      	adds	r6, #72	; 0x48
 8004f74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	d503      	bpl.n	8004f84 <__sfp+0x28>
 8004f7c:	6833      	ldr	r3, [r6, #0]
 8004f7e:	b30b      	cbz	r3, 8004fc4 <__sfp+0x68>
 8004f80:	6836      	ldr	r6, [r6, #0]
 8004f82:	e7f7      	b.n	8004f74 <__sfp+0x18>
 8004f84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f88:	b9d5      	cbnz	r5, 8004fc0 <__sfp+0x64>
 8004f8a:	4b16      	ldr	r3, [pc, #88]	; (8004fe4 <__sfp+0x88>)
 8004f8c:	60e3      	str	r3, [r4, #12]
 8004f8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f92:	6665      	str	r5, [r4, #100]	; 0x64
 8004f94:	f000 f847 	bl	8005026 <__retarget_lock_init_recursive>
 8004f98:	f7ff ff96 	bl	8004ec8 <__sfp_lock_release>
 8004f9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004fa0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004fa4:	6025      	str	r5, [r4, #0]
 8004fa6:	61a5      	str	r5, [r4, #24]
 8004fa8:	2208      	movs	r2, #8
 8004faa:	4629      	mov	r1, r5
 8004fac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004fb0:	f7ff fce2 	bl	8004978 <memset>
 8004fb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004fb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fc0:	3468      	adds	r4, #104	; 0x68
 8004fc2:	e7d9      	b.n	8004f78 <__sfp+0x1c>
 8004fc4:	2104      	movs	r1, #4
 8004fc6:	4638      	mov	r0, r7
 8004fc8:	f7ff ff62 	bl	8004e90 <__sfmoreglue>
 8004fcc:	4604      	mov	r4, r0
 8004fce:	6030      	str	r0, [r6, #0]
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	d1d5      	bne.n	8004f80 <__sfp+0x24>
 8004fd4:	f7ff ff78 	bl	8004ec8 <__sfp_lock_release>
 8004fd8:	230c      	movs	r3, #12
 8004fda:	603b      	str	r3, [r7, #0]
 8004fdc:	e7ee      	b.n	8004fbc <__sfp+0x60>
 8004fde:	bf00      	nop
 8004fe0:	08008784 	.word	0x08008784
 8004fe4:	ffff0001 	.word	0xffff0001

08004fe8 <_fwalk_reent>:
 8004fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fec:	4606      	mov	r6, r0
 8004fee:	4688      	mov	r8, r1
 8004ff0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ff4:	2700      	movs	r7, #0
 8004ff6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ffa:	f1b9 0901 	subs.w	r9, r9, #1
 8004ffe:	d505      	bpl.n	800500c <_fwalk_reent+0x24>
 8005000:	6824      	ldr	r4, [r4, #0]
 8005002:	2c00      	cmp	r4, #0
 8005004:	d1f7      	bne.n	8004ff6 <_fwalk_reent+0xe>
 8005006:	4638      	mov	r0, r7
 8005008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800500c:	89ab      	ldrh	r3, [r5, #12]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d907      	bls.n	8005022 <_fwalk_reent+0x3a>
 8005012:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005016:	3301      	adds	r3, #1
 8005018:	d003      	beq.n	8005022 <_fwalk_reent+0x3a>
 800501a:	4629      	mov	r1, r5
 800501c:	4630      	mov	r0, r6
 800501e:	47c0      	blx	r8
 8005020:	4307      	orrs	r7, r0
 8005022:	3568      	adds	r5, #104	; 0x68
 8005024:	e7e9      	b.n	8004ffa <_fwalk_reent+0x12>

08005026 <__retarget_lock_init_recursive>:
 8005026:	4770      	bx	lr

08005028 <__retarget_lock_acquire_recursive>:
 8005028:	4770      	bx	lr

0800502a <__retarget_lock_release_recursive>:
 800502a:	4770      	bx	lr

0800502c <__swhatbuf_r>:
 800502c:	b570      	push	{r4, r5, r6, lr}
 800502e:	460e      	mov	r6, r1
 8005030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005034:	2900      	cmp	r1, #0
 8005036:	b096      	sub	sp, #88	; 0x58
 8005038:	4614      	mov	r4, r2
 800503a:	461d      	mov	r5, r3
 800503c:	da08      	bge.n	8005050 <__swhatbuf_r+0x24>
 800503e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	602a      	str	r2, [r5, #0]
 8005046:	061a      	lsls	r2, r3, #24
 8005048:	d410      	bmi.n	800506c <__swhatbuf_r+0x40>
 800504a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800504e:	e00e      	b.n	800506e <__swhatbuf_r+0x42>
 8005050:	466a      	mov	r2, sp
 8005052:	f000 fe39 	bl	8005cc8 <_fstat_r>
 8005056:	2800      	cmp	r0, #0
 8005058:	dbf1      	blt.n	800503e <__swhatbuf_r+0x12>
 800505a:	9a01      	ldr	r2, [sp, #4]
 800505c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005060:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005064:	425a      	negs	r2, r3
 8005066:	415a      	adcs	r2, r3
 8005068:	602a      	str	r2, [r5, #0]
 800506a:	e7ee      	b.n	800504a <__swhatbuf_r+0x1e>
 800506c:	2340      	movs	r3, #64	; 0x40
 800506e:	2000      	movs	r0, #0
 8005070:	6023      	str	r3, [r4, #0]
 8005072:	b016      	add	sp, #88	; 0x58
 8005074:	bd70      	pop	{r4, r5, r6, pc}
	...

08005078 <__smakebuf_r>:
 8005078:	898b      	ldrh	r3, [r1, #12]
 800507a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800507c:	079d      	lsls	r5, r3, #30
 800507e:	4606      	mov	r6, r0
 8005080:	460c      	mov	r4, r1
 8005082:	d507      	bpl.n	8005094 <__smakebuf_r+0x1c>
 8005084:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005088:	6023      	str	r3, [r4, #0]
 800508a:	6123      	str	r3, [r4, #16]
 800508c:	2301      	movs	r3, #1
 800508e:	6163      	str	r3, [r4, #20]
 8005090:	b002      	add	sp, #8
 8005092:	bd70      	pop	{r4, r5, r6, pc}
 8005094:	ab01      	add	r3, sp, #4
 8005096:	466a      	mov	r2, sp
 8005098:	f7ff ffc8 	bl	800502c <__swhatbuf_r>
 800509c:	9900      	ldr	r1, [sp, #0]
 800509e:	4605      	mov	r5, r0
 80050a0:	4630      	mov	r0, r6
 80050a2:	f000 f895 	bl	80051d0 <_malloc_r>
 80050a6:	b948      	cbnz	r0, 80050bc <__smakebuf_r+0x44>
 80050a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050ac:	059a      	lsls	r2, r3, #22
 80050ae:	d4ef      	bmi.n	8005090 <__smakebuf_r+0x18>
 80050b0:	f023 0303 	bic.w	r3, r3, #3
 80050b4:	f043 0302 	orr.w	r3, r3, #2
 80050b8:	81a3      	strh	r3, [r4, #12]
 80050ba:	e7e3      	b.n	8005084 <__smakebuf_r+0xc>
 80050bc:	4b0d      	ldr	r3, [pc, #52]	; (80050f4 <__smakebuf_r+0x7c>)
 80050be:	62b3      	str	r3, [r6, #40]	; 0x28
 80050c0:	89a3      	ldrh	r3, [r4, #12]
 80050c2:	6020      	str	r0, [r4, #0]
 80050c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c8:	81a3      	strh	r3, [r4, #12]
 80050ca:	9b00      	ldr	r3, [sp, #0]
 80050cc:	6163      	str	r3, [r4, #20]
 80050ce:	9b01      	ldr	r3, [sp, #4]
 80050d0:	6120      	str	r0, [r4, #16]
 80050d2:	b15b      	cbz	r3, 80050ec <__smakebuf_r+0x74>
 80050d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050d8:	4630      	mov	r0, r6
 80050da:	f000 fe07 	bl	8005cec <_isatty_r>
 80050de:	b128      	cbz	r0, 80050ec <__smakebuf_r+0x74>
 80050e0:	89a3      	ldrh	r3, [r4, #12]
 80050e2:	f023 0303 	bic.w	r3, r3, #3
 80050e6:	f043 0301 	orr.w	r3, r3, #1
 80050ea:	81a3      	strh	r3, [r4, #12]
 80050ec:	89a0      	ldrh	r0, [r4, #12]
 80050ee:	4305      	orrs	r5, r0
 80050f0:	81a5      	strh	r5, [r4, #12]
 80050f2:	e7cd      	b.n	8005090 <__smakebuf_r+0x18>
 80050f4:	08004e85 	.word	0x08004e85

080050f8 <_free_r>:
 80050f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050fa:	2900      	cmp	r1, #0
 80050fc:	d044      	beq.n	8005188 <_free_r+0x90>
 80050fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005102:	9001      	str	r0, [sp, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	f1a1 0404 	sub.w	r4, r1, #4
 800510a:	bfb8      	it	lt
 800510c:	18e4      	addlt	r4, r4, r3
 800510e:	f000 fe37 	bl	8005d80 <__malloc_lock>
 8005112:	4a1e      	ldr	r2, [pc, #120]	; (800518c <_free_r+0x94>)
 8005114:	9801      	ldr	r0, [sp, #4]
 8005116:	6813      	ldr	r3, [r2, #0]
 8005118:	b933      	cbnz	r3, 8005128 <_free_r+0x30>
 800511a:	6063      	str	r3, [r4, #4]
 800511c:	6014      	str	r4, [r2, #0]
 800511e:	b003      	add	sp, #12
 8005120:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005124:	f000 be32 	b.w	8005d8c <__malloc_unlock>
 8005128:	42a3      	cmp	r3, r4
 800512a:	d908      	bls.n	800513e <_free_r+0x46>
 800512c:	6825      	ldr	r5, [r4, #0]
 800512e:	1961      	adds	r1, r4, r5
 8005130:	428b      	cmp	r3, r1
 8005132:	bf01      	itttt	eq
 8005134:	6819      	ldreq	r1, [r3, #0]
 8005136:	685b      	ldreq	r3, [r3, #4]
 8005138:	1949      	addeq	r1, r1, r5
 800513a:	6021      	streq	r1, [r4, #0]
 800513c:	e7ed      	b.n	800511a <_free_r+0x22>
 800513e:	461a      	mov	r2, r3
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	b10b      	cbz	r3, 8005148 <_free_r+0x50>
 8005144:	42a3      	cmp	r3, r4
 8005146:	d9fa      	bls.n	800513e <_free_r+0x46>
 8005148:	6811      	ldr	r1, [r2, #0]
 800514a:	1855      	adds	r5, r2, r1
 800514c:	42a5      	cmp	r5, r4
 800514e:	d10b      	bne.n	8005168 <_free_r+0x70>
 8005150:	6824      	ldr	r4, [r4, #0]
 8005152:	4421      	add	r1, r4
 8005154:	1854      	adds	r4, r2, r1
 8005156:	42a3      	cmp	r3, r4
 8005158:	6011      	str	r1, [r2, #0]
 800515a:	d1e0      	bne.n	800511e <_free_r+0x26>
 800515c:	681c      	ldr	r4, [r3, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	6053      	str	r3, [r2, #4]
 8005162:	4421      	add	r1, r4
 8005164:	6011      	str	r1, [r2, #0]
 8005166:	e7da      	b.n	800511e <_free_r+0x26>
 8005168:	d902      	bls.n	8005170 <_free_r+0x78>
 800516a:	230c      	movs	r3, #12
 800516c:	6003      	str	r3, [r0, #0]
 800516e:	e7d6      	b.n	800511e <_free_r+0x26>
 8005170:	6825      	ldr	r5, [r4, #0]
 8005172:	1961      	adds	r1, r4, r5
 8005174:	428b      	cmp	r3, r1
 8005176:	bf04      	itt	eq
 8005178:	6819      	ldreq	r1, [r3, #0]
 800517a:	685b      	ldreq	r3, [r3, #4]
 800517c:	6063      	str	r3, [r4, #4]
 800517e:	bf04      	itt	eq
 8005180:	1949      	addeq	r1, r1, r5
 8005182:	6021      	streq	r1, [r4, #0]
 8005184:	6054      	str	r4, [r2, #4]
 8005186:	e7ca      	b.n	800511e <_free_r+0x26>
 8005188:	b003      	add	sp, #12
 800518a:	bd30      	pop	{r4, r5, pc}
 800518c:	200004e4 	.word	0x200004e4

08005190 <sbrk_aligned>:
 8005190:	b570      	push	{r4, r5, r6, lr}
 8005192:	4e0e      	ldr	r6, [pc, #56]	; (80051cc <sbrk_aligned+0x3c>)
 8005194:	460c      	mov	r4, r1
 8005196:	6831      	ldr	r1, [r6, #0]
 8005198:	4605      	mov	r5, r0
 800519a:	b911      	cbnz	r1, 80051a2 <sbrk_aligned+0x12>
 800519c:	f000 fd1e 	bl	8005bdc <_sbrk_r>
 80051a0:	6030      	str	r0, [r6, #0]
 80051a2:	4621      	mov	r1, r4
 80051a4:	4628      	mov	r0, r5
 80051a6:	f000 fd19 	bl	8005bdc <_sbrk_r>
 80051aa:	1c43      	adds	r3, r0, #1
 80051ac:	d00a      	beq.n	80051c4 <sbrk_aligned+0x34>
 80051ae:	1cc4      	adds	r4, r0, #3
 80051b0:	f024 0403 	bic.w	r4, r4, #3
 80051b4:	42a0      	cmp	r0, r4
 80051b6:	d007      	beq.n	80051c8 <sbrk_aligned+0x38>
 80051b8:	1a21      	subs	r1, r4, r0
 80051ba:	4628      	mov	r0, r5
 80051bc:	f000 fd0e 	bl	8005bdc <_sbrk_r>
 80051c0:	3001      	adds	r0, #1
 80051c2:	d101      	bne.n	80051c8 <sbrk_aligned+0x38>
 80051c4:	f04f 34ff 	mov.w	r4, #4294967295
 80051c8:	4620      	mov	r0, r4
 80051ca:	bd70      	pop	{r4, r5, r6, pc}
 80051cc:	200004e8 	.word	0x200004e8

080051d0 <_malloc_r>:
 80051d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051d4:	1ccd      	adds	r5, r1, #3
 80051d6:	f025 0503 	bic.w	r5, r5, #3
 80051da:	3508      	adds	r5, #8
 80051dc:	2d0c      	cmp	r5, #12
 80051de:	bf38      	it	cc
 80051e0:	250c      	movcc	r5, #12
 80051e2:	2d00      	cmp	r5, #0
 80051e4:	4607      	mov	r7, r0
 80051e6:	db01      	blt.n	80051ec <_malloc_r+0x1c>
 80051e8:	42a9      	cmp	r1, r5
 80051ea:	d905      	bls.n	80051f8 <_malloc_r+0x28>
 80051ec:	230c      	movs	r3, #12
 80051ee:	603b      	str	r3, [r7, #0]
 80051f0:	2600      	movs	r6, #0
 80051f2:	4630      	mov	r0, r6
 80051f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051f8:	4e2e      	ldr	r6, [pc, #184]	; (80052b4 <_malloc_r+0xe4>)
 80051fa:	f000 fdc1 	bl	8005d80 <__malloc_lock>
 80051fe:	6833      	ldr	r3, [r6, #0]
 8005200:	461c      	mov	r4, r3
 8005202:	bb34      	cbnz	r4, 8005252 <_malloc_r+0x82>
 8005204:	4629      	mov	r1, r5
 8005206:	4638      	mov	r0, r7
 8005208:	f7ff ffc2 	bl	8005190 <sbrk_aligned>
 800520c:	1c43      	adds	r3, r0, #1
 800520e:	4604      	mov	r4, r0
 8005210:	d14d      	bne.n	80052ae <_malloc_r+0xde>
 8005212:	6834      	ldr	r4, [r6, #0]
 8005214:	4626      	mov	r6, r4
 8005216:	2e00      	cmp	r6, #0
 8005218:	d140      	bne.n	800529c <_malloc_r+0xcc>
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	4631      	mov	r1, r6
 800521e:	4638      	mov	r0, r7
 8005220:	eb04 0803 	add.w	r8, r4, r3
 8005224:	f000 fcda 	bl	8005bdc <_sbrk_r>
 8005228:	4580      	cmp	r8, r0
 800522a:	d13a      	bne.n	80052a2 <_malloc_r+0xd2>
 800522c:	6821      	ldr	r1, [r4, #0]
 800522e:	3503      	adds	r5, #3
 8005230:	1a6d      	subs	r5, r5, r1
 8005232:	f025 0503 	bic.w	r5, r5, #3
 8005236:	3508      	adds	r5, #8
 8005238:	2d0c      	cmp	r5, #12
 800523a:	bf38      	it	cc
 800523c:	250c      	movcc	r5, #12
 800523e:	4629      	mov	r1, r5
 8005240:	4638      	mov	r0, r7
 8005242:	f7ff ffa5 	bl	8005190 <sbrk_aligned>
 8005246:	3001      	adds	r0, #1
 8005248:	d02b      	beq.n	80052a2 <_malloc_r+0xd2>
 800524a:	6823      	ldr	r3, [r4, #0]
 800524c:	442b      	add	r3, r5
 800524e:	6023      	str	r3, [r4, #0]
 8005250:	e00e      	b.n	8005270 <_malloc_r+0xa0>
 8005252:	6822      	ldr	r2, [r4, #0]
 8005254:	1b52      	subs	r2, r2, r5
 8005256:	d41e      	bmi.n	8005296 <_malloc_r+0xc6>
 8005258:	2a0b      	cmp	r2, #11
 800525a:	d916      	bls.n	800528a <_malloc_r+0xba>
 800525c:	1961      	adds	r1, r4, r5
 800525e:	42a3      	cmp	r3, r4
 8005260:	6025      	str	r5, [r4, #0]
 8005262:	bf18      	it	ne
 8005264:	6059      	strne	r1, [r3, #4]
 8005266:	6863      	ldr	r3, [r4, #4]
 8005268:	bf08      	it	eq
 800526a:	6031      	streq	r1, [r6, #0]
 800526c:	5162      	str	r2, [r4, r5]
 800526e:	604b      	str	r3, [r1, #4]
 8005270:	4638      	mov	r0, r7
 8005272:	f104 060b 	add.w	r6, r4, #11
 8005276:	f000 fd89 	bl	8005d8c <__malloc_unlock>
 800527a:	f026 0607 	bic.w	r6, r6, #7
 800527e:	1d23      	adds	r3, r4, #4
 8005280:	1af2      	subs	r2, r6, r3
 8005282:	d0b6      	beq.n	80051f2 <_malloc_r+0x22>
 8005284:	1b9b      	subs	r3, r3, r6
 8005286:	50a3      	str	r3, [r4, r2]
 8005288:	e7b3      	b.n	80051f2 <_malloc_r+0x22>
 800528a:	6862      	ldr	r2, [r4, #4]
 800528c:	42a3      	cmp	r3, r4
 800528e:	bf0c      	ite	eq
 8005290:	6032      	streq	r2, [r6, #0]
 8005292:	605a      	strne	r2, [r3, #4]
 8005294:	e7ec      	b.n	8005270 <_malloc_r+0xa0>
 8005296:	4623      	mov	r3, r4
 8005298:	6864      	ldr	r4, [r4, #4]
 800529a:	e7b2      	b.n	8005202 <_malloc_r+0x32>
 800529c:	4634      	mov	r4, r6
 800529e:	6876      	ldr	r6, [r6, #4]
 80052a0:	e7b9      	b.n	8005216 <_malloc_r+0x46>
 80052a2:	230c      	movs	r3, #12
 80052a4:	603b      	str	r3, [r7, #0]
 80052a6:	4638      	mov	r0, r7
 80052a8:	f000 fd70 	bl	8005d8c <__malloc_unlock>
 80052ac:	e7a1      	b.n	80051f2 <_malloc_r+0x22>
 80052ae:	6025      	str	r5, [r4, #0]
 80052b0:	e7de      	b.n	8005270 <_malloc_r+0xa0>
 80052b2:	bf00      	nop
 80052b4:	200004e4 	.word	0x200004e4

080052b8 <__ssputs_r>:
 80052b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052bc:	688e      	ldr	r6, [r1, #8]
 80052be:	429e      	cmp	r6, r3
 80052c0:	4682      	mov	sl, r0
 80052c2:	460c      	mov	r4, r1
 80052c4:	4690      	mov	r8, r2
 80052c6:	461f      	mov	r7, r3
 80052c8:	d838      	bhi.n	800533c <__ssputs_r+0x84>
 80052ca:	898a      	ldrh	r2, [r1, #12]
 80052cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80052d0:	d032      	beq.n	8005338 <__ssputs_r+0x80>
 80052d2:	6825      	ldr	r5, [r4, #0]
 80052d4:	6909      	ldr	r1, [r1, #16]
 80052d6:	eba5 0901 	sub.w	r9, r5, r1
 80052da:	6965      	ldr	r5, [r4, #20]
 80052dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052e4:	3301      	adds	r3, #1
 80052e6:	444b      	add	r3, r9
 80052e8:	106d      	asrs	r5, r5, #1
 80052ea:	429d      	cmp	r5, r3
 80052ec:	bf38      	it	cc
 80052ee:	461d      	movcc	r5, r3
 80052f0:	0553      	lsls	r3, r2, #21
 80052f2:	d531      	bpl.n	8005358 <__ssputs_r+0xa0>
 80052f4:	4629      	mov	r1, r5
 80052f6:	f7ff ff6b 	bl	80051d0 <_malloc_r>
 80052fa:	4606      	mov	r6, r0
 80052fc:	b950      	cbnz	r0, 8005314 <__ssputs_r+0x5c>
 80052fe:	230c      	movs	r3, #12
 8005300:	f8ca 3000 	str.w	r3, [sl]
 8005304:	89a3      	ldrh	r3, [r4, #12]
 8005306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800530a:	81a3      	strh	r3, [r4, #12]
 800530c:	f04f 30ff 	mov.w	r0, #4294967295
 8005310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005314:	6921      	ldr	r1, [r4, #16]
 8005316:	464a      	mov	r2, r9
 8005318:	f000 fd0a 	bl	8005d30 <memcpy>
 800531c:	89a3      	ldrh	r3, [r4, #12]
 800531e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005326:	81a3      	strh	r3, [r4, #12]
 8005328:	6126      	str	r6, [r4, #16]
 800532a:	6165      	str	r5, [r4, #20]
 800532c:	444e      	add	r6, r9
 800532e:	eba5 0509 	sub.w	r5, r5, r9
 8005332:	6026      	str	r6, [r4, #0]
 8005334:	60a5      	str	r5, [r4, #8]
 8005336:	463e      	mov	r6, r7
 8005338:	42be      	cmp	r6, r7
 800533a:	d900      	bls.n	800533e <__ssputs_r+0x86>
 800533c:	463e      	mov	r6, r7
 800533e:	6820      	ldr	r0, [r4, #0]
 8005340:	4632      	mov	r2, r6
 8005342:	4641      	mov	r1, r8
 8005344:	f000 fd02 	bl	8005d4c <memmove>
 8005348:	68a3      	ldr	r3, [r4, #8]
 800534a:	1b9b      	subs	r3, r3, r6
 800534c:	60a3      	str	r3, [r4, #8]
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	4433      	add	r3, r6
 8005352:	6023      	str	r3, [r4, #0]
 8005354:	2000      	movs	r0, #0
 8005356:	e7db      	b.n	8005310 <__ssputs_r+0x58>
 8005358:	462a      	mov	r2, r5
 800535a:	f000 fd1d 	bl	8005d98 <_realloc_r>
 800535e:	4606      	mov	r6, r0
 8005360:	2800      	cmp	r0, #0
 8005362:	d1e1      	bne.n	8005328 <__ssputs_r+0x70>
 8005364:	6921      	ldr	r1, [r4, #16]
 8005366:	4650      	mov	r0, sl
 8005368:	f7ff fec6 	bl	80050f8 <_free_r>
 800536c:	e7c7      	b.n	80052fe <__ssputs_r+0x46>
	...

08005370 <_svfiprintf_r>:
 8005370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005374:	4698      	mov	r8, r3
 8005376:	898b      	ldrh	r3, [r1, #12]
 8005378:	061b      	lsls	r3, r3, #24
 800537a:	b09d      	sub	sp, #116	; 0x74
 800537c:	4607      	mov	r7, r0
 800537e:	460d      	mov	r5, r1
 8005380:	4614      	mov	r4, r2
 8005382:	d50e      	bpl.n	80053a2 <_svfiprintf_r+0x32>
 8005384:	690b      	ldr	r3, [r1, #16]
 8005386:	b963      	cbnz	r3, 80053a2 <_svfiprintf_r+0x32>
 8005388:	2140      	movs	r1, #64	; 0x40
 800538a:	f7ff ff21 	bl	80051d0 <_malloc_r>
 800538e:	6028      	str	r0, [r5, #0]
 8005390:	6128      	str	r0, [r5, #16]
 8005392:	b920      	cbnz	r0, 800539e <_svfiprintf_r+0x2e>
 8005394:	230c      	movs	r3, #12
 8005396:	603b      	str	r3, [r7, #0]
 8005398:	f04f 30ff 	mov.w	r0, #4294967295
 800539c:	e0d1      	b.n	8005542 <_svfiprintf_r+0x1d2>
 800539e:	2340      	movs	r3, #64	; 0x40
 80053a0:	616b      	str	r3, [r5, #20]
 80053a2:	2300      	movs	r3, #0
 80053a4:	9309      	str	r3, [sp, #36]	; 0x24
 80053a6:	2320      	movs	r3, #32
 80053a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80053b0:	2330      	movs	r3, #48	; 0x30
 80053b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800555c <_svfiprintf_r+0x1ec>
 80053b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053ba:	f04f 0901 	mov.w	r9, #1
 80053be:	4623      	mov	r3, r4
 80053c0:	469a      	mov	sl, r3
 80053c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053c6:	b10a      	cbz	r2, 80053cc <_svfiprintf_r+0x5c>
 80053c8:	2a25      	cmp	r2, #37	; 0x25
 80053ca:	d1f9      	bne.n	80053c0 <_svfiprintf_r+0x50>
 80053cc:	ebba 0b04 	subs.w	fp, sl, r4
 80053d0:	d00b      	beq.n	80053ea <_svfiprintf_r+0x7a>
 80053d2:	465b      	mov	r3, fp
 80053d4:	4622      	mov	r2, r4
 80053d6:	4629      	mov	r1, r5
 80053d8:	4638      	mov	r0, r7
 80053da:	f7ff ff6d 	bl	80052b8 <__ssputs_r>
 80053de:	3001      	adds	r0, #1
 80053e0:	f000 80aa 	beq.w	8005538 <_svfiprintf_r+0x1c8>
 80053e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053e6:	445a      	add	r2, fp
 80053e8:	9209      	str	r2, [sp, #36]	; 0x24
 80053ea:	f89a 3000 	ldrb.w	r3, [sl]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f000 80a2 	beq.w	8005538 <_svfiprintf_r+0x1c8>
 80053f4:	2300      	movs	r3, #0
 80053f6:	f04f 32ff 	mov.w	r2, #4294967295
 80053fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053fe:	f10a 0a01 	add.w	sl, sl, #1
 8005402:	9304      	str	r3, [sp, #16]
 8005404:	9307      	str	r3, [sp, #28]
 8005406:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800540a:	931a      	str	r3, [sp, #104]	; 0x68
 800540c:	4654      	mov	r4, sl
 800540e:	2205      	movs	r2, #5
 8005410:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005414:	4851      	ldr	r0, [pc, #324]	; (800555c <_svfiprintf_r+0x1ec>)
 8005416:	f7fa fee3 	bl	80001e0 <memchr>
 800541a:	9a04      	ldr	r2, [sp, #16]
 800541c:	b9d8      	cbnz	r0, 8005456 <_svfiprintf_r+0xe6>
 800541e:	06d0      	lsls	r0, r2, #27
 8005420:	bf44      	itt	mi
 8005422:	2320      	movmi	r3, #32
 8005424:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005428:	0711      	lsls	r1, r2, #28
 800542a:	bf44      	itt	mi
 800542c:	232b      	movmi	r3, #43	; 0x2b
 800542e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005432:	f89a 3000 	ldrb.w	r3, [sl]
 8005436:	2b2a      	cmp	r3, #42	; 0x2a
 8005438:	d015      	beq.n	8005466 <_svfiprintf_r+0xf6>
 800543a:	9a07      	ldr	r2, [sp, #28]
 800543c:	4654      	mov	r4, sl
 800543e:	2000      	movs	r0, #0
 8005440:	f04f 0c0a 	mov.w	ip, #10
 8005444:	4621      	mov	r1, r4
 8005446:	f811 3b01 	ldrb.w	r3, [r1], #1
 800544a:	3b30      	subs	r3, #48	; 0x30
 800544c:	2b09      	cmp	r3, #9
 800544e:	d94e      	bls.n	80054ee <_svfiprintf_r+0x17e>
 8005450:	b1b0      	cbz	r0, 8005480 <_svfiprintf_r+0x110>
 8005452:	9207      	str	r2, [sp, #28]
 8005454:	e014      	b.n	8005480 <_svfiprintf_r+0x110>
 8005456:	eba0 0308 	sub.w	r3, r0, r8
 800545a:	fa09 f303 	lsl.w	r3, r9, r3
 800545e:	4313      	orrs	r3, r2
 8005460:	9304      	str	r3, [sp, #16]
 8005462:	46a2      	mov	sl, r4
 8005464:	e7d2      	b.n	800540c <_svfiprintf_r+0x9c>
 8005466:	9b03      	ldr	r3, [sp, #12]
 8005468:	1d19      	adds	r1, r3, #4
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	9103      	str	r1, [sp, #12]
 800546e:	2b00      	cmp	r3, #0
 8005470:	bfbb      	ittet	lt
 8005472:	425b      	neglt	r3, r3
 8005474:	f042 0202 	orrlt.w	r2, r2, #2
 8005478:	9307      	strge	r3, [sp, #28]
 800547a:	9307      	strlt	r3, [sp, #28]
 800547c:	bfb8      	it	lt
 800547e:	9204      	strlt	r2, [sp, #16]
 8005480:	7823      	ldrb	r3, [r4, #0]
 8005482:	2b2e      	cmp	r3, #46	; 0x2e
 8005484:	d10c      	bne.n	80054a0 <_svfiprintf_r+0x130>
 8005486:	7863      	ldrb	r3, [r4, #1]
 8005488:	2b2a      	cmp	r3, #42	; 0x2a
 800548a:	d135      	bne.n	80054f8 <_svfiprintf_r+0x188>
 800548c:	9b03      	ldr	r3, [sp, #12]
 800548e:	1d1a      	adds	r2, r3, #4
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	9203      	str	r2, [sp, #12]
 8005494:	2b00      	cmp	r3, #0
 8005496:	bfb8      	it	lt
 8005498:	f04f 33ff 	movlt.w	r3, #4294967295
 800549c:	3402      	adds	r4, #2
 800549e:	9305      	str	r3, [sp, #20]
 80054a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800556c <_svfiprintf_r+0x1fc>
 80054a4:	7821      	ldrb	r1, [r4, #0]
 80054a6:	2203      	movs	r2, #3
 80054a8:	4650      	mov	r0, sl
 80054aa:	f7fa fe99 	bl	80001e0 <memchr>
 80054ae:	b140      	cbz	r0, 80054c2 <_svfiprintf_r+0x152>
 80054b0:	2340      	movs	r3, #64	; 0x40
 80054b2:	eba0 000a 	sub.w	r0, r0, sl
 80054b6:	fa03 f000 	lsl.w	r0, r3, r0
 80054ba:	9b04      	ldr	r3, [sp, #16]
 80054bc:	4303      	orrs	r3, r0
 80054be:	3401      	adds	r4, #1
 80054c0:	9304      	str	r3, [sp, #16]
 80054c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054c6:	4826      	ldr	r0, [pc, #152]	; (8005560 <_svfiprintf_r+0x1f0>)
 80054c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054cc:	2206      	movs	r2, #6
 80054ce:	f7fa fe87 	bl	80001e0 <memchr>
 80054d2:	2800      	cmp	r0, #0
 80054d4:	d038      	beq.n	8005548 <_svfiprintf_r+0x1d8>
 80054d6:	4b23      	ldr	r3, [pc, #140]	; (8005564 <_svfiprintf_r+0x1f4>)
 80054d8:	bb1b      	cbnz	r3, 8005522 <_svfiprintf_r+0x1b2>
 80054da:	9b03      	ldr	r3, [sp, #12]
 80054dc:	3307      	adds	r3, #7
 80054de:	f023 0307 	bic.w	r3, r3, #7
 80054e2:	3308      	adds	r3, #8
 80054e4:	9303      	str	r3, [sp, #12]
 80054e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054e8:	4433      	add	r3, r6
 80054ea:	9309      	str	r3, [sp, #36]	; 0x24
 80054ec:	e767      	b.n	80053be <_svfiprintf_r+0x4e>
 80054ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80054f2:	460c      	mov	r4, r1
 80054f4:	2001      	movs	r0, #1
 80054f6:	e7a5      	b.n	8005444 <_svfiprintf_r+0xd4>
 80054f8:	2300      	movs	r3, #0
 80054fa:	3401      	adds	r4, #1
 80054fc:	9305      	str	r3, [sp, #20]
 80054fe:	4619      	mov	r1, r3
 8005500:	f04f 0c0a 	mov.w	ip, #10
 8005504:	4620      	mov	r0, r4
 8005506:	f810 2b01 	ldrb.w	r2, [r0], #1
 800550a:	3a30      	subs	r2, #48	; 0x30
 800550c:	2a09      	cmp	r2, #9
 800550e:	d903      	bls.n	8005518 <_svfiprintf_r+0x1a8>
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0c5      	beq.n	80054a0 <_svfiprintf_r+0x130>
 8005514:	9105      	str	r1, [sp, #20]
 8005516:	e7c3      	b.n	80054a0 <_svfiprintf_r+0x130>
 8005518:	fb0c 2101 	mla	r1, ip, r1, r2
 800551c:	4604      	mov	r4, r0
 800551e:	2301      	movs	r3, #1
 8005520:	e7f0      	b.n	8005504 <_svfiprintf_r+0x194>
 8005522:	ab03      	add	r3, sp, #12
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	462a      	mov	r2, r5
 8005528:	4b0f      	ldr	r3, [pc, #60]	; (8005568 <_svfiprintf_r+0x1f8>)
 800552a:	a904      	add	r1, sp, #16
 800552c:	4638      	mov	r0, r7
 800552e:	f3af 8000 	nop.w
 8005532:	1c42      	adds	r2, r0, #1
 8005534:	4606      	mov	r6, r0
 8005536:	d1d6      	bne.n	80054e6 <_svfiprintf_r+0x176>
 8005538:	89ab      	ldrh	r3, [r5, #12]
 800553a:	065b      	lsls	r3, r3, #25
 800553c:	f53f af2c 	bmi.w	8005398 <_svfiprintf_r+0x28>
 8005540:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005542:	b01d      	add	sp, #116	; 0x74
 8005544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005548:	ab03      	add	r3, sp, #12
 800554a:	9300      	str	r3, [sp, #0]
 800554c:	462a      	mov	r2, r5
 800554e:	4b06      	ldr	r3, [pc, #24]	; (8005568 <_svfiprintf_r+0x1f8>)
 8005550:	a904      	add	r1, sp, #16
 8005552:	4638      	mov	r0, r7
 8005554:	f000 f9d4 	bl	8005900 <_printf_i>
 8005558:	e7eb      	b.n	8005532 <_svfiprintf_r+0x1c2>
 800555a:	bf00      	nop
 800555c:	080087e8 	.word	0x080087e8
 8005560:	080087f2 	.word	0x080087f2
 8005564:	00000000 	.word	0x00000000
 8005568:	080052b9 	.word	0x080052b9
 800556c:	080087ee 	.word	0x080087ee

08005570 <__sfputc_r>:
 8005570:	6893      	ldr	r3, [r2, #8]
 8005572:	3b01      	subs	r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	b410      	push	{r4}
 8005578:	6093      	str	r3, [r2, #8]
 800557a:	da08      	bge.n	800558e <__sfputc_r+0x1e>
 800557c:	6994      	ldr	r4, [r2, #24]
 800557e:	42a3      	cmp	r3, r4
 8005580:	db01      	blt.n	8005586 <__sfputc_r+0x16>
 8005582:	290a      	cmp	r1, #10
 8005584:	d103      	bne.n	800558e <__sfputc_r+0x1e>
 8005586:	f85d 4b04 	ldr.w	r4, [sp], #4
 800558a:	f7ff bad5 	b.w	8004b38 <__swbuf_r>
 800558e:	6813      	ldr	r3, [r2, #0]
 8005590:	1c58      	adds	r0, r3, #1
 8005592:	6010      	str	r0, [r2, #0]
 8005594:	7019      	strb	r1, [r3, #0]
 8005596:	4608      	mov	r0, r1
 8005598:	f85d 4b04 	ldr.w	r4, [sp], #4
 800559c:	4770      	bx	lr

0800559e <__sfputs_r>:
 800559e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a0:	4606      	mov	r6, r0
 80055a2:	460f      	mov	r7, r1
 80055a4:	4614      	mov	r4, r2
 80055a6:	18d5      	adds	r5, r2, r3
 80055a8:	42ac      	cmp	r4, r5
 80055aa:	d101      	bne.n	80055b0 <__sfputs_r+0x12>
 80055ac:	2000      	movs	r0, #0
 80055ae:	e007      	b.n	80055c0 <__sfputs_r+0x22>
 80055b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055b4:	463a      	mov	r2, r7
 80055b6:	4630      	mov	r0, r6
 80055b8:	f7ff ffda 	bl	8005570 <__sfputc_r>
 80055bc:	1c43      	adds	r3, r0, #1
 80055be:	d1f3      	bne.n	80055a8 <__sfputs_r+0xa>
 80055c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055c4 <_vfiprintf_r>:
 80055c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c8:	460d      	mov	r5, r1
 80055ca:	b09d      	sub	sp, #116	; 0x74
 80055cc:	4614      	mov	r4, r2
 80055ce:	4698      	mov	r8, r3
 80055d0:	4606      	mov	r6, r0
 80055d2:	b118      	cbz	r0, 80055dc <_vfiprintf_r+0x18>
 80055d4:	6983      	ldr	r3, [r0, #24]
 80055d6:	b90b      	cbnz	r3, 80055dc <_vfiprintf_r+0x18>
 80055d8:	f7ff fc88 	bl	8004eec <__sinit>
 80055dc:	4b89      	ldr	r3, [pc, #548]	; (8005804 <_vfiprintf_r+0x240>)
 80055de:	429d      	cmp	r5, r3
 80055e0:	d11b      	bne.n	800561a <_vfiprintf_r+0x56>
 80055e2:	6875      	ldr	r5, [r6, #4]
 80055e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055e6:	07d9      	lsls	r1, r3, #31
 80055e8:	d405      	bmi.n	80055f6 <_vfiprintf_r+0x32>
 80055ea:	89ab      	ldrh	r3, [r5, #12]
 80055ec:	059a      	lsls	r2, r3, #22
 80055ee:	d402      	bmi.n	80055f6 <_vfiprintf_r+0x32>
 80055f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055f2:	f7ff fd19 	bl	8005028 <__retarget_lock_acquire_recursive>
 80055f6:	89ab      	ldrh	r3, [r5, #12]
 80055f8:	071b      	lsls	r3, r3, #28
 80055fa:	d501      	bpl.n	8005600 <_vfiprintf_r+0x3c>
 80055fc:	692b      	ldr	r3, [r5, #16]
 80055fe:	b9eb      	cbnz	r3, 800563c <_vfiprintf_r+0x78>
 8005600:	4629      	mov	r1, r5
 8005602:	4630      	mov	r0, r6
 8005604:	f7ff faea 	bl	8004bdc <__swsetup_r>
 8005608:	b1c0      	cbz	r0, 800563c <_vfiprintf_r+0x78>
 800560a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800560c:	07dc      	lsls	r4, r3, #31
 800560e:	d50e      	bpl.n	800562e <_vfiprintf_r+0x6a>
 8005610:	f04f 30ff 	mov.w	r0, #4294967295
 8005614:	b01d      	add	sp, #116	; 0x74
 8005616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800561a:	4b7b      	ldr	r3, [pc, #492]	; (8005808 <_vfiprintf_r+0x244>)
 800561c:	429d      	cmp	r5, r3
 800561e:	d101      	bne.n	8005624 <_vfiprintf_r+0x60>
 8005620:	68b5      	ldr	r5, [r6, #8]
 8005622:	e7df      	b.n	80055e4 <_vfiprintf_r+0x20>
 8005624:	4b79      	ldr	r3, [pc, #484]	; (800580c <_vfiprintf_r+0x248>)
 8005626:	429d      	cmp	r5, r3
 8005628:	bf08      	it	eq
 800562a:	68f5      	ldreq	r5, [r6, #12]
 800562c:	e7da      	b.n	80055e4 <_vfiprintf_r+0x20>
 800562e:	89ab      	ldrh	r3, [r5, #12]
 8005630:	0598      	lsls	r0, r3, #22
 8005632:	d4ed      	bmi.n	8005610 <_vfiprintf_r+0x4c>
 8005634:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005636:	f7ff fcf8 	bl	800502a <__retarget_lock_release_recursive>
 800563a:	e7e9      	b.n	8005610 <_vfiprintf_r+0x4c>
 800563c:	2300      	movs	r3, #0
 800563e:	9309      	str	r3, [sp, #36]	; 0x24
 8005640:	2320      	movs	r3, #32
 8005642:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005646:	f8cd 800c 	str.w	r8, [sp, #12]
 800564a:	2330      	movs	r3, #48	; 0x30
 800564c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005810 <_vfiprintf_r+0x24c>
 8005650:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005654:	f04f 0901 	mov.w	r9, #1
 8005658:	4623      	mov	r3, r4
 800565a:	469a      	mov	sl, r3
 800565c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005660:	b10a      	cbz	r2, 8005666 <_vfiprintf_r+0xa2>
 8005662:	2a25      	cmp	r2, #37	; 0x25
 8005664:	d1f9      	bne.n	800565a <_vfiprintf_r+0x96>
 8005666:	ebba 0b04 	subs.w	fp, sl, r4
 800566a:	d00b      	beq.n	8005684 <_vfiprintf_r+0xc0>
 800566c:	465b      	mov	r3, fp
 800566e:	4622      	mov	r2, r4
 8005670:	4629      	mov	r1, r5
 8005672:	4630      	mov	r0, r6
 8005674:	f7ff ff93 	bl	800559e <__sfputs_r>
 8005678:	3001      	adds	r0, #1
 800567a:	f000 80aa 	beq.w	80057d2 <_vfiprintf_r+0x20e>
 800567e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005680:	445a      	add	r2, fp
 8005682:	9209      	str	r2, [sp, #36]	; 0x24
 8005684:	f89a 3000 	ldrb.w	r3, [sl]
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 80a2 	beq.w	80057d2 <_vfiprintf_r+0x20e>
 800568e:	2300      	movs	r3, #0
 8005690:	f04f 32ff 	mov.w	r2, #4294967295
 8005694:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005698:	f10a 0a01 	add.w	sl, sl, #1
 800569c:	9304      	str	r3, [sp, #16]
 800569e:	9307      	str	r3, [sp, #28]
 80056a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056a4:	931a      	str	r3, [sp, #104]	; 0x68
 80056a6:	4654      	mov	r4, sl
 80056a8:	2205      	movs	r2, #5
 80056aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056ae:	4858      	ldr	r0, [pc, #352]	; (8005810 <_vfiprintf_r+0x24c>)
 80056b0:	f7fa fd96 	bl	80001e0 <memchr>
 80056b4:	9a04      	ldr	r2, [sp, #16]
 80056b6:	b9d8      	cbnz	r0, 80056f0 <_vfiprintf_r+0x12c>
 80056b8:	06d1      	lsls	r1, r2, #27
 80056ba:	bf44      	itt	mi
 80056bc:	2320      	movmi	r3, #32
 80056be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056c2:	0713      	lsls	r3, r2, #28
 80056c4:	bf44      	itt	mi
 80056c6:	232b      	movmi	r3, #43	; 0x2b
 80056c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056cc:	f89a 3000 	ldrb.w	r3, [sl]
 80056d0:	2b2a      	cmp	r3, #42	; 0x2a
 80056d2:	d015      	beq.n	8005700 <_vfiprintf_r+0x13c>
 80056d4:	9a07      	ldr	r2, [sp, #28]
 80056d6:	4654      	mov	r4, sl
 80056d8:	2000      	movs	r0, #0
 80056da:	f04f 0c0a 	mov.w	ip, #10
 80056de:	4621      	mov	r1, r4
 80056e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056e4:	3b30      	subs	r3, #48	; 0x30
 80056e6:	2b09      	cmp	r3, #9
 80056e8:	d94e      	bls.n	8005788 <_vfiprintf_r+0x1c4>
 80056ea:	b1b0      	cbz	r0, 800571a <_vfiprintf_r+0x156>
 80056ec:	9207      	str	r2, [sp, #28]
 80056ee:	e014      	b.n	800571a <_vfiprintf_r+0x156>
 80056f0:	eba0 0308 	sub.w	r3, r0, r8
 80056f4:	fa09 f303 	lsl.w	r3, r9, r3
 80056f8:	4313      	orrs	r3, r2
 80056fa:	9304      	str	r3, [sp, #16]
 80056fc:	46a2      	mov	sl, r4
 80056fe:	e7d2      	b.n	80056a6 <_vfiprintf_r+0xe2>
 8005700:	9b03      	ldr	r3, [sp, #12]
 8005702:	1d19      	adds	r1, r3, #4
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	9103      	str	r1, [sp, #12]
 8005708:	2b00      	cmp	r3, #0
 800570a:	bfbb      	ittet	lt
 800570c:	425b      	neglt	r3, r3
 800570e:	f042 0202 	orrlt.w	r2, r2, #2
 8005712:	9307      	strge	r3, [sp, #28]
 8005714:	9307      	strlt	r3, [sp, #28]
 8005716:	bfb8      	it	lt
 8005718:	9204      	strlt	r2, [sp, #16]
 800571a:	7823      	ldrb	r3, [r4, #0]
 800571c:	2b2e      	cmp	r3, #46	; 0x2e
 800571e:	d10c      	bne.n	800573a <_vfiprintf_r+0x176>
 8005720:	7863      	ldrb	r3, [r4, #1]
 8005722:	2b2a      	cmp	r3, #42	; 0x2a
 8005724:	d135      	bne.n	8005792 <_vfiprintf_r+0x1ce>
 8005726:	9b03      	ldr	r3, [sp, #12]
 8005728:	1d1a      	adds	r2, r3, #4
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	9203      	str	r2, [sp, #12]
 800572e:	2b00      	cmp	r3, #0
 8005730:	bfb8      	it	lt
 8005732:	f04f 33ff 	movlt.w	r3, #4294967295
 8005736:	3402      	adds	r4, #2
 8005738:	9305      	str	r3, [sp, #20]
 800573a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005820 <_vfiprintf_r+0x25c>
 800573e:	7821      	ldrb	r1, [r4, #0]
 8005740:	2203      	movs	r2, #3
 8005742:	4650      	mov	r0, sl
 8005744:	f7fa fd4c 	bl	80001e0 <memchr>
 8005748:	b140      	cbz	r0, 800575c <_vfiprintf_r+0x198>
 800574a:	2340      	movs	r3, #64	; 0x40
 800574c:	eba0 000a 	sub.w	r0, r0, sl
 8005750:	fa03 f000 	lsl.w	r0, r3, r0
 8005754:	9b04      	ldr	r3, [sp, #16]
 8005756:	4303      	orrs	r3, r0
 8005758:	3401      	adds	r4, #1
 800575a:	9304      	str	r3, [sp, #16]
 800575c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005760:	482c      	ldr	r0, [pc, #176]	; (8005814 <_vfiprintf_r+0x250>)
 8005762:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005766:	2206      	movs	r2, #6
 8005768:	f7fa fd3a 	bl	80001e0 <memchr>
 800576c:	2800      	cmp	r0, #0
 800576e:	d03f      	beq.n	80057f0 <_vfiprintf_r+0x22c>
 8005770:	4b29      	ldr	r3, [pc, #164]	; (8005818 <_vfiprintf_r+0x254>)
 8005772:	bb1b      	cbnz	r3, 80057bc <_vfiprintf_r+0x1f8>
 8005774:	9b03      	ldr	r3, [sp, #12]
 8005776:	3307      	adds	r3, #7
 8005778:	f023 0307 	bic.w	r3, r3, #7
 800577c:	3308      	adds	r3, #8
 800577e:	9303      	str	r3, [sp, #12]
 8005780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005782:	443b      	add	r3, r7
 8005784:	9309      	str	r3, [sp, #36]	; 0x24
 8005786:	e767      	b.n	8005658 <_vfiprintf_r+0x94>
 8005788:	fb0c 3202 	mla	r2, ip, r2, r3
 800578c:	460c      	mov	r4, r1
 800578e:	2001      	movs	r0, #1
 8005790:	e7a5      	b.n	80056de <_vfiprintf_r+0x11a>
 8005792:	2300      	movs	r3, #0
 8005794:	3401      	adds	r4, #1
 8005796:	9305      	str	r3, [sp, #20]
 8005798:	4619      	mov	r1, r3
 800579a:	f04f 0c0a 	mov.w	ip, #10
 800579e:	4620      	mov	r0, r4
 80057a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057a4:	3a30      	subs	r2, #48	; 0x30
 80057a6:	2a09      	cmp	r2, #9
 80057a8:	d903      	bls.n	80057b2 <_vfiprintf_r+0x1ee>
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0c5      	beq.n	800573a <_vfiprintf_r+0x176>
 80057ae:	9105      	str	r1, [sp, #20]
 80057b0:	e7c3      	b.n	800573a <_vfiprintf_r+0x176>
 80057b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80057b6:	4604      	mov	r4, r0
 80057b8:	2301      	movs	r3, #1
 80057ba:	e7f0      	b.n	800579e <_vfiprintf_r+0x1da>
 80057bc:	ab03      	add	r3, sp, #12
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	462a      	mov	r2, r5
 80057c2:	4b16      	ldr	r3, [pc, #88]	; (800581c <_vfiprintf_r+0x258>)
 80057c4:	a904      	add	r1, sp, #16
 80057c6:	4630      	mov	r0, r6
 80057c8:	f3af 8000 	nop.w
 80057cc:	4607      	mov	r7, r0
 80057ce:	1c78      	adds	r0, r7, #1
 80057d0:	d1d6      	bne.n	8005780 <_vfiprintf_r+0x1bc>
 80057d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057d4:	07d9      	lsls	r1, r3, #31
 80057d6:	d405      	bmi.n	80057e4 <_vfiprintf_r+0x220>
 80057d8:	89ab      	ldrh	r3, [r5, #12]
 80057da:	059a      	lsls	r2, r3, #22
 80057dc:	d402      	bmi.n	80057e4 <_vfiprintf_r+0x220>
 80057de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057e0:	f7ff fc23 	bl	800502a <__retarget_lock_release_recursive>
 80057e4:	89ab      	ldrh	r3, [r5, #12]
 80057e6:	065b      	lsls	r3, r3, #25
 80057e8:	f53f af12 	bmi.w	8005610 <_vfiprintf_r+0x4c>
 80057ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057ee:	e711      	b.n	8005614 <_vfiprintf_r+0x50>
 80057f0:	ab03      	add	r3, sp, #12
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	462a      	mov	r2, r5
 80057f6:	4b09      	ldr	r3, [pc, #36]	; (800581c <_vfiprintf_r+0x258>)
 80057f8:	a904      	add	r1, sp, #16
 80057fa:	4630      	mov	r0, r6
 80057fc:	f000 f880 	bl	8005900 <_printf_i>
 8005800:	e7e4      	b.n	80057cc <_vfiprintf_r+0x208>
 8005802:	bf00      	nop
 8005804:	080087a8 	.word	0x080087a8
 8005808:	080087c8 	.word	0x080087c8
 800580c:	08008788 	.word	0x08008788
 8005810:	080087e8 	.word	0x080087e8
 8005814:	080087f2 	.word	0x080087f2
 8005818:	00000000 	.word	0x00000000
 800581c:	0800559f 	.word	0x0800559f
 8005820:	080087ee 	.word	0x080087ee

08005824 <_printf_common>:
 8005824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005828:	4616      	mov	r6, r2
 800582a:	4699      	mov	r9, r3
 800582c:	688a      	ldr	r2, [r1, #8]
 800582e:	690b      	ldr	r3, [r1, #16]
 8005830:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005834:	4293      	cmp	r3, r2
 8005836:	bfb8      	it	lt
 8005838:	4613      	movlt	r3, r2
 800583a:	6033      	str	r3, [r6, #0]
 800583c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005840:	4607      	mov	r7, r0
 8005842:	460c      	mov	r4, r1
 8005844:	b10a      	cbz	r2, 800584a <_printf_common+0x26>
 8005846:	3301      	adds	r3, #1
 8005848:	6033      	str	r3, [r6, #0]
 800584a:	6823      	ldr	r3, [r4, #0]
 800584c:	0699      	lsls	r1, r3, #26
 800584e:	bf42      	ittt	mi
 8005850:	6833      	ldrmi	r3, [r6, #0]
 8005852:	3302      	addmi	r3, #2
 8005854:	6033      	strmi	r3, [r6, #0]
 8005856:	6825      	ldr	r5, [r4, #0]
 8005858:	f015 0506 	ands.w	r5, r5, #6
 800585c:	d106      	bne.n	800586c <_printf_common+0x48>
 800585e:	f104 0a19 	add.w	sl, r4, #25
 8005862:	68e3      	ldr	r3, [r4, #12]
 8005864:	6832      	ldr	r2, [r6, #0]
 8005866:	1a9b      	subs	r3, r3, r2
 8005868:	42ab      	cmp	r3, r5
 800586a:	dc26      	bgt.n	80058ba <_printf_common+0x96>
 800586c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005870:	1e13      	subs	r3, r2, #0
 8005872:	6822      	ldr	r2, [r4, #0]
 8005874:	bf18      	it	ne
 8005876:	2301      	movne	r3, #1
 8005878:	0692      	lsls	r2, r2, #26
 800587a:	d42b      	bmi.n	80058d4 <_printf_common+0xb0>
 800587c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005880:	4649      	mov	r1, r9
 8005882:	4638      	mov	r0, r7
 8005884:	47c0      	blx	r8
 8005886:	3001      	adds	r0, #1
 8005888:	d01e      	beq.n	80058c8 <_printf_common+0xa4>
 800588a:	6823      	ldr	r3, [r4, #0]
 800588c:	68e5      	ldr	r5, [r4, #12]
 800588e:	6832      	ldr	r2, [r6, #0]
 8005890:	f003 0306 	and.w	r3, r3, #6
 8005894:	2b04      	cmp	r3, #4
 8005896:	bf08      	it	eq
 8005898:	1aad      	subeq	r5, r5, r2
 800589a:	68a3      	ldr	r3, [r4, #8]
 800589c:	6922      	ldr	r2, [r4, #16]
 800589e:	bf0c      	ite	eq
 80058a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058a4:	2500      	movne	r5, #0
 80058a6:	4293      	cmp	r3, r2
 80058a8:	bfc4      	itt	gt
 80058aa:	1a9b      	subgt	r3, r3, r2
 80058ac:	18ed      	addgt	r5, r5, r3
 80058ae:	2600      	movs	r6, #0
 80058b0:	341a      	adds	r4, #26
 80058b2:	42b5      	cmp	r5, r6
 80058b4:	d11a      	bne.n	80058ec <_printf_common+0xc8>
 80058b6:	2000      	movs	r0, #0
 80058b8:	e008      	b.n	80058cc <_printf_common+0xa8>
 80058ba:	2301      	movs	r3, #1
 80058bc:	4652      	mov	r2, sl
 80058be:	4649      	mov	r1, r9
 80058c0:	4638      	mov	r0, r7
 80058c2:	47c0      	blx	r8
 80058c4:	3001      	adds	r0, #1
 80058c6:	d103      	bne.n	80058d0 <_printf_common+0xac>
 80058c8:	f04f 30ff 	mov.w	r0, #4294967295
 80058cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d0:	3501      	adds	r5, #1
 80058d2:	e7c6      	b.n	8005862 <_printf_common+0x3e>
 80058d4:	18e1      	adds	r1, r4, r3
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	2030      	movs	r0, #48	; 0x30
 80058da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058de:	4422      	add	r2, r4
 80058e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058e8:	3302      	adds	r3, #2
 80058ea:	e7c7      	b.n	800587c <_printf_common+0x58>
 80058ec:	2301      	movs	r3, #1
 80058ee:	4622      	mov	r2, r4
 80058f0:	4649      	mov	r1, r9
 80058f2:	4638      	mov	r0, r7
 80058f4:	47c0      	blx	r8
 80058f6:	3001      	adds	r0, #1
 80058f8:	d0e6      	beq.n	80058c8 <_printf_common+0xa4>
 80058fa:	3601      	adds	r6, #1
 80058fc:	e7d9      	b.n	80058b2 <_printf_common+0x8e>
	...

08005900 <_printf_i>:
 8005900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005904:	7e0f      	ldrb	r7, [r1, #24]
 8005906:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005908:	2f78      	cmp	r7, #120	; 0x78
 800590a:	4691      	mov	r9, r2
 800590c:	4680      	mov	r8, r0
 800590e:	460c      	mov	r4, r1
 8005910:	469a      	mov	sl, r3
 8005912:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005916:	d807      	bhi.n	8005928 <_printf_i+0x28>
 8005918:	2f62      	cmp	r7, #98	; 0x62
 800591a:	d80a      	bhi.n	8005932 <_printf_i+0x32>
 800591c:	2f00      	cmp	r7, #0
 800591e:	f000 80d8 	beq.w	8005ad2 <_printf_i+0x1d2>
 8005922:	2f58      	cmp	r7, #88	; 0x58
 8005924:	f000 80a3 	beq.w	8005a6e <_printf_i+0x16e>
 8005928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800592c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005930:	e03a      	b.n	80059a8 <_printf_i+0xa8>
 8005932:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005936:	2b15      	cmp	r3, #21
 8005938:	d8f6      	bhi.n	8005928 <_printf_i+0x28>
 800593a:	a101      	add	r1, pc, #4	; (adr r1, 8005940 <_printf_i+0x40>)
 800593c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005940:	08005999 	.word	0x08005999
 8005944:	080059ad 	.word	0x080059ad
 8005948:	08005929 	.word	0x08005929
 800594c:	08005929 	.word	0x08005929
 8005950:	08005929 	.word	0x08005929
 8005954:	08005929 	.word	0x08005929
 8005958:	080059ad 	.word	0x080059ad
 800595c:	08005929 	.word	0x08005929
 8005960:	08005929 	.word	0x08005929
 8005964:	08005929 	.word	0x08005929
 8005968:	08005929 	.word	0x08005929
 800596c:	08005ab9 	.word	0x08005ab9
 8005970:	080059dd 	.word	0x080059dd
 8005974:	08005a9b 	.word	0x08005a9b
 8005978:	08005929 	.word	0x08005929
 800597c:	08005929 	.word	0x08005929
 8005980:	08005adb 	.word	0x08005adb
 8005984:	08005929 	.word	0x08005929
 8005988:	080059dd 	.word	0x080059dd
 800598c:	08005929 	.word	0x08005929
 8005990:	08005929 	.word	0x08005929
 8005994:	08005aa3 	.word	0x08005aa3
 8005998:	682b      	ldr	r3, [r5, #0]
 800599a:	1d1a      	adds	r2, r3, #4
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	602a      	str	r2, [r5, #0]
 80059a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059a8:	2301      	movs	r3, #1
 80059aa:	e0a3      	b.n	8005af4 <_printf_i+0x1f4>
 80059ac:	6820      	ldr	r0, [r4, #0]
 80059ae:	6829      	ldr	r1, [r5, #0]
 80059b0:	0606      	lsls	r6, r0, #24
 80059b2:	f101 0304 	add.w	r3, r1, #4
 80059b6:	d50a      	bpl.n	80059ce <_printf_i+0xce>
 80059b8:	680e      	ldr	r6, [r1, #0]
 80059ba:	602b      	str	r3, [r5, #0]
 80059bc:	2e00      	cmp	r6, #0
 80059be:	da03      	bge.n	80059c8 <_printf_i+0xc8>
 80059c0:	232d      	movs	r3, #45	; 0x2d
 80059c2:	4276      	negs	r6, r6
 80059c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059c8:	485e      	ldr	r0, [pc, #376]	; (8005b44 <_printf_i+0x244>)
 80059ca:	230a      	movs	r3, #10
 80059cc:	e019      	b.n	8005a02 <_printf_i+0x102>
 80059ce:	680e      	ldr	r6, [r1, #0]
 80059d0:	602b      	str	r3, [r5, #0]
 80059d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059d6:	bf18      	it	ne
 80059d8:	b236      	sxthne	r6, r6
 80059da:	e7ef      	b.n	80059bc <_printf_i+0xbc>
 80059dc:	682b      	ldr	r3, [r5, #0]
 80059de:	6820      	ldr	r0, [r4, #0]
 80059e0:	1d19      	adds	r1, r3, #4
 80059e2:	6029      	str	r1, [r5, #0]
 80059e4:	0601      	lsls	r1, r0, #24
 80059e6:	d501      	bpl.n	80059ec <_printf_i+0xec>
 80059e8:	681e      	ldr	r6, [r3, #0]
 80059ea:	e002      	b.n	80059f2 <_printf_i+0xf2>
 80059ec:	0646      	lsls	r6, r0, #25
 80059ee:	d5fb      	bpl.n	80059e8 <_printf_i+0xe8>
 80059f0:	881e      	ldrh	r6, [r3, #0]
 80059f2:	4854      	ldr	r0, [pc, #336]	; (8005b44 <_printf_i+0x244>)
 80059f4:	2f6f      	cmp	r7, #111	; 0x6f
 80059f6:	bf0c      	ite	eq
 80059f8:	2308      	moveq	r3, #8
 80059fa:	230a      	movne	r3, #10
 80059fc:	2100      	movs	r1, #0
 80059fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a02:	6865      	ldr	r5, [r4, #4]
 8005a04:	60a5      	str	r5, [r4, #8]
 8005a06:	2d00      	cmp	r5, #0
 8005a08:	bfa2      	ittt	ge
 8005a0a:	6821      	ldrge	r1, [r4, #0]
 8005a0c:	f021 0104 	bicge.w	r1, r1, #4
 8005a10:	6021      	strge	r1, [r4, #0]
 8005a12:	b90e      	cbnz	r6, 8005a18 <_printf_i+0x118>
 8005a14:	2d00      	cmp	r5, #0
 8005a16:	d04d      	beq.n	8005ab4 <_printf_i+0x1b4>
 8005a18:	4615      	mov	r5, r2
 8005a1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a1e:	fb03 6711 	mls	r7, r3, r1, r6
 8005a22:	5dc7      	ldrb	r7, [r0, r7]
 8005a24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a28:	4637      	mov	r7, r6
 8005a2a:	42bb      	cmp	r3, r7
 8005a2c:	460e      	mov	r6, r1
 8005a2e:	d9f4      	bls.n	8005a1a <_printf_i+0x11a>
 8005a30:	2b08      	cmp	r3, #8
 8005a32:	d10b      	bne.n	8005a4c <_printf_i+0x14c>
 8005a34:	6823      	ldr	r3, [r4, #0]
 8005a36:	07de      	lsls	r6, r3, #31
 8005a38:	d508      	bpl.n	8005a4c <_printf_i+0x14c>
 8005a3a:	6923      	ldr	r3, [r4, #16]
 8005a3c:	6861      	ldr	r1, [r4, #4]
 8005a3e:	4299      	cmp	r1, r3
 8005a40:	bfde      	ittt	le
 8005a42:	2330      	movle	r3, #48	; 0x30
 8005a44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a4c:	1b52      	subs	r2, r2, r5
 8005a4e:	6122      	str	r2, [r4, #16]
 8005a50:	f8cd a000 	str.w	sl, [sp]
 8005a54:	464b      	mov	r3, r9
 8005a56:	aa03      	add	r2, sp, #12
 8005a58:	4621      	mov	r1, r4
 8005a5a:	4640      	mov	r0, r8
 8005a5c:	f7ff fee2 	bl	8005824 <_printf_common>
 8005a60:	3001      	adds	r0, #1
 8005a62:	d14c      	bne.n	8005afe <_printf_i+0x1fe>
 8005a64:	f04f 30ff 	mov.w	r0, #4294967295
 8005a68:	b004      	add	sp, #16
 8005a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a6e:	4835      	ldr	r0, [pc, #212]	; (8005b44 <_printf_i+0x244>)
 8005a70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a74:	6829      	ldr	r1, [r5, #0]
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a7c:	6029      	str	r1, [r5, #0]
 8005a7e:	061d      	lsls	r5, r3, #24
 8005a80:	d514      	bpl.n	8005aac <_printf_i+0x1ac>
 8005a82:	07df      	lsls	r7, r3, #31
 8005a84:	bf44      	itt	mi
 8005a86:	f043 0320 	orrmi.w	r3, r3, #32
 8005a8a:	6023      	strmi	r3, [r4, #0]
 8005a8c:	b91e      	cbnz	r6, 8005a96 <_printf_i+0x196>
 8005a8e:	6823      	ldr	r3, [r4, #0]
 8005a90:	f023 0320 	bic.w	r3, r3, #32
 8005a94:	6023      	str	r3, [r4, #0]
 8005a96:	2310      	movs	r3, #16
 8005a98:	e7b0      	b.n	80059fc <_printf_i+0xfc>
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	f043 0320 	orr.w	r3, r3, #32
 8005aa0:	6023      	str	r3, [r4, #0]
 8005aa2:	2378      	movs	r3, #120	; 0x78
 8005aa4:	4828      	ldr	r0, [pc, #160]	; (8005b48 <_printf_i+0x248>)
 8005aa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005aaa:	e7e3      	b.n	8005a74 <_printf_i+0x174>
 8005aac:	0659      	lsls	r1, r3, #25
 8005aae:	bf48      	it	mi
 8005ab0:	b2b6      	uxthmi	r6, r6
 8005ab2:	e7e6      	b.n	8005a82 <_printf_i+0x182>
 8005ab4:	4615      	mov	r5, r2
 8005ab6:	e7bb      	b.n	8005a30 <_printf_i+0x130>
 8005ab8:	682b      	ldr	r3, [r5, #0]
 8005aba:	6826      	ldr	r6, [r4, #0]
 8005abc:	6961      	ldr	r1, [r4, #20]
 8005abe:	1d18      	adds	r0, r3, #4
 8005ac0:	6028      	str	r0, [r5, #0]
 8005ac2:	0635      	lsls	r5, r6, #24
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	d501      	bpl.n	8005acc <_printf_i+0x1cc>
 8005ac8:	6019      	str	r1, [r3, #0]
 8005aca:	e002      	b.n	8005ad2 <_printf_i+0x1d2>
 8005acc:	0670      	lsls	r0, r6, #25
 8005ace:	d5fb      	bpl.n	8005ac8 <_printf_i+0x1c8>
 8005ad0:	8019      	strh	r1, [r3, #0]
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	6123      	str	r3, [r4, #16]
 8005ad6:	4615      	mov	r5, r2
 8005ad8:	e7ba      	b.n	8005a50 <_printf_i+0x150>
 8005ada:	682b      	ldr	r3, [r5, #0]
 8005adc:	1d1a      	adds	r2, r3, #4
 8005ade:	602a      	str	r2, [r5, #0]
 8005ae0:	681d      	ldr	r5, [r3, #0]
 8005ae2:	6862      	ldr	r2, [r4, #4]
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	f7fa fb7a 	bl	80001e0 <memchr>
 8005aec:	b108      	cbz	r0, 8005af2 <_printf_i+0x1f2>
 8005aee:	1b40      	subs	r0, r0, r5
 8005af0:	6060      	str	r0, [r4, #4]
 8005af2:	6863      	ldr	r3, [r4, #4]
 8005af4:	6123      	str	r3, [r4, #16]
 8005af6:	2300      	movs	r3, #0
 8005af8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005afc:	e7a8      	b.n	8005a50 <_printf_i+0x150>
 8005afe:	6923      	ldr	r3, [r4, #16]
 8005b00:	462a      	mov	r2, r5
 8005b02:	4649      	mov	r1, r9
 8005b04:	4640      	mov	r0, r8
 8005b06:	47d0      	blx	sl
 8005b08:	3001      	adds	r0, #1
 8005b0a:	d0ab      	beq.n	8005a64 <_printf_i+0x164>
 8005b0c:	6823      	ldr	r3, [r4, #0]
 8005b0e:	079b      	lsls	r3, r3, #30
 8005b10:	d413      	bmi.n	8005b3a <_printf_i+0x23a>
 8005b12:	68e0      	ldr	r0, [r4, #12]
 8005b14:	9b03      	ldr	r3, [sp, #12]
 8005b16:	4298      	cmp	r0, r3
 8005b18:	bfb8      	it	lt
 8005b1a:	4618      	movlt	r0, r3
 8005b1c:	e7a4      	b.n	8005a68 <_printf_i+0x168>
 8005b1e:	2301      	movs	r3, #1
 8005b20:	4632      	mov	r2, r6
 8005b22:	4649      	mov	r1, r9
 8005b24:	4640      	mov	r0, r8
 8005b26:	47d0      	blx	sl
 8005b28:	3001      	adds	r0, #1
 8005b2a:	d09b      	beq.n	8005a64 <_printf_i+0x164>
 8005b2c:	3501      	adds	r5, #1
 8005b2e:	68e3      	ldr	r3, [r4, #12]
 8005b30:	9903      	ldr	r1, [sp, #12]
 8005b32:	1a5b      	subs	r3, r3, r1
 8005b34:	42ab      	cmp	r3, r5
 8005b36:	dcf2      	bgt.n	8005b1e <_printf_i+0x21e>
 8005b38:	e7eb      	b.n	8005b12 <_printf_i+0x212>
 8005b3a:	2500      	movs	r5, #0
 8005b3c:	f104 0619 	add.w	r6, r4, #25
 8005b40:	e7f5      	b.n	8005b2e <_printf_i+0x22e>
 8005b42:	bf00      	nop
 8005b44:	080087f9 	.word	0x080087f9
 8005b48:	0800880a 	.word	0x0800880a

08005b4c <_putc_r>:
 8005b4c:	b570      	push	{r4, r5, r6, lr}
 8005b4e:	460d      	mov	r5, r1
 8005b50:	4614      	mov	r4, r2
 8005b52:	4606      	mov	r6, r0
 8005b54:	b118      	cbz	r0, 8005b5e <_putc_r+0x12>
 8005b56:	6983      	ldr	r3, [r0, #24]
 8005b58:	b90b      	cbnz	r3, 8005b5e <_putc_r+0x12>
 8005b5a:	f7ff f9c7 	bl	8004eec <__sinit>
 8005b5e:	4b1c      	ldr	r3, [pc, #112]	; (8005bd0 <_putc_r+0x84>)
 8005b60:	429c      	cmp	r4, r3
 8005b62:	d124      	bne.n	8005bae <_putc_r+0x62>
 8005b64:	6874      	ldr	r4, [r6, #4]
 8005b66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b68:	07d8      	lsls	r0, r3, #31
 8005b6a:	d405      	bmi.n	8005b78 <_putc_r+0x2c>
 8005b6c:	89a3      	ldrh	r3, [r4, #12]
 8005b6e:	0599      	lsls	r1, r3, #22
 8005b70:	d402      	bmi.n	8005b78 <_putc_r+0x2c>
 8005b72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b74:	f7ff fa58 	bl	8005028 <__retarget_lock_acquire_recursive>
 8005b78:	68a3      	ldr	r3, [r4, #8]
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	60a3      	str	r3, [r4, #8]
 8005b80:	da05      	bge.n	8005b8e <_putc_r+0x42>
 8005b82:	69a2      	ldr	r2, [r4, #24]
 8005b84:	4293      	cmp	r3, r2
 8005b86:	db1c      	blt.n	8005bc2 <_putc_r+0x76>
 8005b88:	b2eb      	uxtb	r3, r5
 8005b8a:	2b0a      	cmp	r3, #10
 8005b8c:	d019      	beq.n	8005bc2 <_putc_r+0x76>
 8005b8e:	6823      	ldr	r3, [r4, #0]
 8005b90:	1c5a      	adds	r2, r3, #1
 8005b92:	6022      	str	r2, [r4, #0]
 8005b94:	701d      	strb	r5, [r3, #0]
 8005b96:	b2ed      	uxtb	r5, r5
 8005b98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b9a:	07da      	lsls	r2, r3, #31
 8005b9c:	d405      	bmi.n	8005baa <_putc_r+0x5e>
 8005b9e:	89a3      	ldrh	r3, [r4, #12]
 8005ba0:	059b      	lsls	r3, r3, #22
 8005ba2:	d402      	bmi.n	8005baa <_putc_r+0x5e>
 8005ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ba6:	f7ff fa40 	bl	800502a <__retarget_lock_release_recursive>
 8005baa:	4628      	mov	r0, r5
 8005bac:	bd70      	pop	{r4, r5, r6, pc}
 8005bae:	4b09      	ldr	r3, [pc, #36]	; (8005bd4 <_putc_r+0x88>)
 8005bb0:	429c      	cmp	r4, r3
 8005bb2:	d101      	bne.n	8005bb8 <_putc_r+0x6c>
 8005bb4:	68b4      	ldr	r4, [r6, #8]
 8005bb6:	e7d6      	b.n	8005b66 <_putc_r+0x1a>
 8005bb8:	4b07      	ldr	r3, [pc, #28]	; (8005bd8 <_putc_r+0x8c>)
 8005bba:	429c      	cmp	r4, r3
 8005bbc:	bf08      	it	eq
 8005bbe:	68f4      	ldreq	r4, [r6, #12]
 8005bc0:	e7d1      	b.n	8005b66 <_putc_r+0x1a>
 8005bc2:	4629      	mov	r1, r5
 8005bc4:	4622      	mov	r2, r4
 8005bc6:	4630      	mov	r0, r6
 8005bc8:	f7fe ffb6 	bl	8004b38 <__swbuf_r>
 8005bcc:	4605      	mov	r5, r0
 8005bce:	e7e3      	b.n	8005b98 <_putc_r+0x4c>
 8005bd0:	080087a8 	.word	0x080087a8
 8005bd4:	080087c8 	.word	0x080087c8
 8005bd8:	08008788 	.word	0x08008788

08005bdc <_sbrk_r>:
 8005bdc:	b538      	push	{r3, r4, r5, lr}
 8005bde:	4d06      	ldr	r5, [pc, #24]	; (8005bf8 <_sbrk_r+0x1c>)
 8005be0:	2300      	movs	r3, #0
 8005be2:	4604      	mov	r4, r0
 8005be4:	4608      	mov	r0, r1
 8005be6:	602b      	str	r3, [r5, #0]
 8005be8:	f7fb fade 	bl	80011a8 <_sbrk>
 8005bec:	1c43      	adds	r3, r0, #1
 8005bee:	d102      	bne.n	8005bf6 <_sbrk_r+0x1a>
 8005bf0:	682b      	ldr	r3, [r5, #0]
 8005bf2:	b103      	cbz	r3, 8005bf6 <_sbrk_r+0x1a>
 8005bf4:	6023      	str	r3, [r4, #0]
 8005bf6:	bd38      	pop	{r3, r4, r5, pc}
 8005bf8:	200004ec 	.word	0x200004ec

08005bfc <__sread>:
 8005bfc:	b510      	push	{r4, lr}
 8005bfe:	460c      	mov	r4, r1
 8005c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c04:	f000 f8f8 	bl	8005df8 <_read_r>
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	bfab      	itete	ge
 8005c0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c0e:	89a3      	ldrhlt	r3, [r4, #12]
 8005c10:	181b      	addge	r3, r3, r0
 8005c12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c16:	bfac      	ite	ge
 8005c18:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c1a:	81a3      	strhlt	r3, [r4, #12]
 8005c1c:	bd10      	pop	{r4, pc}

08005c1e <__swrite>:
 8005c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c22:	461f      	mov	r7, r3
 8005c24:	898b      	ldrh	r3, [r1, #12]
 8005c26:	05db      	lsls	r3, r3, #23
 8005c28:	4605      	mov	r5, r0
 8005c2a:	460c      	mov	r4, r1
 8005c2c:	4616      	mov	r6, r2
 8005c2e:	d505      	bpl.n	8005c3c <__swrite+0x1e>
 8005c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c34:	2302      	movs	r3, #2
 8005c36:	2200      	movs	r2, #0
 8005c38:	f000 f868 	bl	8005d0c <_lseek_r>
 8005c3c:	89a3      	ldrh	r3, [r4, #12]
 8005c3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c46:	81a3      	strh	r3, [r4, #12]
 8005c48:	4632      	mov	r2, r6
 8005c4a:	463b      	mov	r3, r7
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c52:	f000 b817 	b.w	8005c84 <_write_r>

08005c56 <__sseek>:
 8005c56:	b510      	push	{r4, lr}
 8005c58:	460c      	mov	r4, r1
 8005c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c5e:	f000 f855 	bl	8005d0c <_lseek_r>
 8005c62:	1c43      	adds	r3, r0, #1
 8005c64:	89a3      	ldrh	r3, [r4, #12]
 8005c66:	bf15      	itete	ne
 8005c68:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c72:	81a3      	strheq	r3, [r4, #12]
 8005c74:	bf18      	it	ne
 8005c76:	81a3      	strhne	r3, [r4, #12]
 8005c78:	bd10      	pop	{r4, pc}

08005c7a <__sclose>:
 8005c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c7e:	f000 b813 	b.w	8005ca8 <_close_r>
	...

08005c84 <_write_r>:
 8005c84:	b538      	push	{r3, r4, r5, lr}
 8005c86:	4d07      	ldr	r5, [pc, #28]	; (8005ca4 <_write_r+0x20>)
 8005c88:	4604      	mov	r4, r0
 8005c8a:	4608      	mov	r0, r1
 8005c8c:	4611      	mov	r1, r2
 8005c8e:	2200      	movs	r2, #0
 8005c90:	602a      	str	r2, [r5, #0]
 8005c92:	461a      	mov	r2, r3
 8005c94:	f7fa fdbe 	bl	8000814 <_write>
 8005c98:	1c43      	adds	r3, r0, #1
 8005c9a:	d102      	bne.n	8005ca2 <_write_r+0x1e>
 8005c9c:	682b      	ldr	r3, [r5, #0]
 8005c9e:	b103      	cbz	r3, 8005ca2 <_write_r+0x1e>
 8005ca0:	6023      	str	r3, [r4, #0]
 8005ca2:	bd38      	pop	{r3, r4, r5, pc}
 8005ca4:	200004ec 	.word	0x200004ec

08005ca8 <_close_r>:
 8005ca8:	b538      	push	{r3, r4, r5, lr}
 8005caa:	4d06      	ldr	r5, [pc, #24]	; (8005cc4 <_close_r+0x1c>)
 8005cac:	2300      	movs	r3, #0
 8005cae:	4604      	mov	r4, r0
 8005cb0:	4608      	mov	r0, r1
 8005cb2:	602b      	str	r3, [r5, #0]
 8005cb4:	f7fb fa43 	bl	800113e <_close>
 8005cb8:	1c43      	adds	r3, r0, #1
 8005cba:	d102      	bne.n	8005cc2 <_close_r+0x1a>
 8005cbc:	682b      	ldr	r3, [r5, #0]
 8005cbe:	b103      	cbz	r3, 8005cc2 <_close_r+0x1a>
 8005cc0:	6023      	str	r3, [r4, #0]
 8005cc2:	bd38      	pop	{r3, r4, r5, pc}
 8005cc4:	200004ec 	.word	0x200004ec

08005cc8 <_fstat_r>:
 8005cc8:	b538      	push	{r3, r4, r5, lr}
 8005cca:	4d07      	ldr	r5, [pc, #28]	; (8005ce8 <_fstat_r+0x20>)
 8005ccc:	2300      	movs	r3, #0
 8005cce:	4604      	mov	r4, r0
 8005cd0:	4608      	mov	r0, r1
 8005cd2:	4611      	mov	r1, r2
 8005cd4:	602b      	str	r3, [r5, #0]
 8005cd6:	f7fb fa3e 	bl	8001156 <_fstat>
 8005cda:	1c43      	adds	r3, r0, #1
 8005cdc:	d102      	bne.n	8005ce4 <_fstat_r+0x1c>
 8005cde:	682b      	ldr	r3, [r5, #0]
 8005ce0:	b103      	cbz	r3, 8005ce4 <_fstat_r+0x1c>
 8005ce2:	6023      	str	r3, [r4, #0]
 8005ce4:	bd38      	pop	{r3, r4, r5, pc}
 8005ce6:	bf00      	nop
 8005ce8:	200004ec 	.word	0x200004ec

08005cec <_isatty_r>:
 8005cec:	b538      	push	{r3, r4, r5, lr}
 8005cee:	4d06      	ldr	r5, [pc, #24]	; (8005d08 <_isatty_r+0x1c>)
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	4608      	mov	r0, r1
 8005cf6:	602b      	str	r3, [r5, #0]
 8005cf8:	f7fb fa3d 	bl	8001176 <_isatty>
 8005cfc:	1c43      	adds	r3, r0, #1
 8005cfe:	d102      	bne.n	8005d06 <_isatty_r+0x1a>
 8005d00:	682b      	ldr	r3, [r5, #0]
 8005d02:	b103      	cbz	r3, 8005d06 <_isatty_r+0x1a>
 8005d04:	6023      	str	r3, [r4, #0]
 8005d06:	bd38      	pop	{r3, r4, r5, pc}
 8005d08:	200004ec 	.word	0x200004ec

08005d0c <_lseek_r>:
 8005d0c:	b538      	push	{r3, r4, r5, lr}
 8005d0e:	4d07      	ldr	r5, [pc, #28]	; (8005d2c <_lseek_r+0x20>)
 8005d10:	4604      	mov	r4, r0
 8005d12:	4608      	mov	r0, r1
 8005d14:	4611      	mov	r1, r2
 8005d16:	2200      	movs	r2, #0
 8005d18:	602a      	str	r2, [r5, #0]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f7fb fa36 	bl	800118c <_lseek>
 8005d20:	1c43      	adds	r3, r0, #1
 8005d22:	d102      	bne.n	8005d2a <_lseek_r+0x1e>
 8005d24:	682b      	ldr	r3, [r5, #0]
 8005d26:	b103      	cbz	r3, 8005d2a <_lseek_r+0x1e>
 8005d28:	6023      	str	r3, [r4, #0]
 8005d2a:	bd38      	pop	{r3, r4, r5, pc}
 8005d2c:	200004ec 	.word	0x200004ec

08005d30 <memcpy>:
 8005d30:	440a      	add	r2, r1
 8005d32:	4291      	cmp	r1, r2
 8005d34:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d38:	d100      	bne.n	8005d3c <memcpy+0xc>
 8005d3a:	4770      	bx	lr
 8005d3c:	b510      	push	{r4, lr}
 8005d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d46:	4291      	cmp	r1, r2
 8005d48:	d1f9      	bne.n	8005d3e <memcpy+0xe>
 8005d4a:	bd10      	pop	{r4, pc}

08005d4c <memmove>:
 8005d4c:	4288      	cmp	r0, r1
 8005d4e:	b510      	push	{r4, lr}
 8005d50:	eb01 0402 	add.w	r4, r1, r2
 8005d54:	d902      	bls.n	8005d5c <memmove+0x10>
 8005d56:	4284      	cmp	r4, r0
 8005d58:	4623      	mov	r3, r4
 8005d5a:	d807      	bhi.n	8005d6c <memmove+0x20>
 8005d5c:	1e43      	subs	r3, r0, #1
 8005d5e:	42a1      	cmp	r1, r4
 8005d60:	d008      	beq.n	8005d74 <memmove+0x28>
 8005d62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d6a:	e7f8      	b.n	8005d5e <memmove+0x12>
 8005d6c:	4402      	add	r2, r0
 8005d6e:	4601      	mov	r1, r0
 8005d70:	428a      	cmp	r2, r1
 8005d72:	d100      	bne.n	8005d76 <memmove+0x2a>
 8005d74:	bd10      	pop	{r4, pc}
 8005d76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d7e:	e7f7      	b.n	8005d70 <memmove+0x24>

08005d80 <__malloc_lock>:
 8005d80:	4801      	ldr	r0, [pc, #4]	; (8005d88 <__malloc_lock+0x8>)
 8005d82:	f7ff b951 	b.w	8005028 <__retarget_lock_acquire_recursive>
 8005d86:	bf00      	nop
 8005d88:	200004e0 	.word	0x200004e0

08005d8c <__malloc_unlock>:
 8005d8c:	4801      	ldr	r0, [pc, #4]	; (8005d94 <__malloc_unlock+0x8>)
 8005d8e:	f7ff b94c 	b.w	800502a <__retarget_lock_release_recursive>
 8005d92:	bf00      	nop
 8005d94:	200004e0 	.word	0x200004e0

08005d98 <_realloc_r>:
 8005d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d9c:	4680      	mov	r8, r0
 8005d9e:	4614      	mov	r4, r2
 8005da0:	460e      	mov	r6, r1
 8005da2:	b921      	cbnz	r1, 8005dae <_realloc_r+0x16>
 8005da4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005da8:	4611      	mov	r1, r2
 8005daa:	f7ff ba11 	b.w	80051d0 <_malloc_r>
 8005dae:	b92a      	cbnz	r2, 8005dbc <_realloc_r+0x24>
 8005db0:	f7ff f9a2 	bl	80050f8 <_free_r>
 8005db4:	4625      	mov	r5, r4
 8005db6:	4628      	mov	r0, r5
 8005db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dbc:	f000 f82e 	bl	8005e1c <_malloc_usable_size_r>
 8005dc0:	4284      	cmp	r4, r0
 8005dc2:	4607      	mov	r7, r0
 8005dc4:	d802      	bhi.n	8005dcc <_realloc_r+0x34>
 8005dc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005dca:	d812      	bhi.n	8005df2 <_realloc_r+0x5a>
 8005dcc:	4621      	mov	r1, r4
 8005dce:	4640      	mov	r0, r8
 8005dd0:	f7ff f9fe 	bl	80051d0 <_malloc_r>
 8005dd4:	4605      	mov	r5, r0
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	d0ed      	beq.n	8005db6 <_realloc_r+0x1e>
 8005dda:	42bc      	cmp	r4, r7
 8005ddc:	4622      	mov	r2, r4
 8005dde:	4631      	mov	r1, r6
 8005de0:	bf28      	it	cs
 8005de2:	463a      	movcs	r2, r7
 8005de4:	f7ff ffa4 	bl	8005d30 <memcpy>
 8005de8:	4631      	mov	r1, r6
 8005dea:	4640      	mov	r0, r8
 8005dec:	f7ff f984 	bl	80050f8 <_free_r>
 8005df0:	e7e1      	b.n	8005db6 <_realloc_r+0x1e>
 8005df2:	4635      	mov	r5, r6
 8005df4:	e7df      	b.n	8005db6 <_realloc_r+0x1e>
	...

08005df8 <_read_r>:
 8005df8:	b538      	push	{r3, r4, r5, lr}
 8005dfa:	4d07      	ldr	r5, [pc, #28]	; (8005e18 <_read_r+0x20>)
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	4608      	mov	r0, r1
 8005e00:	4611      	mov	r1, r2
 8005e02:	2200      	movs	r2, #0
 8005e04:	602a      	str	r2, [r5, #0]
 8005e06:	461a      	mov	r2, r3
 8005e08:	f7fb f97c 	bl	8001104 <_read>
 8005e0c:	1c43      	adds	r3, r0, #1
 8005e0e:	d102      	bne.n	8005e16 <_read_r+0x1e>
 8005e10:	682b      	ldr	r3, [r5, #0]
 8005e12:	b103      	cbz	r3, 8005e16 <_read_r+0x1e>
 8005e14:	6023      	str	r3, [r4, #0]
 8005e16:	bd38      	pop	{r3, r4, r5, pc}
 8005e18:	200004ec 	.word	0x200004ec

08005e1c <_malloc_usable_size_r>:
 8005e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e20:	1f18      	subs	r0, r3, #4
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	bfbc      	itt	lt
 8005e26:	580b      	ldrlt	r3, [r1, r0]
 8005e28:	18c0      	addlt	r0, r0, r3
 8005e2a:	4770      	bx	lr

08005e2c <_init>:
 8005e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2e:	bf00      	nop
 8005e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e32:	bc08      	pop	{r3}
 8005e34:	469e      	mov	lr, r3
 8005e36:	4770      	bx	lr

08005e38 <_fini>:
 8005e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3a:	bf00      	nop
 8005e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e3e:	bc08      	pop	{r3}
 8005e40:	469e      	mov	lr, r3
 8005e42:	4770      	bx	lr
